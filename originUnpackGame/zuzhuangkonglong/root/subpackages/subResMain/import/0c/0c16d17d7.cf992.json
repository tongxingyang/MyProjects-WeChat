[{"__type__":"cc.Material","_name":"Stroke","_effectAsset":{"__uuid__":"89UH3fksFNAKQtiHgyaT+W"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true},"props":{"outlineWidth":0.02}}}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_disabled","texture":"71VhFCTINJM6/Ky3oX9nBT","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"Frame5","texture":"427/CebnFCsqSIODj6KCTE","rect":[0,0,390,529],"offset":[0,0],"originalSize":[390,529],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"ppzz_0","texture":"3aEkRfehJDbYUlsn6Hm8me","rect":[0,0,178,69],"offset":[0,0],"originalSize":[178,69],"capInsets":[0,0,0,0]}},{"__type__":"cc.EffectAsset","_name":"Stroke","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"outlineWidth":{"value":[0.01],"type":13}},"program":"Stroke|vs|fs"}]}],"shaders":[{"hash":3339223287,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform InputData{\n  float outlineWidth;\n};\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.1;\n  vec4 color = texture(texture, pos);\n  if(color.a <= alpha || outlineWidth == 0.0)return false;\n  color = texture2D(texture, pos + vec2(0, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  if(pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)return true;\n  if(pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)return true;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = vec4(1, 1, 1, 0.8);\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float outlineWidth;\nbool checkIsMakeOutline(vec2 pos){\n  float alpha = 0.1;\n  vec4 color = texture2D(texture, pos);\n  if(color.a <= alpha || outlineWidth == 0.0)return false;\n  color = texture2D(texture, pos + vec2(0, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, 0));\n  if(color.a <= alpha)return true;\n  color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));\n  if(color.a <= alpha)return true;\n  if(pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)return true;\n  if(pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)return true;\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(checkIsMakeOutline(v_uv0)){\n    o = vec4(1, 1, 1, 0.8);\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"InputData","members":[{"name":"outlineWidth","type":13,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"Stroke|vs|fs"}]},{"__type__":"cc.SpriteFrame","content":{"name":"Frame4","texture":"9dNSbnI+ZEO7hwe4h50990","rect":[0,0,390,529],"offset":[0,0],"originalSize":[390,529],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"ppzz_4","texture":"ad5MKMXd9A/LZy7ECGDiWl","rect":[0,0,667,375],"offset":[0,0],"originalSize":[667,375],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"Frame3","texture":"29mJdX+xNCd5xg3fteAj7P","rect":[0,0,390,530],"offset":[0,0],"originalSize":[390,530],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_pressed","texture":"b4P/PCArtIdIH38t6mlw8Y","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_normal","texture":"e8Ueib+qJEhL6mXAHdnwbi","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}}]