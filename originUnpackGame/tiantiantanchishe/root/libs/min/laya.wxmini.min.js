var e = require("../../@babel/runtime/helpers/assertThisInitialized"), t = require("../../@babel/runtime/helpers/get"), i = require("../../@babel/runtime/helpers/getPrototypeOf"), n = require("../../@babel/runtime/helpers/inherits"), o = require("../../@babel/runtime/helpers/createSuper"), a = require("../../@babel/runtime/helpers/classCallCheck"), l = require("../../@babel/runtime/helpers/createClass");

window.wxMiniGame = function(s, r) {
    var u = function() {
        function e() {
            a(this, e);
        }
        return l(e, null, [ {
            key: "isLocalNativeFile",
            value: function(e) {
                for (var t = 0, i = y.nativefiles.length; t < i; t++) if (-1 != e.indexOf(y.nativefiles[t])) return !0;
                return !1;
            }
        }, {
            key: "isNetFile",
            value: function(e) {
                return (-1 != e.indexOf("http://") || -1 != e.indexOf("https://")) && -1 == e.indexOf(y.window.wx.env.USER_DATA_PATH);
            }
        }, {
            key: "getFileInfo",
            value: function(t) {
                var i = t, n = e.fakeObj[i];
                return null == n ? null : n;
            }
        }, {
            key: "read",
            value: function(t) {
                var i, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "utf8", o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", l = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "";
                i = "" == a || -1 == a.indexOf("http://") && -1 == a.indexOf("https://") ? t : e.getFileNativePath(t), 
                i = r.URL.getAdptedFilePath(i), e.fs.readFile({
                    filePath: i,
                    encoding: n,
                    success: function(e) {
                        null != o && o.runWith([ 0, e ]);
                    },
                    fail: function(t) {
                        t && "" != a ? e.downFiles(a, n, o, a, l, s) : null != o && o.runWith([ 1 ]);
                    }
                });
            }
        }, {
            key: "isFile",
            value: function(t) {
                var i;
                try {
                    i = e.fs.statSync(t);
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    return !1;
                }
                return i.isFile();
            }
        }, {
            key: "downFiles",
            value: function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "utf8", n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], l = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "", s = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6];
                e.down({
                    url: t,
                    success: function(r) {
                        200 === r.statusCode ? e.readFile(r.tempFilePath, i, n, o, a, l, s) : 403 === r.statusCode ? null != n && n.runWith([ 0, t ]) : null != n && n.runWith([ 1, r ]);
                    },
                    fail: function(e) {
                        null != n && n.runWith([ 1, e ]);
                    }
                }).onProgressUpdate(function(e) {
                    null != n && n.runWith([ 2, e.progress ]);
                });
            }
        }, {
            key: "readFile",
            value: function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "utf8", n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], l = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6];
                t = r.URL.getAdptedFilePath(t), e.fs.readFile({
                    filePath: t,
                    encoding: i,
                    success: function(s) {
                        -1 == t.indexOf("http://") && -1 == t.indexOf("https://") || -1 != t.indexOf(y.window.wx.env.USER_DATA_PATH) ? null != n && n.runWith([ 0, s ]) : y.AutoCacheDownFile || a ? (null != n && n.runWith([ 0, s ]), 
                        e.copyTOCache(t, o, null, i, l)) : null != n && n.runWith([ 0, s ]);
                    },
                    fail: function(e) {
                        e && null != n && n.runWith([ 1, e ]);
                    }
                });
            }
        }, {
            key: "downOtherFiles",
            value: function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "", o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                e.down({
                    url: t,
                    success: function(t) {
                        200 === t.statusCode ? (y.autoCacheFile || o) && -1 == n.indexOf("qlogo.cn") && -1 == n.indexOf(".php") ? (null != i && i.runWith([ 0, t.tempFilePath ]), 
                        e.copyTOCache(t.tempFilePath, n, null, "", a)) : null != i && i.runWith([ 0, t.tempFilePath ]) : null != i && i.runWith([ 1, t ]);
                    },
                    fail: function(e) {
                        null != i && i.runWith([ 1, e ]);
                    }
                });
            }
        }, {
            key: "copyFile",
            value: function(t, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                e.fs.copyFile({
                    srcPath: t,
                    destPath: i,
                    success: function() {
                        n && n.runWith(0);
                    },
                    fail: function(e) {
                        n && n.runWith([ 1, e ]);
                    }
                });
            }
        }, {
            key: "downLoadFile",
            value: function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "utf8";
                window.navigator.userAgent.indexOf("MiniGame") < 0 ? r.Laya.loader.load(t, n) : i == r.Loader.IMAGE || i == r.Loader.SOUND ? e.downOtherFiles(t, n, t, !0, !1) : e.downFiles(t, o, n, t, !0, i, !1);
            }
        }, {
            key: "copyTOCache",
            value: function(t, i, n) {
                var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], l = t.split("/"), s = l[l.length - 1], u = i, d = e.getFileInfo(i), c = e.getFileNativePath(s);
                e.fakeObj[u] = {
                    md5: s,
                    readyUrl: i,
                    size: 0,
                    times: r.Browser.now(),
                    encoding: o,
                    tempFilePath: t
                };
                var h = y.sizeLimit, f = e.getCacheUseSize();
                d ? d.readyUrl != i ? e.fs.getFileInfo({
                    filePath: t,
                    success: function(l) {
                        a && f + 4194304 + l.size >= h && (l.size > y.minClearSize && (y.minClearSize = l.size), 
                        e.onClearCacheRes()), e.deleteFile(t, i, n, o, l.size);
                    },
                    fail: function(e) {
                        null != n && n.runWith([ 1, e ]);
                    }
                }) : null != n && n.runWith([ 0 ]) : e.fs.getFileInfo({
                    filePath: t,
                    success: function(l) {
                        a && f + 4194304 + l.size >= h && (l.size > y.minClearSize && (y.minClearSize = l.size), 
                        e.onClearCacheRes()), e.fs.copyFile({
                            srcPath: t,
                            destPath: c,
                            success: function(t) {
                                e.onSaveFile(i, s, !0, o, n, l.size);
                            },
                            fail: function(e) {
                                null != n && n.runWith([ 1, e ]);
                            }
                        });
                    },
                    fail: function(e) {
                        null != n && n.runWith([ 1, e ]);
                    }
                });
            }
        }, {
            key: "onClearCacheRes",
            value: function() {
                var t = y.minClearSize, i = [];
                for (var n in e.filesListObj) "fileUsedSize" != n && i.push(e.filesListObj[n]);
                e.sortOn(i, "times", e.NUMERIC);
                for (var o = 0, a = 1, l = i.length; a < l; a++) {
                    var s = i[a];
                    if (o >= t) break;
                    o += s.size, e.deleteFile("", s.readyUrl);
                }
            }
        }, {
            key: "sortOn",
            value: function(t, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return n == e.NUMERIC ? t.sort(function(e, t) {
                    return e[i] - t[i];
                }) : n == (e.NUMERIC | e.DESCENDING) ? t.sort(function(e, t) {
                    return t[i] - e[i];
                }) : t.sort(function(e, t) {
                    return e[i] - t[i];
                });
            }
        }, {
            key: "getFileNativePath",
            value: function(t) {
                return e.fileNativeDir + "/" + t;
            }
        }, {
            key: "deleteFile",
            value: function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, l = e.getFileInfo(i), s = e.getFileNativePath(l.md5);
                e.fs.unlink({
                    filePath: s,
                    success: function(l) {
                        if ("" != t) {
                            var s = e.getFileNativePath(t);
                            e.fs.copyFile({
                                srcPath: t,
                                destPath: s,
                                success: function(l) {
                                    e.onSaveFile(i, t, !0, o, n, a);
                                },
                                fail: function(e) {
                                    null != n && n.runWith([ 1, e ]);
                                }
                            });
                        } else e.onSaveFile(i, t, !1, o, n, a);
                    },
                    fail: function(e) {
                        null != n && n.runWith([ 1, e ]);
                    }
                });
            }
        }, {
            key: "deleteAll",
            value: function() {
                var t = [];
                for (var i in e.filesListObj) "fileUsedSize" != i && t.push(e.filesListObj[i]);
                for (var n = 1, o = t.length; n < o; n++) {
                    var a = t[n];
                    e.deleteFile("", a.readyUrl);
                }
                e.filesListObj && e.filesListObj.fileUsedSize && (e.filesListObj.fileUsedSize = 0), 
                e.writeFilesList("", JSON.stringify({}), !1);
            }
        }, {
            key: "onSaveFile",
            value: function(t, i) {
                var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, l = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, s = t;
                if (null == e.filesListObj.fileUsedSize && (e.filesListObj.fileUsedSize = 0), n) {
                    var u = e.getFileNativePath(i);
                    e.filesListObj[s] = {
                        md5: i,
                        readyUrl: t,
                        size: l,
                        times: r.Browser.now(),
                        encoding: o,
                        tempFilePath: u
                    }, e.filesListObj.fileUsedSize = parseInt(e.filesListObj.fileUsedSize) + l, e.writeFilesList(s, JSON.stringify(e.filesListObj), !0), 
                    null != a && a.runWith([ 0 ]);
                } else if (e.filesListObj[s]) {
                    var d = parseInt(e.filesListObj[s].size);
                    e.filesListObj.fileUsedSize = parseInt(e.filesListObj.fileUsedSize) - d, e.fakeObj[s].md5 == e.filesListObj[s].md5 && delete e.fakeObj[s], 
                    delete e.filesListObj[s], e.writeFilesList(s, JSON.stringify(e.filesListObj), !1), 
                    null != a && a.runWith([ 0 ]);
                }
            }
        }, {
            key: "writeFilesList",
            value: function(t, i, n) {
                var o = e.fileNativeDir + "/" + e.fileListName;
                e.fs.writeFile({
                    filePath: o,
                    encoding: "utf8",
                    data: i,
                    success: function(e) {},
                    fail: function(e) {}
                }), !y.isZiYu && y.isPosMsgYu && y.window.wx.postMessage({
                    url: t,
                    data: e.filesListObj[t],
                    isLoad: "filenative",
                    isAdd: n
                });
            }
        }, {
            key: "getCacheUseSize",
            value: function() {
                return e.filesListObj && e.filesListObj.fileUsedSize ? e.filesListObj.fileUsedSize : 0;
            }
        }, {
            key: "getCacheList",
            value: function(t, i) {
                var n;
                try {
                    n = e.fs.statSync(t);
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    n = null;
                }
                n ? e.readSync(e.fileListName, "utf8", i) : (e.fs.mkdirSync(t, !0), i && i.runWith([ 1 ]));
            }
        }, {
            key: "existDir",
            value: function(t, i) {
                e.fs.mkdir({
                    dirPath: t,
                    success: function(e) {
                        null != i && i.runWith([ 0, {
                            data: JSON.stringify({})
                        } ]);
                    },
                    fail: function(t) {
                        -1 != t.errMsg.indexOf("file already exists") ? e.readSync(e.fileListName, "utf8", i) : null != i && i.runWith([ 1, t ]);
                    }
                });
            }
        }, {
            key: "readSync",
            value: function(t) {
                var i, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "utf8", o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = e.getFileNativePath(t);
                try {
                    i = e.fs.readFileSync(a, n), null != o && o.runWith([ 0, {
                        data: i
                    } ]);
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    null != o && o.runWith([ 1 ]);
                }
            }
        }, {
            key: "setNativeFileDir",
            value: function(t) {
                e.fileNativeDir = y.window.wx.env.USER_DATA_PATH + t;
            }
        } ]), e;
    }();
    u.fs = window.wx.getFileSystemManager(), u.down = window.wx.downloadFile, u.filesListObj = {}, 
    u.fakeObj = {}, u.fileListName = "layaairfiles.txt", u.ziyuFileData = {}, u.ziyuFileTextureData = {}, 
    u.loadPath = "", u.DESCENDING = 2, u.NUMERIC = 16;
    var d = function(s) {
        n(d, s);
        var u = o(d);
        function d(t) {
            var i;
            return a(this, d), (i = u.call(this))._sound = t, i._audio = t._sound, i._onCanplay = i.onCanPlay.bind(e(i)), 
            i._onError = i.onError.bind(e(i)), i._onEnd = i.__onEnd.bind(e(i)), i.addEventListener(), 
            i;
        }
        return l(d, [ {
            key: "addEventListener",
            value: function() {
                this._audio.onError(this._onError), this._audio.onCanplay(this._onCanplay);
            }
        }, {
            key: "offEventListener",
            value: function() {
                this._audio.offError(this._onError), this._audio.offCanplay(this._onCanplay), this._audio.offEnded(this._onEnd);
            }
        }, {
            key: "onError",
            value: function(e) {
                console.log("-----1---------------minisound-----url:", this.url), console.log(e), 
                this.event(r.Event.ERROR), this._audio && (this._sound.dispose(), this.offEventListener(), 
                this._sound = this._audio = null);
            }
        }, {
            key: "onCanPlay",
            value: function() {
                this._audio && (this.event(r.Event.COMPLETE), this.offEventListener(), this._audio.onEnded(this._onEnd), 
                this.isStopped ? this.stop() : this.play());
            }
        }, {
            key: "__onEnd",
            value: function() {
                if (1 == this.loops) return this.completeHandler && (r.Laya.systemTimer.once(10, this, this.__runComplete, [ this.completeHandler ], !1), 
                this.completeHandler = null), this.stop(), void this.event(r.Event.COMPLETE);
                this.loops > 0 && this.loops--, this.startTime = 0, this.play();
            }
        }, {
            key: "play",
            value: function() {
                this.isStopped = !1, r.SoundManager.addChannel(this), this._audio && this._audio.play();
            }
        }, {
            key: "startTime",
            set: function(e) {
                this._audio && (this._audio.startTime = e);
            }
        }, {
            key: "autoplay",
            get: function() {
                return !!this._audio && this._audio.autoplay;
            },
            set: function(e) {
                this._audio && (this._audio.autoplay = e);
            }
        }, {
            key: "position",
            get: function() {
                return this._audio ? this._audio.currentTime : 0;
            }
        }, {
            key: "duration",
            get: function() {
                return this._audio ? this._audio.duration : 0;
            }
        }, {
            key: "stop",
            value: function() {
                t(i(d.prototype), "stop", this).call(this), this.isStopped = !0, r.SoundManager.removeChannel(this), 
                this.completeHandler = null, this._audio && (this._audio.stop(), this.loop || (this.offEventListener(), 
                this._sound.dispose(), this._sound = null, this._audio = null));
            }
        }, {
            key: "pause",
            value: function() {
                this.isStopped = !0, this._audio && this._audio.pause();
            }
        }, {
            key: "loop",
            get: function() {
                return !!this._audio && this._audio.loop;
            },
            set: function(e) {
                this._audio && (this._audio.loop = e);
            }
        }, {
            key: "resume",
            value: function() {
                this.isStopped = !1, r.SoundManager.addChannel(this), this._audio && this._audio.play();
            }
        }, {
            key: "volume",
            get: function() {
                return this._audio ? this._audio.volume : 0;
            },
            set: function(e) {
                this._audio && (this._audio.volume = e);
            }
        } ]), d;
    }(r.SoundChannel), c = function(e) {
        n(i, e);
        var t = o(i);
        function i() {
            var e;
            return a(this, i), (e = t.call(this)).loaded = !1, e._sound = i._createSound(), 
            e;
        }
        return l(i, [ {
            key: "load",
            value: function(e) {
                if (u.isLocalNativeFile(e)) {
                    if (u.isNetFile(e)) if ("" != u.loadPath) e = e.split(u.loadPath)[1]; else {
                        var t = "" != r.URL.rootPath ? r.URL.rootPath : r.URL._basePath;
                        "" != t && (e = e.split(t)[1]);
                    }
                } else e = r.URL.formatURL(e);
                if (this.url = e, this.readyUrl = e, y.autoCacheFile && u.getFileInfo(e)) this.onDownLoadCallBack(e, 0); else if (y.autoCacheFile) if (u.isLocalNativeFile(e)) {
                    if (y.subNativeFiles && 0 == y.subNativeheads.length) for (var i in y.subNativeFiles) {
                        var n = y.subNativeFiles[i];
                        y.subNativeheads = y.subNativeheads.concat(n);
                        for (var o = 0; o < n.length; o++) y.subMaps[n[o]] = i + "/" + n[o];
                    }
                    if (y.subNativeFiles && -1 != e.indexOf("/")) {
                        var a = e.split("/")[0] + "/";
                        if (a && -1 != y.subNativeheads.indexOf(a)) {
                            var l = y.subMaps[a];
                            e = e.replace(a, l);
                        }
                    }
                    this.onDownLoadCallBack(e, 0);
                } else u.isNetFile(e) ? u.downOtherFiles(e, r.Handler.create(this, this.onDownLoadCallBack, [ e ]), e) : this.onDownLoadCallBack(e, 0); else this.onDownLoadCallBack(e, 0);
            }
        }, {
            key: "onDownLoadCallBack",
            value: function(e, t) {
                var i, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                if (!t && this._sound) if (y.autoCacheFile) {
                    if (n) i = n; else if (u.isLocalNativeFile(e)) {
                        var o = "" != r.URL.rootPath ? r.URL.rootPath : r.URL._basePath, a = e;
                        "" == o || -1 == e.indexOf("http://") && -1 == e.indexOf("https://") || (i = e.split(o)[1]), 
                        i || (i = a);
                    } else {
                        var l = u.getFileInfo(e);
                        i = l && l.md5 ? l.tempFilePath || u.getFileNativePath(l.md5) : e;
                    }
                    this._sound.src = this.readyUrl = i;
                } else this._sound.src = this.readyUrl = e; else this.event(r.Event.ERROR);
            }
        }, {
            key: "play",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (!this.url) return null;
                var i = new d(this);
                return i.url = this.url, i.loops = t, i.loop = 0 === t, i.startTime = e, i.isStopped = !1, 
                r.SoundManager.addChannel(i), i;
            }
        }, {
            key: "duration",
            get: function() {
                return this._sound.duration;
            }
        }, {
            key: "dispose",
            value: function() {
                this._sound && (this._sound.destroy(), this._sound = null, this.readyUrl = this.url = null);
            }
        } ], [ {
            key: "_createSound",
            value: function() {
                return i._id++, y.window.wx.createInnerAudioContext();
            }
        } ]), i;
    }(r.EventDispatcher);
    c._id = 0;
    var h = function() {
        function e() {
            a(this, e);
        }
        return l(e, null, [ {
            key: "_createInputElement",
            value: function() {
                r.Input._initInput(r.Input.area = r.Browser.createElement("textarea")), r.Input._initInput(r.Input.input = r.Browser.createElement("input")), 
                r.Input.inputContainer = r.Browser.createElement("div"), r.Input.inputContainer.style.position = "absolute", 
                r.Input.inputContainer.style.zIndex = 1e5, r.Browser.container.appendChild(r.Input.inputContainer), 
                r.Laya.stage.on("resize", null, e._onStageResize), y.window.wx.onWindowResize && y.window.wx.onWindowResize(function(e) {}), 
                r.SoundManager._soundClass = c, r.SoundManager._musicClass = c;
                var t = y.systemInfo.model, i = y.systemInfo.system;
                -1 != t.indexOf("iPhone") && (r.Browser.onIPhone = !0, r.Browser.onIOS = !0, r.Browser.onIPad = !0, 
                r.Browser.onAndroid = !1), -1 == i.indexOf("Android") && -1 == i.indexOf("Adr") || (r.Browser.onAndroid = !0, 
                r.Browser.onIPhone = !1, r.Browser.onIOS = !1, r.Browser.onIPad = !1);
            }
        }, {
            key: "_onStageResize",
            value: function() {
                r.Laya.stage._canvasTransform.identity().scale(r.Browser.width / r.Render.canvas.width / r.Browser.pixelRatio, r.Browser.height / r.Render.canvas.height / r.Browser.pixelRatio);
            }
        }, {
            key: "wxinputFocus",
            value: function(t) {
                var i = r.Input.inputElement.target;
                i && !i.editable || (y.window.wx.offKeyboardConfirm(), y.window.wx.offKeyboardInput(), 
                y.window.wx.showKeyboard({
                    defaultValue: i.text,
                    maxLength: i.maxChars,
                    multiple: i.multiline,
                    confirmHold: !0,
                    confirmType: i.confirmType || "done",
                    success: function(e) {},
                    fail: function(e) {}
                }), y.window.wx.onKeyboardConfirm(function(t) {
                    var n = t ? t.value : "";
                    i._restrictPattern && (n = n.replace(/\u2006|\x27/g, ""), i._restrictPattern.test(n) && (n = n.replace(i._restrictPattern, ""))), 
                    i.text = n, i.event(r.Event.INPUT), e.inputEnter(), i.event("confirm");
                }), y.window.wx.onKeyboardInput(function(t) {
                    var n = t ? t.value : "";
                    i.multiline || -1 == n.indexOf("\n") ? (i._restrictPattern && (n = n.replace(/\u2006|\x27/g, ""), 
                    i._restrictPattern.test(n) && (n = n.replace(i._restrictPattern, ""))), i.text = n, 
                    i.event(r.Event.INPUT)) : e.inputEnter();
                }));
            }
        }, {
            key: "inputEnter",
            value: function() {
                r.Input.inputElement.target.focus = !1;
            }
        }, {
            key: "wxinputblur",
            value: function() {
                e.hideKeyboard();
            }
        }, {
            key: "hideKeyboard",
            value: function() {
                y.window.wx.offKeyboardConfirm(), y.window.wx.offKeyboardInput(), y.window.wx.hideKeyboard({
                    success: function(e) {
                        console.log("隐藏键盘");
                    },
                    fail: function(e) {
                        console.log("隐藏键盘出错:" + (e ? e.errMsg : ""));
                    }
                });
            }
        } ]), e;
    }(), f = function(e) {
        n(i, e);
        var t = o(i);
        function i() {
            return a(this, i), t.call(this);
        }
        return l(i, [ {
            key: "_loadResourceFilter",
            value: function(e, t) {
                if (this.sourceUrl = r.URL.formatURL(t), u.isNetFile(t)) if ("" != u.loadPath) t = t.split(u.loadPath)[1]; else {
                    var n = "" != r.URL.rootPath ? r.URL.rootPath : r.URL._basePath, o = t;
                    "" != n && (t = t.split(n)[1]), t || (t = o);
                }
                if (y.subNativeFiles && 0 == y.subNativeheads.length) for (var a in y.subNativeFiles) {
                    var l = y.subNativeFiles[a];
                    y.subNativeheads = y.subNativeheads.concat(l);
                    for (var s = 0; s < l.length; s++) y.subMaps[l[s]] = a + "/" + l[s];
                }
                if (y.subNativeFiles && -1 != t.indexOf("/")) {
                    var d = t.split("/")[0] + "/";
                    if (d && -1 != y.subNativeheads.indexOf(d)) {
                        var c = y.subMaps[d];
                        t = t.replace(d, c);
                    }
                }
                switch (e) {
                  case r.Loader.IMAGE:
                  case "htmlimage":
                  case "nativeimage":
                    i._transformImgUrl(t, e, this);
                    break;

                  case r.Loader.SOUND:
                    this._loadSound(t);
                    break;

                  default:
                    this._loadResource(e, t);
                }
            }
        }, {
            key: "_loadSound",
            value: function(e) {
                if (y.autoCacheFile) {
                    var t = r.URL.formatURL(e);
                    u.isLocalNativeFile(e) || u.getFileInfo(t) ? i.onDownLoadCallBack(e, this, 0) : u.isNetFile(t) ? u.downOtherFiles(t, r.Handler.create(i, i.onDownLoadCallBack, [ t, this ]), t) : i.onDownLoadCallBack(e, this, 0);
                } else i.onDownLoadCallBack(e, this, 0);
            }
        }, {
            key: "complete",
            value: function(e) {
                e instanceof r.Resource ? e._setCreateURL(this.sourceUrl) : e instanceof r.Texture && e.bitmap instanceof r.Resource && e.bitmap._setCreateURL(this.sourceUrl), 
                this.originComplete(e);
            }
        }, {
            key: "_loadHttpRequestWhat",
            value: function(e, t) {
                var n = y.getUrlEncode(e, t);
                if (r.Loader.preLoadedMap[e]) this.onLoaded(r.Loader.preLoadedMap[e]); else {
                    var o = r.URL.formatURL(e);
                    if (y.AutoCacheDownFile) if (u.isLocalNativeFile(e) || u.getFileInfo(o)) {
                        var a = e, l = u.getFileInfo(o);
                        l && l.md5 && (a = l.tempFilePath || u.getFileNativePath(l.md5)), u.readFile(a, n, new r.Handler(i, i.onReadNativeCallBack, [ e, t, this ]), e);
                    } else u.isNetFile(o) ? u.downFiles(o, n, new r.Handler(i, i.onReadNativeCallBack, [ e, t, this ]), o, !0) : u.readFile(e, n, new r.Handler(i, i.onReadNativeCallBack, [ e, t, this ]), e); else u.isNetFile(o) ? this._loadHttpRequest(o, t, this, this.onLoaded, this, this.onProgress, this, this.onError) : u.readFile(e, n, new r.Handler(i, i.onReadNativeCallBack, [ e, t, this ]), e);
                }
            }
        } ], [ {
            key: "onDownLoadCallBack",
            value: function(e, t, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                if (i) t.event(r.Event.ERROR, "Load sound failed"); else {
                    var o;
                    if (y.autoCacheFile) if (n) o = n; else if (u.isLocalNativeFile(e)) o = e; else {
                        var a = u.getFileInfo(e);
                        o = a && a.md5 ? a.tempFilePath || u.getFileNativePath(a.md5) : e;
                    } else o = r.URL.formatURL(e);
                    e = o;
                    var l = new r.SoundManager._soundClass();
                    l.load(e), t.onLoaded(l);
                }
            }
        }, {
            key: "onReadNativeCallBack",
            value: function(e) {
                var t, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                o ? 1 == o && n._loadHttpRequest(e, i, n, n.onLoaded, n, n.onProgress, n, n.onError) : (t = i == r.Loader.JSON || i == r.Loader.ATLAS || i == r.Loader.PREFAB || i == r.Loader.PLF ? y.getJson(a.data) : i == r.Loader.XML ? r.Utils.parseXMLFromString(a.data) : a.data, 
                !y.isZiYu && y.isPosMsgYu && i != r.Loader.BUFFER && y.window.wx.postMessage({
                    url: e,
                    data: t,
                    isLoad: "filedata"
                }), n.onLoaded(t));
            }
        }, {
            key: "_transformImgUrl",
            value: function(e, t, n) {
                if (y.isZiYu || u.isLocalNativeFile(e)) n._loadImage(e, !1); else if (y.autoCacheFile) {
                    var o = r.URL.formatURL(e);
                    u.isLocalNativeFile(e) || u.getFileInfo(o) ? i.onCreateImage(e, n) : u.isNetFile(o) ? u.downOtherFiles(o, new r.Handler(i, i.onDownImgCallBack, [ e, n ]), o) : i.onCreateImage(e, n, !0);
                } else n._loadImage(e);
            }
        }, {
            key: "onDownImgCallBack",
            value: function(e, t, n) {
                var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "";
                n ? t.onError(null) : i.onCreateImage(e, t, !1, o);
            }
        }, {
            key: "onCreateImage",
            value: function(e, t) {
                var i, n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "";
                if (y.autoCacheFile) if (n) if (y.isZiYu) {
                    var a = r.URL.formatURL(e);
                    i = u.ziyuFileTextureData[a] ? u.ziyuFileTextureData[a] : e;
                } else i = e; else if ("" != o) i = o; else {
                    var l = u.getFileInfo(r.URL.formatURL(e));
                    i = l.tempFilePath || u.getFileNativePath(l.md5);
                } else i = n ? e : o;
                t._loadImage(i, !1);
            }
        } ]), i;
    }(r.EventDispatcher), v = function() {
        function e() {
            a(this, e);
        }
        return l(e, null, [ {
            key: "__init__",
            value: function() {
                e.items = e;
            }
        }, {
            key: "setItem",
            value: function(e, t) {
                try {
                    y.window.wx.setStorageSync(e, t);
                } catch (i) {
                    i = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(i);
                    y.window.wx.setStorage({
                        key: e,
                        data: t
                    });
                }
            }
        }, {
            key: "getItem",
            value: function(e) {
                return y.window.wx.getStorageSync(e);
            }
        }, {
            key: "setJSON",
            value: function(t, i) {
                e.setItem(t, i);
            }
        }, {
            key: "getJSON",
            value: function(t) {
                return e.getItem(t);
            }
        }, {
            key: "removeItem",
            value: function(e) {
                y.window.wx.removeStorageSync(e);
            }
        }, {
            key: "clear",
            value: function() {
                y.window.wx.clearStorageSync();
            }
        }, {
            key: "getStorageInfoSync",
            value: function() {
                try {
                    var e = y.window.wx.getStorageInfoSync();
                    return console.log(e.keys), console.log(e.currentSize), console.log(e.limitSize), 
                    e;
                } catch (e) {}
                return null;
            }
        } ]), e;
    }();
    v.support = !0;
    var y = function() {
        function e() {
            a(this, e);
        }
        return l(e, null, [ {
            key: "getJson",
            value: function(e) {
                return JSON.parse(e);
            }
        }, {
            key: "enable",
            value: function() {
                e.init(r.Laya.isWXPosMsg, r.Laya.isWXOpenDataContext);
            }
        }, {
            key: "init",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                e._inited || (e._inited = !0, e.window = window, e.window.hasOwnProperty("wx") && (e.window.navigator.userAgent.indexOf("MiniGame") < 0 || (e.isZiYu = i, 
                e.isPosMsgYu = t, e.EnvConfig = {}, e.isZiYu || (u.setNativeFileDir("/layaairGame"), 
                u.getCacheList(u.fileNativeDir, r.Handler.create(e, e.onMkdirCallBack))), e.systemInfo = e.window.wx.getSystemInfoSync(), 
                e.window.focus = function() {}, r.Laya._getUrlPath = function() {
                    return "";
                }, e.window.logtime = function(e) {}, e.window.alertTimeLog = function(e) {}, e.window.resetShareInfo = function() {}, 
                e.window.CanvasRenderingContext2D = function() {}, e.window.CanvasRenderingContext2D.prototype = e.window.wx.createCanvas().getContext("2d").__proto__, 
                e.window.document.body.appendChild = function() {}, e.EnvConfig.pixelRatioInt = 0, 
                r.Browser._pixelRatio = e.pixelRatio(), e._preCreateElement = r.Browser.createElement, 
                r.Browser.createElement = e.createElement, r.RunDriver.createShaderCondition = e.createShaderCondition, 
                r.Utils.parseXMLFromString = e.parseXMLFromString, r.Input._createInputElement = h._createInputElement, 
                r.Loader.prototype._loadResourceFilter = f.prototype._loadResourceFilter, r.Loader.prototype.originComplete = r.Loader.prototype.complete, 
                r.Loader.prototype.complete = f.prototype.complete, r.Loader.prototype._loadSound = f.prototype._loadSound, 
                r.Loader.prototype._loadHttpRequestWhat = f.prototype._loadHttpRequestWhat, r.LocalStorage._baseClass = v, 
                v.__init__(), e.window.wx.onMessage && e.window.wx.onMessage(e._onMessage))));
            }
        }, {
            key: "_onMessage",
            value: function(e) {
                switch (e.type) {
                  case "changeMatrix":
                    r.Laya.stage.transform.identity(), r.Laya.stage._width = e.w, r.Laya.stage._height = e.h, 
                    r.Laya.stage._canvasTransform = new r.Matrix(e.a, e.b, e.c, e.d, e.tx, e.ty);
                    break;

                  case "display":
                    r.Laya.stage.frameRate = e.rate || r.Stage.FRAME_FAST;
                    break;

                  case "undisplay":
                    r.Laya.stage.frameRate = r.Stage.FRAME_SLEEP;
                }
                "opendatacontext" == e.isLoad ? e.url && (u.ziyuFileData[e.url] = e.atlasdata, u.ziyuFileTextureData[e.imgReadyUrl] = e.imgNativeUrl) : "openJsondatacontext" == e.isLoad ? e.url && (u.ziyuFileData[e.url] = e.atlasdata) : "openJsondatacontextPic" == e.isLoad && (u.ziyuFileTextureData[e.imgReadyUrl] = e.imgNativeUrl);
            }
        }, {
            key: "getUrlEncode",
            value: function(e, t) {
                return "arraybuffer" == t ? "" : "utf8";
            }
        }, {
            key: "downLoadFile",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "utf8";
                u.getFileInfo(e) ? null != i && i.runWith([ 0 ]) : u.downLoadFile(e, t, i, n);
            }
        }, {
            key: "remove",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                u.deleteFile("", e, t, "", 0);
            }
        }, {
            key: "removeAll",
            value: function() {
                u.deleteAll();
            }
        }, {
            key: "hasNativeFile",
            value: function(e) {
                return u.isLocalNativeFile(e);
            }
        }, {
            key: "getFileInfo",
            value: function(e) {
                return u.getFileInfo(e);
            }
        }, {
            key: "getFileList",
            value: function() {
                return u.filesListObj;
            }
        }, {
            key: "exitMiniProgram",
            value: function() {
                e.window.wx.exitMiniProgram();
            }
        }, {
            key: "onMkdirCallBack",
            value: function(e, t) {
                e ? (u.fakeObj = {}, u.filesListObj = {}) : (u.filesListObj = JSON.parse(t.data), 
                u.fakeObj = JSON.parse(t.data));
                var i = u.fs.readdirSync(u.fileNativeDir);
                if (i.length) {
                    var n, o, a = {};
                    for (var l in u.filesListObj) "fileUsedSize" != l && (a[(n = u.filesListObj[l]).md5] = n.readyUrl);
                    for (var s = 0, r = i.length; s < r; s++) if ((o = i[s]) != u.fileListName) {
                        if (!a[o]) {
                            var d = u.getFileNativePath(o);
                            u.fs.unlink({
                                filePath: d,
                                success: function(e) {
                                    console.log("删除无引用的磁盘文件:" + o);
                                }
                            });
                        }
                        delete a[o];
                    }
                    for (var c in a) delete u.filesListObj[a[c]], delete u.fakeObj[a[c]], console.log("删除错误记录：", a[c]);
                }
            }
        }, {
            key: "pixelRatio",
            value: function() {
                if (!e.EnvConfig.pixelRatioInt) try {
                    return e.EnvConfig.pixelRatioInt = e.systemInfo.pixelRatio, e.systemInfo.pixelRatio;
                } catch (e) {}
                return e.EnvConfig.pixelRatioInt;
            }
        }, {
            key: "createElement",
            value: function(t) {
                var i;
                if ("canvas" == t) return 1 == e.idx ? e.isZiYu ? (i = e.window.sharedCanvas).style = {} : i = e.window.canvas : i = e.window.wx.createCanvas(), 
                e.idx++, i;
                if ("textarea" == t || "input" == t) return e.onCreateInput(t);
                if ("div" == t) {
                    var n = e._preCreateElement(t);
                    return n.contains = function(e) {
                        return null;
                    }, n.removeChild = function(e) {}, n;
                }
                return e._preCreateElement(t);
            }
        }, {
            key: "onCreateInput",
            value: function(t) {
                var i = e._preCreateElement(t);
                return i.focus = h.wxinputFocus, i.blur = h.wxinputblur, i.style = {}, i.value = 0, 
                i.parentElement = {}, i.placeholder = {}, i.type = {}, i.setColor = function(e) {}, 
                i.setType = function(e) {}, i.setFontFace = function(e) {}, i.addEventListener = function(e) {}, 
                i.contains = function(e) {
                    return null;
                }, i.removeChild = function(e) {}, i;
            }
        }, {
            key: "createShaderCondition",
            value: function(e) {
                return function() {
                    return this[e.replace("this.", "")];
                };
            }
        }, {
            key: "sendAtlasToOpenDataContext",
            value: function(t) {
                if (!e.isZiYu) {
                    var i = r.Loader.getRes(r.URL.formatURL(t));
                    if (!i) throw "传递的url没有获取到对应的图集数据信息，请确保图集已经过！";
                    if (i.meta.image.split(","), i.meta && i.meta.image) for (var n = i.meta.image.split(","), o = t.indexOf("/") >= 0 ? "/" : "\\", a = t.lastIndexOf(o), l = a >= 0 ? t.substr(0, a + 1) : "", s = 0, u = n.length; s < u; s++) n[s] = l + n[s]; else n = [ t.replace(".json", ".png") ];
                    for (s = 0; s < n.length; s++) {
                        var d = n[s];
                        e.postInfoToContext(r.Laya.URL.formatURL(t), r.Laya.URL.formatURL(d), i);
                    }
                }
            }
        }, {
            key: "postInfoToContext",
            value: function(t, i, n) {
                var o = {
                    frames: n.frames,
                    meta: n.meta
                }, a = i, l = u.getFileInfo(r.URL.formatURL(i));
                if (l) var s = l.tempFilePath || u.getFileNativePath(l.md5); else s = a;
                if (!s) throw "获取图集的磁盘url路径不存在！";
                e.window.wx.postMessage({
                    url: t,
                    atlasdata: o,
                    imgNativeUrl: s,
                    imgReadyUrl: a,
                    isLoad: "opendatacontext"
                });
            }
        }, {
            key: "sendSinglePicToOpenDataContext",
            value: function(t) {
                var i = r.URL.formatURL(t), n = u.getFileInfo(i);
                if (n) {
                    var o = n.tempFilePath || u.getFileNativePath(n.md5);
                    t = i;
                } else o = t;
                if (!o) throw "获取图集的磁盘url路径不存在！";
                t = r.Laya.URL.formatURL(t), e.window.wx.postMessage({
                    url: t,
                    imgNativeUrl: o,
                    imgReadyUrl: t,
                    isLoad: "openJsondatacontextPic"
                });
            }
        }, {
            key: "sendJsonDataToDataContext",
            value: function(t) {
                if (!e.isZiYu) {
                    t = r.Laya.URL.formatURL(t);
                    var i = r.Loader.getRes(t);
                    if (!i) throw "传递的url没有获取到对应的图集数据信息，请确保图集已经过！";
                    e.window.wx.postMessage({
                        url: t,
                        atlasdata: i,
                        isLoad: "openJsondatacontext"
                    });
                }
            }
        } ]), e;
    }();
    y._inited = !1, y.autoCacheFile = !0, y.minClearSize = 5242880, y.sizeLimit = 209715200, 
    y.nativefiles = [ "layaNativeDir", "wxlocal" ], y.subNativeFiles = [], y.subNativeheads = [], 
    y.subMaps = [], y.AutoCacheDownFile = !1, y.parseXMLFromString = function(e) {
        var t;
        e = e.replace(/>\s+</g, "><");
        try {
            t = new y.window.Parser.DOMParser().parseFromString(e, "text/xml");
        } catch (e) {
            e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
            throw "需要引入xml解析库文件";
        }
        return t;
    }, y.idx = 1;
    var p = function(e) {
        n(u, e);
        var s = o(u);
        function u() {
            return a(this, u), s.call(this);
        }
        return l(u, [ {
            key: "on",
            value: function(e, n, o) {
                var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return t(i(u.prototype), "on", this).call(this, e, n, o, a), u.startListen(this.onDeviceOrientationChange), 
                this;
            }
        }, {
            key: "off",
            value: function(e, n, o) {
                var a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                return this.hasListener(e) || u.stopListen(), t(i(u.prototype), "off", this).call(this, e, n, o, a);
            }
        } ], [ {
            key: "__init__",
            value: function() {
                try {
                    var e;
                    if (!(e = r.Accelerator)) return;
                    e.prototype.on = u.prototype.on, e.prototype.off = u.prototype.off;
                } catch (e) {}
            }
        }, {
            key: "startListen",
            value: function(e) {
                if (u._callBack = e, !u._isListening) {
                    u._isListening = !0;
                    try {
                        y.window.wx.onAccelerometerChange(u.onAccelerometerChange);
                    } catch (e) {}
                }
            }
        }, {
            key: "stopListen",
            value: function() {
                u._isListening = !1;
                try {
                    y.window.wx.stopAccelerometer({});
                } catch (e) {}
            }
        }, {
            key: "onAccelerometerChange",
            value: function(e) {
                var t;
                (t = {}).acceleration = e, t.accelerationIncludingGravity = e, t.rotationRate = {}, 
                null != u._callBack && u._callBack(t);
            }
        } ]), u;
    }(r.EventDispatcher);
    p._isListening = !1;
    var g = function() {
        function e() {
            a(this, e);
        }
        return l(e, null, [ {
            key: "__init__",
            value: function() {
                y.window.navigator.geolocation.getCurrentPosition = e.getCurrentPosition, y.window.navigator.geolocation.watchPosition = e.watchPosition, 
                y.window.navigator.geolocation.clearWatch = e.clearWatch;
            }
        }, {
            key: "getCurrentPosition",
            value: function() {
                var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                (e = {}).success = function(e) {
                    null != t && t(e);
                }, e.fail = i, y.window.wx.getLocation(e);
            }
        }, {
            key: "watchPosition",
            value: function() {
                var t, i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                return e._curID++, (t = {}).success = i, t.error = n, e._watchDic[e._curID] = t, 
                r.Laya.systemTimer.loop(1e3, null, e._myLoop), e._curID;
            }
        }, {
            key: "clearWatch",
            value: function(t) {
                delete e._watchDic[t], e._hasWatch() || r.Laya.systemTimer.clear(null, e._myLoop);
            }
        }, {
            key: "_hasWatch",
            value: function() {
                var t;
                for (t in e._watchDic) if (e._watchDic[t]) return !0;
                return !1;
            }
        }, {
            key: "_myLoop",
            value: function() {
                e.getCurrentPosition(e._mySuccess, e._myError);
            }
        }, {
            key: "_mySuccess",
            value: function(t) {
                var i, n = {};
                for (i in n.coords = t, n.timestamp = r.Browser.now(), e._watchDic) e._watchDic[i].success && e._watchDic[i].success(n);
            }
        }, {
            key: "_myError",
            value: function(t) {
                var i;
                for (i in e._watchDic) e._watchDic[i].error && e._watchDic[i].error(t);
            }
        } ]), e;
    }();
    g._watchDic = {}, g._curID = 0, s.MiniAccelerator = p, s.MiniAdpter = y, s.MiniFileMgr = u, 
    s.MiniInput = h, s.MiniLoader = f, s.MiniLocalStorage = v, s.MiniLocation = g, s.MiniSound = c, 
    s.MiniSoundChannel = d, s.MiniVideo = function() {
        function e() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 320, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 240;
            a(this, e), this.videoend = !1, this.videourl = "", this.videoElement = y.window.wx.createVideo({
                width: t,
                height: i,
                autoplay: !0
            });
        }
        return l(e, [ {
            key: "on",
            value: function(e, t, i) {
                "loadedmetadata" == e ? (this.onPlayFunc = i.bind(t), this.videoElement.onPlay = this.onPlayFunction.bind(this)) : "ended" == e && (this.onEndedFunC = i.bind(t), 
                this.videoElement.onEnded = this.onEndedFunction.bind(this)), this.videoElement.onTimeUpdate = this.onTimeUpdateFunc.bind(this);
            }
        }, {
            key: "onTimeUpdateFunc",
            value: function(e) {
                this.position = e.position, this._duration = e.duration;
            }
        }, {
            key: "duration",
            get: function() {
                return this._duration;
            }
        }, {
            key: "onPlayFunction",
            value: function() {
                this.videoElement && (this.videoElement.readyState = 200), console.log("=====视频加载完成========"), 
                null != this.onPlayFunc && this.onPlayFunc();
            }
        }, {
            key: "onEndedFunction",
            value: function() {
                this.videoElement && (this.videoend = !0, console.log("=====视频播放完毕========"), null != this.onEndedFunC && this.onEndedFunC());
            }
        }, {
            key: "off",
            value: function(e, t, i) {
                "loadedmetadata" == e ? (this.onPlayFunc = i.bind(t), this.videoElement.offPlay = this.onPlayFunction.bind(this)) : "ended" == e && (this.onEndedFunC = i.bind(t), 
                this.videoElement.offEnded = this.onEndedFunction.bind(this));
            }
        }, {
            key: "load",
            value: function(e) {
                this.videoElement && (this.videoElement.src = e);
            }
        }, {
            key: "play",
            value: function() {
                this.videoElement && (this.videoend = !1, this.videoElement.play());
            }
        }, {
            key: "pause",
            value: function() {
                this.videoElement && (this.videoend = !0, this.videoElement.pause());
            }
        }, {
            key: "currentTime",
            get: function() {
                return this.videoElement ? this.videoElement.initialTime : 0;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.initialTime = e);
            }
        }, {
            key: "videoWidth",
            get: function() {
                return this.videoElement ? this.videoElement.width : 0;
            }
        }, {
            key: "videoHeight",
            get: function() {
                return this.videoElement ? this.videoElement.height : 0;
            }
        }, {
            key: "ended",
            get: function() {
                return this.videoend;
            }
        }, {
            key: "loop",
            get: function() {
                return !!this.videoElement && this.videoElement.loop;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.loop = e);
            }
        }, {
            key: "playbackRate",
            get: function() {
                return this.videoElement ? this.videoElement.playbackRate : 0;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.playbackRate = e);
            }
        }, {
            key: "muted",
            get: function() {
                return !!this.videoElement && this.videoElement.muted;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.muted = e);
            }
        }, {
            key: "paused",
            get: function() {
                return !!this.videoElement && this.videoElement.paused;
            }
        }, {
            key: "size",
            value: function(e, t) {
                this.videoElement && (this.videoElement.width = e, this.videoElement.height = t);
            }
        }, {
            key: "x",
            get: function() {
                return this.videoElement ? this.videoElement.x : 0;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.x = e);
            }
        }, {
            key: "y",
            get: function() {
                return this.videoElement ? this.videoElement.y : 0;
            },
            set: function(e) {
                this.videoElement && (this.videoElement.y = e);
            }
        }, {
            key: "currentSrc",
            get: function() {
                return this.videoElement.src;
            }
        }, {
            key: "destroy",
            value: function() {
                this.videoElement && this.videoElement.destroy(), this.videoElement = null, this.onEndedFunC = null, 
                this.onPlayFunc = null, this.videoend = !1, this.videourl = null;
            }
        }, {
            key: "reload",
            value: function() {
                this.videoElement && (this.videoElement.src = this.videourl);
            }
        } ], [ {
            key: "__init__",
            value: function() {}
        } ]), e;
    }();
};