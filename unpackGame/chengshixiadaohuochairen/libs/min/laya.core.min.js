var t = require("../../@babel/runtime/helpers/interopRequireDefault");

require("../../@babel/runtime/helpers/Arrayincludes");

var e = t(require("../../@babel/runtime/helpers/get")), i = t(require("../../@babel/runtime/helpers/assertThisInitialized")), n = t(require("../../@babel/runtime/helpers/possibleConstructorReturn")), r = t(require("../../@babel/runtime/helpers/getPrototypeOf")), a = t(require("../../@babel/runtime/helpers/inherits")), s = t(require("../../@babel/runtime/helpers/createClass")), o = t(require("../../@babel/runtime/helpers/classCallCheck"));

function l(t) {
    return function() {
        var e, i = (0, r.default)(t);
        if (h()) {
            var a = (0, r.default)(this).constructor;
            e = Reflect.construct(i, arguments, a);
        } else e = i.apply(this, arguments);
        return (0, n.default)(this, e);
    };
}

function h() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ("function" == typeof Proxy) return !0;
    try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), 
        !0;
    } catch (t) {
        t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
        return !1;
    }
}

window.Laya = function(t) {
    var h = function t() {
        (0, o.default)(this, t);
    };
    h.animationInterval = 50, h.isAntialias = !0, h.isAlpha = !1, h.premultipliedAlpha = !0, 
    h.isStencil = !0, h.preserveDrawingBuffer = !1, h.webGL2D_MeshAllocMaxMem = !0, 
    h.is2DPixelArtGame = !1, h.useWebGL2 = !0, h.printWebglOrder = !1, h.allowGPUInstanceDynamicBatch = !0, 
    h.enableStaticBatch = !0, h.useRetinalCanvas = !1, window.Config = h;
    var u = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "regClass",
            value: function(e) {
                t.__classMap[e.name] = e;
            }
        } ]), t;
    }();
    u.Laya = null, u.Timer = null, u.WorkerLoader = null, u.Dragging = null, u.GraphicsBounds = null, 
    u.Sprite = null, u.TextRender = null, u.TextAtlas = null, u.timer = null, u.systemTimer = null, 
    u.startTimer = null, u.updateTimer = null, u.lateTimer = null, u.physicsTimer = null, 
    u.stage = null, u.Loader = null, u.loader = null, u.TTFLoader = null, u.SoundManager = null, 
    u.WebAudioSound = null, u.AudioSound = null, u.ShaderCompile = null, u.ClassUtils = null, 
    u.SceneUtils = null, u.Context = null, u.Render = null, u.MouseManager = null, u.Text = null, 
    u.Browser = null, u.WebGL = null, u.Pool = null, u.Utils = null, u.Graphics = null, 
    u.Submit = null, u.Stage = null, u.Resource = null, u.__classMap = {};
    var c = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "getPoolBySign",
            value: function(e) {
                return t._poolDic[e] || (t._poolDic[e] = []);
            }
        }, {
            key: "clearBySign",
            value: function(e) {
                t._poolDic[e] && (t._poolDic[e].length = 0);
            }
        }, {
            key: "recover",
            value: function(e, i) {
                i[t.POOLSIGN] || (i[t.POOLSIGN] = !0, t.getPoolBySign(e).push(i));
            }
        }, {
            key: "recoverByClass",
            value: function(e) {
                if (e) {
                    var i = e.__className || e.constructor._$gid;
                    i && t.recover(i, e);
                }
            }
        }, {
            key: "_getClassSign",
            value: function(e) {
                var i = e.__className || e._$gid;
                return i || (e._$gid = i = t._CLSID + "", t._CLSID++), i;
            }
        }, {
            key: "createByClass",
            value: function(e) {
                return t.getItemByClass(t._getClassSign(e), e);
            }
        }, {
            key: "getItemByClass",
            value: function(e, i) {
                if (!t._poolDic[e]) return new i();
                var n = t.getPoolBySign(e);
                if (n.length) {
                    var r = n.pop();
                    r[t.POOLSIGN] = !1;
                } else r = new i();
                return r;
            }
        }, {
            key: "getItemByCreateFun",
            value: function(e, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = t.getPoolBySign(e), a = r.length ? r.pop() : i.call(n);
                return a[t.POOLSIGN] = !1, a;
            }
        }, {
            key: "getItem",
            value: function(e) {
                var i = t.getPoolBySign(e), n = i.length ? i.pop() : null;
                return n && (n[t.POOLSIGN] = !1), n;
            }
        } ]), t;
    }();
    c._CLSID = 0, c.POOLSIGN = "__InPool", c._poolDic = {};
    var _ = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("AlphaCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.alpha(this.alpha);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e) {
                var i = c.getItemByClass("AlphaCmd", t);
                return i.alpha = e, i;
            }
        } ]), t;
    }();
    _.ID = "Alpha";
    var d = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.fillColor = null, this.lineColor = null, c.recover("DrawCircleCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._drawCircle(this.x + e, this.y + i, this.radius, this.fillColor, this.lineColor, this.lineWidth, this.vid);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o) {
                var l = c.getItemByClass("DrawCircleCmd", t);
                return l.x = e, l.y = i, l.radius = n, l.fillColor = r, l.lineColor = a, l.lineWidth = s, 
                l.vid = o, l;
            }
        } ]), t;
    }();
    d.ID = "DrawCircle";
    var f = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.points = null, this.lineColor = null, c.recover("DrawCurvesCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.points && t.drawCurves(this.x + e, this.y + i, this.points, this.lineColor, this.lineWidth);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a) {
                var s = c.getItemByClass("DrawCurvesCmd", t);
                return s.x = e, s.y = i, s.points = n, s.lineColor = r, s.lineWidth = a, s;
            }
        } ]), t;
    }();
    f.ID = "DrawCurves";
    var v = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture && this.texture._removeReference(), this.texture = null, c.recover("DrawImageCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.texture && t.drawTexture(this.texture, this.x + e, this.y + i, this.width, this.height);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a) {
                var s = c.getItemByClass("DrawImageCmd", t);
                return s.texture = e, e._addReference(), s.x = i, s.y = n, s.width = r, s.height = a, 
                s;
            }
        } ]), t;
    }();
    v.ID = "DrawImage";
    var p = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("DrawLineCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._drawLine(e, i, this.fromX, this.fromY, this.toX, this.toY, this.lineColor, this.lineWidth, this.vid);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o) {
                var l = c.getItemByClass("DrawLineCmd", t);
                return l.fromX = e, l.fromY = i, l.toX = n, l.toY = r, l.lineColor = a, l.lineWidth = s, 
                l.vid = o, l;
            }
        } ]), t;
    }();
    p.ID = "DrawLine";
    var y = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.points = null, this.lineColor = null, c.recover("DrawLinesCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.points && t._drawLines(this.x + e, this.y + i, this.points, this.lineColor, this.lineWidth, this.vid);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s) {
                var o = c.getItemByClass("DrawLinesCmd", t);
                return o.x = e, o.y = i, o.points = n, o.lineColor = r, o.lineWidth = a, o.vid = s, 
                o;
            }
        } ]), t;
    }();
    y.ID = "DrawLines";
    var g = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.paths = null, this.brush = null, this.pen = null, c.recover("DrawPathCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.paths && t._drawPath(this.x + e, this.y + i, this.paths, this.brush, this.pen);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a) {
                var s = c.getItemByClass("DrawPathCmd", t);
                return s.x = e, s.y = i, s.paths = n, s.brush = r, s.pen = a, s;
            }
        } ]), t;
    }();
    g.ID = "DrawPath";
    var m = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.fillColor = null, this.lineColor = null, c.recover("DrawPieCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._drawPie(this.x + e, this.y + i, this.radius, this._startAngle, this._endAngle, this.fillColor, this.lineColor, this.lineWidth, this.vid);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        }, {
            key: "startAngle",
            get: function() {
                return 180 * this._startAngle / Math.PI;
            },
            set: function(t) {
                this._startAngle = t * Math.PI / 180;
            }
        }, {
            key: "endAngle",
            get: function() {
                return 180 * this._endAngle / Math.PI;
            },
            set: function(t) {
                this._endAngle = t * Math.PI / 180;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l, h) {
                var u = c.getItemByClass("DrawPieCmd", t);
                return u.x = e, u.y = i, u.radius = n, u._startAngle = r, u._endAngle = a, u.fillColor = s, 
                u.lineColor = o, u.lineWidth = l, u.vid = h, u;
            }
        } ]), t;
    }();
    m.ID = "DrawPie";
    var T = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.points = null, this.fillColor = null, this.lineColor = null, c.recover("DrawPolyCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.points && t._drawPoly(this.x + e, this.y + i, this.points, this.fillColor, this.lineColor, this.lineWidth, this.isConvexPolygon, this.vid);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l) {
                var h = c.getItemByClass("DrawPolyCmd", t);
                return h.x = e, h.y = i, h.points = n, h.fillColor = r, h.lineColor = a, h.lineWidth = s, 
                h.isConvexPolygon = o, h.vid = l, h;
            }
        } ]), t;
    }();
    T.ID = "DrawPoly";
    var x = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.fillColor = null, this.lineColor = null, c.recover("DrawRectCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.drawRect(this.x + e, this.y + i, this.width, this.height, this.fillColor, this.lineColor, this.lineWidth);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o) {
                var l = c.getItemByClass("DrawRectCmd", t);
                return l.x = e, l.y = i, l.width = n, l.height = r, l.fillColor = a, l.lineColor = s, 
                l.lineWidth = o, l;
            }
        } ]), t;
    }();
    x.ID = "DrawRect";
    var k = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0;
            if ((0, o.default)(this, t), this._bTransform = !1, null != t._createFun) return t._createFun(e, i, n, r, a, s, l);
            this.a = e, this.b = i, this.c = n, this.d = r, this.tx = a, this.ty = s, this._checkTransform();
        }
        return (0, s.default)(t, [ {
            key: "identity",
            value: function() {
                return this.a = this.d = 1, this.b = this.tx = this.ty = this.c = 0, this._bTransform = !1, 
                this;
            }
        }, {
            key: "_checkTransform",
            value: function() {
                return this._bTransform = 1 !== this.a || 0 !== this.b || 0 !== this.c || 1 !== this.d;
            }
        }, {
            key: "setTranslate",
            value: function(t, e) {
                return this.tx = t, this.ty = e, this;
            }
        }, {
            key: "translate",
            value: function(t, e) {
                return this.tx += t, this.ty += e, this;
            }
        }, {
            key: "scale",
            value: function(t, e) {
                return this.a *= t, this.d *= e, this.c *= t, this.b *= e, this.tx *= t, this.ty *= e, 
                this._bTransform = !0, this;
            }
        }, {
            key: "rotate",
            value: function(t) {
                var e = Math.cos(t), i = Math.sin(t), n = this.a, r = this.c, a = this.tx;
                return this.a = n * e - this.b * i, this.b = n * i + this.b * e, this.c = r * e - this.d * i, 
                this.d = r * i + this.d * e, this.tx = a * e - this.ty * i, this.ty = a * i + this.ty * e, 
                this._bTransform = !0, this;
            }
        }, {
            key: "skew",
            value: function(t, e) {
                var i = Math.tan(t), n = Math.tan(e), r = this.a, a = this.b;
                return this.a += n * this.c, this.b += n * this.d, this.c += i * r, this.d += i * a, 
                this;
            }
        }, {
            key: "invertTransformPoint",
            value: function(t) {
                var e = this.a, i = this.b, n = this.c, r = this.d, a = this.tx, s = e * r - i * n, o = r / s, l = -i / s, h = -n / s, u = e / s, c = (n * this.ty - r * a) / s, _ = -(e * this.ty - i * a) / s;
                return t.setTo(o * t.x + h * t.y + c, l * t.x + u * t.y + _);
            }
        }, {
            key: "transformPoint",
            value: function(t) {
                return t.setTo(this.a * t.x + this.c * t.y + this.tx, this.b * t.x + this.d * t.y + this.ty);
            }
        }, {
            key: "transformPointN",
            value: function(t) {
                return t.setTo(this.a * t.x + this.c * t.y, this.b * t.x + this.d * t.y);
            }
        }, {
            key: "getScaleX",
            value: function() {
                return 0 === this.b ? this.a : Math.sqrt(this.a * this.a + this.b * this.b);
            }
        }, {
            key: "getScaleY",
            value: function() {
                return 0 === this.c ? this.d : Math.sqrt(this.c * this.c + this.d * this.d);
            }
        }, {
            key: "invert",
            value: function() {
                var t = this.a, e = this.b, i = this.c, n = this.d, r = this.tx, a = t * n - e * i;
                return this.a = n / a, this.b = -e / a, this.c = -i / a, this.d = t / a, this.tx = (i * this.ty - n * r) / a, 
                this.ty = -(t * this.ty - e * r) / a, this;
            }
        }, {
            key: "setTo",
            value: function(t, e, i, n, r, a) {
                return this.a = t, this.b = e, this.c = i, this.d = n, this.tx = r, this.ty = a, 
                this;
            }
        }, {
            key: "concat",
            value: function(t) {
                var e = this.a, i = this.c, n = this.tx;
                return this.a = e * t.a + this.b * t.c, this.b = e * t.b + this.b * t.d, this.c = i * t.a + this.d * t.c, 
                this.d = i * t.b + this.d * t.d, this.tx = n * t.a + this.ty * t.c + t.tx, this.ty = n * t.b + this.ty * t.d + t.ty, 
                this;
            }
        }, {
            key: "scaleEx",
            value: function(t, e) {
                var i = this.a, n = this.b, r = this.c, a = this.d;
                0 !== n || 0 !== r ? (this.a = t * i, this.b = t * n, this.c = e * r, this.d = e * a) : (this.a = t * i, 
                this.b = 0 * a, this.c = 0 * i, this.d = e * a), this._bTransform = !0;
            }
        }, {
            key: "rotateEx",
            value: function(t) {
                var e = Math.cos(t), i = Math.sin(t), n = this.a, r = this.b, a = this.c, s = this.d;
                0 !== r || 0 !== a ? (this.a = e * n + i * a, this.b = e * r + i * s, this.c = -i * n + e * a, 
                this.d = -i * r + e * s) : (this.a = e * n, this.b = i * s, this.c = -i * n, this.d = e * s), 
                this._bTransform = !0;
            }
        }, {
            key: "clone",
            value: function() {
                var e = t.create();
                return e.a = this.a, e.b = this.b, e.c = this.c, e.d = this.d, e.tx = this.tx, e.ty = this.ty, 
                e._bTransform = this._bTransform, e;
            }
        }, {
            key: "copyTo",
            value: function(t) {
                return t.a = this.a, t.b = this.b, t.c = this.c, t.d = this.d, t.tx = this.tx, t.ty = this.ty, 
                t._bTransform = this._bTransform, t;
            }
        }, {
            key: "toString",
            value: function() {
                return this.a + "," + this.b + "," + this.c + "," + this.d + "," + this.tx + "," + this.ty;
            }
        }, {
            key: "destroy",
            value: function() {
                this.recover();
            }
        }, {
            key: "recover",
            value: function() {
                c.recover("Matrix", this.identity());
            }
        } ], [ {
            key: "mul",
            value: function(t, e, i) {
                var n = t.a, r = t.b, a = t.c, s = t.d, o = t.tx, l = t.ty, h = e.a, u = e.b, c = e.c, _ = e.d, d = e.tx, f = e.ty;
                return 0 !== u || 0 !== c ? (i.a = n * h + r * c, i.b = n * u + r * _, i.c = a * h + s * c, 
                i.d = a * u + s * _, i.tx = h * o + c * l + d, i.ty = u * o + _ * l + f) : (i.a = n * h, 
                i.b = r * _, i.c = a * h, i.d = s * _, i.tx = h * o + d, i.ty = _ * l + f), i;
            }
        }, {
            key: "mul16",
            value: function(t, e, i) {
                var n = t.a, r = t.b, a = t.c, s = t.d, o = t.tx, l = t.ty, h = e.a, u = e.b, c = e.c, _ = e.d, d = e.tx, f = e.ty;
                return 0 !== u || 0 !== c ? (i[0] = n * h + r * c, i[1] = n * u + r * _, i[4] = a * h + s * c, 
                i[5] = a * u + s * _, i[12] = h * o + c * l + d, i[13] = u * o + _ * l + f) : (i[0] = n * h, 
                i[1] = r * _, i[4] = a * h, i[5] = s * _, i[12] = h * o + d, i[13] = _ * l + f), 
                i;
            }
        }, {
            key: "create",
            value: function() {
                return c.getItemByClass("Matrix", t);
            }
        } ]), t;
    }();
    k.EMPTY = new k(), k.TEMP = new k(), k._createFun = null;
    var E = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            (0, o.default)(this, t), this.x = e, this.y = i;
        }
        return (0, s.default)(t, [ {
            key: "setTo",
            value: function(t, e) {
                return this.x = t, this.y = e, this;
            }
        }, {
            key: "reset",
            value: function() {
                return this.x = this.y = 0, this;
            }
        }, {
            key: "recover",
            value: function() {
                c.recover("Point", this.reset());
            }
        }, {
            key: "distance",
            value: function(t, e) {
                return Math.sqrt((this.x - t) * (this.x - t) + (this.y - e) * (this.y - e));
            }
        }, {
            key: "toString",
            value: function() {
                return this.x + "," + this.y;
            }
        }, {
            key: "normalize",
            value: function() {
                var t = Math.sqrt(this.x * this.x + this.y * this.y);
                if (t > 0) {
                    var e = 1 / t;
                    this.x *= e, this.y *= e;
                }
            }
        }, {
            key: "copy",
            value: function(t) {
                return this.setTo(t.x, t.y);
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("Point", t);
            }
        } ]), t;
    }();
    E.TEMP = new E(), E.EMPTY = new E();
    var R = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            (0, o.default)(this, t), this.x = e, this.y = i, this.width = n, this.height = r;
        }
        return (0, s.default)(t, [ {
            key: "setTo",
            value: function(t, e, i, n) {
                return this.x = t, this.y = e, this.width = i, this.height = n, this;
            }
        }, {
            key: "reset",
            value: function() {
                return this.x = this.y = this.width = this.height = 0, this;
            }
        }, {
            key: "recover",
            value: function() {
                this != t.TEMP && this != t.EMPTY ? c.recover("Rectangle", this.reset()) : console.log("recover Temp or Empty:", this);
            }
        }, {
            key: "copyFrom",
            value: function(t) {
                return this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height, 
                this;
            }
        }, {
            key: "contains",
            value: function(t, e) {
                return !(this.width <= 0 || this.height <= 0) && t >= this.x && t < this.right && e >= this.y && e < this.bottom;
            }
        }, {
            key: "intersects",
            value: function(t) {
                return !(t.x > this.x + this.width || t.x + t.width < this.x || t.y > this.y + this.height || t.y + t.height < this.y);
            }
        }, {
            key: "intersection",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                return this.intersects(e) ? (i || (i = new t()), i.x = Math.max(this.x, e.x), i.y = Math.max(this.y, e.y), 
                i.width = Math.min(this.right, e.right) - i.x, i.height = Math.min(this.bottom, e.bottom) - i.y, 
                i) : null;
            }
        }, {
            key: "union",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                return i || (i = new t()), this.clone(i), e.width <= 0 || e.height <= 0 ? i : (i.addPoint(e.x, e.y), 
                i.addPoint(e.right, e.bottom), this);
            }
        }, {
            key: "clone",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                return e || (e = new t()), e.x = this.x, e.y = this.y, e.width = this.width, e.height = this.height, 
                e;
            }
        }, {
            key: "toString",
            value: function() {
                return this.x + "," + this.y + "," + this.width + "," + this.height;
            }
        }, {
            key: "equals",
            value: function(t) {
                return !(!t || t.x !== this.x || t.y !== this.y || t.width !== this.width || t.height !== this.height);
            }
        }, {
            key: "addPoint",
            value: function(t, e) {
                return this.x > t && (this.width += this.x - t, this.x = t), this.y > e && (this.height += this.y - e, 
                this.y = e), this.width < t - this.x && (this.width = t - this.x), this.height < e - this.y && (this.height = e - this.y), 
                this;
            }
        }, {
            key: "_getBoundPoints",
            value: function() {
                var e = t._temB;
                return e.length = 0, 0 == this.width || 0 == this.height || e.push(this.x, this.y, this.x + this.width, this.y, this.x, this.y + this.height, this.x + this.width, this.y + this.height), 
                e;
            }
        }, {
            key: "isEmpty",
            value: function() {
                return this.width <= 0 || this.height <= 0;
            }
        }, {
            key: "right",
            get: function() {
                return this.x + this.width;
            }
        }, {
            key: "bottom",
            get: function() {
                return this.y + this.height;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("Rectangle", t);
            }
        }, {
            key: "_getBoundPointS",
            value: function(e, i, n, r) {
                var a = t._temA;
                return a.length = 0, 0 == n || 0 == r || a.push(e, i, e + n, i, e, i + r, e + n, i + r), 
                a;
            }
        }, {
            key: "_getWrapRec",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                if (!e || e.length < 1) return i ? i.setTo(0, 0, 0, 0) : t.TEMP.setTo(0, 0, 0, 0);
                i = i || t.create();
                var n, r, a, s, o, l = e.length, h = E.TEMP;
                for (a = o = -(r = s = 99999), n = 0; n < l; n += 2) h.x = e[n], h.y = e[n + 1], 
                r = r < h.x ? r : h.x, s = s < h.y ? s : h.y, a = a > h.x ? a : h.x, o = o > h.y ? o : h.y;
                return i.setTo(r, s, a - r, o - s);
            }
        } ]), t;
    }();
    R.EMPTY = new R(), R.TEMP = new R(), R._temB = [], R._temA = [];
    var A = function t() {
        (0, o.default)(this, t);
    };
    A.ARRAY_BUFFER_TYPE_DATA = 0, A.ARRAY_BUFFER_TYPE_CMD = 1, A.ARRAY_BUFFER_REF_REFERENCE = 0, 
    A.ARRAY_BUFFER_REF_COPY = 1, A.UPLOAD_SHADER_UNIFORM_TYPE_ID = 0, A.UPLOAD_SHADER_UNIFORM_TYPE_DATA = 1;
    var C, b, S, w, M, I = 1, P = 0, L = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                var e = A.instance;
                t._depthFunc = e.LESS, t._blendEquation = e.FUNC_ADD, t._blendEquationRGB = e.FUNC_ADD, 
                t._blendEquationAlpha = e.FUNC_ADD, I = e.ONE, P = e.ZERO, t._sFactorAlpha = e.ONE, 
                t._dFactorAlpha = e.ZERO, t._activedTextureID = e.TEXTURE0;
                var i = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
                t._activeTextures = new Array(i), t._glTextureIDs = [ e.TEXTURE0, e.TEXTURE1, e.TEXTURE2, e.TEXTURE3, e.TEXTURE4, e.TEXTURE5, e.TEXTURE6, e.TEXTURE7, e.TEXTURE8, e.TEXTURE9, e.TEXTURE10, e.TEXTURE11, e.TEXTURE12, e.TEXTURE13, e.TEXTURE14, e.TEXTURE15, e.TEXTURE16, e.TEXTURE17, e.TEXTURE18, e.TEXTURE19, e.TEXTURE20, e.TEXTURE21, e.TEXTURE22, e.TEXTURE23, e.TEXTURE24, e.TEXTURE25, e.TEXTURE26, e.TEXTURE27, e.TEXTURE28, e.TEXTURE29, e.TEXTURE30, e.TEXTURE31 ];
                var n = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS), r = e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS);
                t._maxUniformFragmentVectors = Math.min(n, r);
            }
        }, {
            key: "useProgram",
            value: function(e, i) {
                return t._useProgram !== i && (e.useProgram(i), t._useProgram = i, !0);
            }
        }, {
            key: "setDepthTest",
            value: function(e, i) {
                i !== t._depthTest && (t._depthTest = i, i ? e.enable(e.DEPTH_TEST) : e.disable(e.DEPTH_TEST));
            }
        }, {
            key: "setDepthMask",
            value: function(e, i) {
                i !== t._depthMask && (t._depthMask = i, e.depthMask(i));
            }
        }, {
            key: "setDepthFunc",
            value: function(e, i) {
                i !== t._depthFunc && (t._depthFunc = i, e.depthFunc(i));
            }
        }, {
            key: "setBlend",
            value: function(e, i) {
                i !== t._blend && (t._blend = i, i ? e.enable(e.BLEND) : e.disable(e.BLEND));
            }
        }, {
            key: "setBlendEquation",
            value: function(e, i) {
                i !== t._blendEquation && (t._blendEquation = i, t._blendEquationRGB = t._blendEquationAlpha = null, 
                e.blendEquation(i));
            }
        }, {
            key: "setBlendEquationSeparate",
            value: function(e, i, n) {
                i === t._blendEquationRGB && n === t._blendEquationAlpha || (t._blendEquationRGB = i, 
                t._blendEquationAlpha = n, t._blendEquation = null, e.blendEquationSeparate(i, n));
            }
        }, {
            key: "setBlendFunc",
            value: function(e, i, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                (r || i !== I || n !== P) && (I = i, P = n, t._sFactorRGB = null, t._dFactorRGB = null, 
                t._sFactorAlpha = null, t._dFactorAlpha = null, e.blendFunc(i, n));
            }
        }, {
            key: "setBlendFuncSeperate",
            value: function(e, i, n, r, a) {
                i === t._sFactorRGB && n === t._dFactorRGB && r === t._sFactorAlpha && a === t._dFactorAlpha || (t._sFactorRGB = i, 
                t._dFactorRGB = n, t._sFactorAlpha = r, t._dFactorAlpha = a, I = null, P = null, 
                e.blendFuncSeparate(i, n, r, a));
            }
        }, {
            key: "setCullFace",
            value: function(e, i) {
                i !== t._cullFace && (t._cullFace = i, i ? e.enable(e.CULL_FACE) : e.disable(e.CULL_FACE));
            }
        }, {
            key: "setFrontFace",
            value: function(e, i) {
                i !== t._frontFace && (t._frontFace = i, e.frontFace(i));
            }
        }, {
            key: "activeTexture",
            value: function(e, i) {
                t._activedTextureID !== i && (e.activeTexture(i), t._activedTextureID = i);
            }
        }, {
            key: "bindTexture",
            value: function(e, i, n) {
                t._activeTextures[t._activedTextureID - e.TEXTURE0] !== n && (e.bindTexture(i, n), 
                t._activeTextures[t._activedTextureID - e.TEXTURE0] = n);
            }
        }, {
            key: "__init_native",
            value: function() {
                if (u.Render.supportWebGLPlusRendering) {
                    var e = t;
                    e.activeTexture = e.activeTextureForNative, e.bindTexture = e.bindTextureForNative;
                }
            }
        }, {
            key: "useProgramForNative",
            value: function(t, e) {
                return t.useProgram(e), !0;
            }
        }, {
            key: "setDepthTestForNative",
            value: function(t, e) {
                e ? t.enable(t.DEPTH_TEST) : t.disable(t.DEPTH_TEST);
            }
        }, {
            key: "setDepthMaskForNative",
            value: function(t, e) {
                t.depthMask(e);
            }
        }, {
            key: "setDepthFuncForNative",
            value: function(t, e) {
                t.depthFunc(e);
            }
        }, {
            key: "setBlendForNative",
            value: function(t, e) {
                e ? t.enable(t.BLEND) : t.disable(t.BLEND);
            }
        }, {
            key: "setBlendFuncForNative",
            value: function(t, e, i) {
                t.blendFunc(e, i);
            }
        }, {
            key: "setCullFaceForNative",
            value: function(t, e) {
                e ? t.enable(t.CULL_FACE) : t.disable(t.CULL_FACE);
            }
        }, {
            key: "setFrontFaceForNative",
            value: function(t, e) {
                t.frontFace(e);
            }
        }, {
            key: "activeTextureForNative",
            value: function(t, e) {
                t.activeTexture(e);
            }
        }, {
            key: "bindTextureForNative",
            value: function(t, e, i) {
                t.bindTexture(e, i);
            }
        }, {
            key: "bindVertexArrayForNative",
            value: function(t, e) {
                t.bindVertexArray(e);
            }
        }, {
            key: "getUniformMaxVector",
            value: function() {
                return t._maxUniformFragmentVectors;
            }
        } ]), t;
    }();
    L._activeTextures = new Array(1), L._useProgram = null, L._depthTest = !0, L._depthMask = !0, 
    L._blend = !1, L._cullFace = !1, L.mainContext = null;
    var D = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            (0, o.default)(this, t), this.once = !1, this._id = 0, this.setTo(e, i, n, r);
        }
        return (0, s.default)(t, [ {
            key: "setTo",
            value: function(e, i, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                return this._id = t._gid++, this.caller = e, this.method = i, this.args = n, this.once = r, 
                this;
            }
        }, {
            key: "run",
            value: function() {
                if (null == this.method) return null;
                var t = this._id, e = this.method.apply(this.caller, this.args);
                return this._id === t && this.once && this.recover(), e;
            }
        }, {
            key: "runWith",
            value: function(t) {
                if (null == this.method) return null;
                var e = this._id;
                if (null == t) var i = this.method.apply(this.caller, this.args); else i = this.args || t.unshift ? this.args ? this.method.apply(this.caller, this.args.concat(t)) : this.method.apply(this.caller, t) : this.method.call(this.caller, t);
                return this._id === e && this.once && this.recover(), i;
            }
        }, {
            key: "clear",
            value: function() {
                return this.caller = null, this.method = null, this.args = null, this;
            }
        }, {
            key: "recover",
            value: function() {
                this._id > 0 && (this._id = 0, t._pool.push(this.clear()));
            }
        } ], [ {
            key: "create",
            value: function(e, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
                return t._pool.length ? t._pool.pop().setTo(e, i, n, r) : new t(e, i, n, r);
            }
        } ]), t;
    }();
    D._pool = [], D._gid = 1;
    var B = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "hasListener",
            value: function(t) {
                return !(!this._events || !this._events[t]);
            }
        }, {
            key: "event",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                if (!this._events || !this._events[t]) return !1;
                var i = this._events[t];
                if (i.run) i.once && delete this._events[t], null != e ? i.runWith(e) : i.run(); else {
                    for (var n = 0, r = i.length; n < r; n++) {
                        var a = i[n];
                        a && (null != e ? a.runWith(e) : a.run()), a && !a.once || (i.splice(n, 1), n--, 
                        r--);
                    }
                    0 === i.length && this._events && delete this._events[t];
                }
                return !0;
            }
        }, {
            key: "on",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return this._createListener(t, e, i, n, !1);
            }
        }, {
            key: "once",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return this._createListener(t, e, i, n, !0);
            }
        }, {
            key: "_createListener",
            value: function(t, e, i, n, r) {
                var a = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5];
                a && this.off(t, e, i, r);
                var s = F.create(e || this, i, n, r);
                this._events || (this._events = {});
                var o = this._events;
                return o[t] ? o[t].run ? o[t] = [ o[t], s ] : o[t].push(s) : o[t] = s, this;
            }
        }, {
            key: "off",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                if (!this._events || !this._events[t]) return this;
                var r = this._events[t];
                if (null != r) if (r.run) e && r.caller !== e || null != i && r.method !== i || n && !r.once || (delete this._events[t], 
                r.recover()); else {
                    for (var a = 0, s = 0, o = r.length; s < o; s++) {
                        var l = r[s];
                        l ? !l || e && l.caller !== e || null != i && l.method !== i || n && !l.once || (a++, 
                        r[s] = null, l.recover()) : a++;
                    }
                    a === o && delete this._events[t];
                }
                return this;
            }
        }, {
            key: "offAll",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = this._events;
                if (!e) return this;
                if (t) this._recoverHandlers(e[t]), delete e[t]; else {
                    for (var i in e) this._recoverHandlers(e[i]);
                    this._events = null;
                }
                return this;
            }
        }, {
            key: "offAllCaller",
            value: function(t) {
                if (t && this._events) for (var e in this._events) this.off(e, t, null);
                return this;
            }
        }, {
            key: "_recoverHandlers",
            value: function(t) {
                if (t) if (t.run) t.recover(); else for (var e = t.length - 1; e > -1; e--) t[e] && (t[e].recover(), 
                t[e] = null);
            }
        }, {
            key: "isMouseEvent",
            value: function(e) {
                return t.MOUSE_EVENTS[e] || !1;
            }
        } ]), t;
    }();
    B.MOUSE_EVENTS = {
        rightmousedown: !0,
        rightmouseup: !0,
        rightclick: !0,
        mousedown: !0,
        mouseup: !0,
        mousemove: !0,
        mouseover: !0,
        mouseout: !0,
        click: !0,
        doubleclick: !0
    };
    var F = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t, n, r, a) {
            return (0, o.default)(this, i), e.call(this, t, n, r, a);
        }
        return (0, s.default)(i, [ {
            key: "recover",
            value: function() {
                this._id > 0 && (this._id = 0, i._pool.push(this.clear()));
            }
        } ], [ {
            key: "create",
            value: function(t, e) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
                return i._pool.length ? i._pool.pop().setTo(t, e, n, r) : new i(t, e, n, r);
            }
        } ]), i;
    }(D);
    F._pool = [];
    var O = function() {
        function t(e) {
            (0, o.default)(this, t), this._url = t.formatURL(e), this._path = t.getPath(e);
        }
        return (0, s.default)(t, [ {
            key: "url",
            get: function() {
                return this._url;
            }
        }, {
            key: "path",
            get: function() {
                return this._path;
            }
        } ], [ {
            key: "formatURL",
            value: function(e) {
                if (!e) return "null path";
                if (e.indexOf(":") > 0) return e;
                if (t.exportSceneToJson && (e = t.getAdptedFilePath(e)), null != t.customFormat && (e = t.customFormat(e)), 
                e.indexOf(":") > 0) return e;
                var i = e.charAt(0);
                if ("." === i) return t._formatRelativePath(t._basePath + e);
                if ("~" === i) return t.rootPath + e.substring(1);
                if ("d" === i) {
                    if (0 === e.indexOf("data:image")) return e;
                } else if ("/" === i) return e;
                return t._basePath + e;
            }
        }, {
            key: "_formatRelativePath",
            value: function(t) {
                for (var e = t.split("/"), i = 0, n = e.length; i < n; i++) ".." == e[i] && (e.splice(i - 1, 2), 
                i -= 2);
                return e.join("/");
            }
        }, {
            key: "getPath",
            value: function(t) {
                var e = t.lastIndexOf("/");
                return e > 0 ? t.substr(0, e + 1) : "";
            }
        }, {
            key: "getFileName",
            value: function(t) {
                var e = t.lastIndexOf("/");
                return e > 0 ? t.substr(e + 1) : t;
            }
        }, {
            key: "getAdptedFilePath",
            value: function(e) {
                if (!t.exportSceneToJson || !e) return e;
                var i, n, r;
                for (n = t._adpteTypeList.length, i = 0; i < n; i++) r = t._adpteTypeList[i], e = e.replace(r[0], r[1]);
                return e;
            }
        }, {
            key: "basePath",
            set: function(e) {
                t._basePath = u.Laya._getUrlPath(), t._basePath = t.formatURL(e);
            },
            get: function() {
                return t._basePath;
            }
        } ]), t;
    }();
    O.version = {}, O.exportSceneToJson = !1, O._basePath = "", O.rootPath = "", O.customFormat = function(t) {
        var e = O.version[t];
        return !window.conch && e && (t += "?v=" + e), t;
    }, O._adpteTypeList = [ [ ".scene3d", ".json" ], [ ".scene", ".json" ], [ ".taa", ".json" ], [ ".prefab", ".json" ] ];
    var N = function(t) {
        (0, a.default)(n, t);
        var e = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = e.call(this))._id = 0, t._url = null, t._cpuMemory = 0, 
            t._gpuMemory = 0, t._destroyed = !1, t._referenceCount = 0, t.lock = !1, t.name = null, 
            t._id = ++n._uniqueIDCounter, t._destroyed = !1, t._referenceCount = 0, n._idResourcesMap[t.id] = (0, 
            i.default)(t), t.lock = !1, t;
        }
        return (0, s.default)(n, [ {
            key: "_setCPUMemory",
            value: function(t) {
                var e = t - this._cpuMemory;
                this._cpuMemory = t, n._addCPUMemory(e);
            }
        }, {
            key: "_setGPUMemory",
            value: function(t) {
                var e = t - this._gpuMemory;
                this._gpuMemory = t, n._addGPUMemory(e);
            }
        }, {
            key: "_setCreateURL",
            value: function(t) {
                var e;
                t = O.formatURL(t), this._url !== t && (this._url && ((e = n._urlResourcesMap[this._url]).splice(e.indexOf(this), 1), 
                0 === e.length && delete n._urlResourcesMap[this._url]), t && ((e = n._urlResourcesMap[t]) || (n._urlResourcesMap[t] = e = []), 
                e.push(this)), this._url = t);
            }
        }, {
            key: "_addReference",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                this._referenceCount += t;
            }
        }, {
            key: "_removeReference",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                this._referenceCount -= t;
            }
        }, {
            key: "_clearReference",
            value: function() {
                this._referenceCount = 0;
            }
        }, {
            key: "_recoverResource",
            value: function() {}
        }, {
            key: "_disposeResource",
            value: function() {}
        }, {
            key: "_activeResource",
            value: function() {}
        }, {
            key: "destroy",
            value: function() {
                var t;
                this._destroyed || (this._destroyed = !0, this.lock = !1, this._disposeResource(), 
                delete n._idResourcesMap[this.id], this._url && ((t = n._urlResourcesMap[this._url]) && (t.splice(t.indexOf(this), 1), 
                0 === t.length && delete n._urlResourcesMap[this._url]), u.Loader.loadedMap[this._url] == this && delete u.Loader.loadedMap[this._url]));
            }
        }, {
            key: "id",
            get: function() {
                return this._id;
            }
        }, {
            key: "url",
            get: function() {
                return this._url;
            }
        }, {
            key: "cpuMemory",
            get: function() {
                return this._cpuMemory;
            }
        }, {
            key: "gpuMemory",
            get: function() {
                return this._gpuMemory;
            }
        }, {
            key: "destroyed",
            get: function() {
                return this._destroyed;
            }
        }, {
            key: "referenceCount",
            get: function() {
                return this._referenceCount;
            }
        } ], [ {
            key: "_addCPUMemory",
            value: function(t) {
                n._cpuMemory += t;
            }
        }, {
            key: "_addGPUMemory",
            value: function(t) {
                n._gpuMemory += t;
            }
        }, {
            key: "_addMemory",
            value: function(t, e) {
                n._cpuMemory += t, n._gpuMemory += e;
            }
        }, {
            key: "getResourceByID",
            value: function(t) {
                return n._idResourcesMap[t];
            }
        }, {
            key: "getResourceByURL",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return n._urlResourcesMap[t][e];
            }
        }, {
            key: "destroyUnusedResources",
            value: function() {
                for (var t in n._idResourcesMap) {
                    var e = n._idResourcesMap[t];
                    e.lock || 0 !== e._referenceCount || e.destroy();
                }
            }
        }, {
            key: "cpuMemory",
            get: function() {
                return n._cpuMemory;
            }
        }, {
            key: "gpuMemory",
            get: function() {
                return n._gpuMemory;
            }
        } ]), n;
    }(B);
    N._uniqueIDCounter = 0, N._idResourcesMap = {}, N._urlResourcesMap = {}, N._cpuMemory = 0, 
    N._gpuMemory = 0;
    var U = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this))._width = -1, t._height = -1, 
            t;
        }
        return (0, s.default)(i, [ {
            key: "_getSource",
            value: function() {
                throw "Bitmap: must override it.";
            }
        }, {
            key: "width",
            get: function() {
                return this._width;
            },
            set: function(t) {
                this._width = t;
            }
        }, {
            key: "height",
            get: function() {
                return this._height;
            },
            set: function(t) {
                this._height = t;
            }
        } ]), i;
    }(N);
    (C = t.FilterMode || (t.FilterMode = {}))[C.Point = 0] = "Point", C[C.Bilinear = 1] = "Bilinear", 
    C[C.Trilinear = 2] = "Trilinear", (b = t.TextureFormat || (t.TextureFormat = {}))[b.R8G8B8 = 0] = "R8G8B8", 
    b[b.R8G8B8A8 = 1] = "R8G8B8A8", b[b.R5G6B5 = 16] = "R5G6B5", b[b.Alpha8 = 2] = "Alpha8", 
    b[b.DXT1 = 3] = "DXT1", b[b.DXT5 = 4] = "DXT5", b[b.ETC1RGB = 5] = "ETC1RGB", b[b.ETC2RGB = 6] = "ETC2RGB", 
    b[b.ETC2RGBA = 7] = "ETC2RGBA", b[b.ETC2RGB_Alpha8 = 8] = "ETC2RGB_Alpha8", b[b.ETC2SRGB = 28] = "ETC2SRGB", 
    b[b.PVRTCRGB_2BPPV = 9] = "PVRTCRGB_2BPPV", b[b.PVRTCRGBA_2BPPV = 10] = "PVRTCRGBA_2BPPV", 
    b[b.PVRTCRGB_4BPPV = 11] = "PVRTCRGB_4BPPV", b[b.PVRTCRGBA_4BPPV = 12] = "PVRTCRGBA_4BPPV", 
    b[b.R32G32B32A32 = 15] = "R32G32B32A32", b[b.R16G16B16A16 = 17] = "R16G16B16A16", 
    b[b.ASTC4x4 = 18] = "ASTC4x4", b[b.ASTC4x4SRGB = 23] = "ASTC4x4SRGB", b[b.ASTC6x6 = 19] = "ASTC6x6", 
    b[b.ASTC6x6SRGB = 24] = "ASTC6x6SRGB", b[b.ASTC8x8 = 20] = "ASTC8x8", b[b.ASTC8x8SRGB = 25] = "ASTC8x8SRGB", 
    b[b.ASTC10x10 = 21] = "ASTC10x10", b[b.ASTC10x10SRGB = 26] = "ASTC10x10SRGB", b[b.ASTC12x12 = 22] = "ASTC12x12", 
    b[b.ASTC12x12SRGB = 27] = "ASTC12x12SRGB", b[b.KTXTEXTURE = -1] = "KTXTEXTURE", 
    b[b.PVRTEXTURE = -2] = "PVRTEXTURE", (S = t.WarpMode || (t.WarpMode = {}))[S.Repeat = 0] = "Repeat", 
    S[S.Clamp = 1] = "Clamp";
    var G = function(e) {
        (0, a.default)(n, e);
        var i = l(n);
        function n(e, r) {
            var a;
            return (0, o.default)(this, n), (a = i.call(this))._wrapModeU = t.WarpMode.Repeat, 
            a._wrapModeV = t.WarpMode.Repeat, a._filterMode = t.FilterMode.Bilinear, a._readyed = !1, 
            a._width = -1, a._height = -1, a._format = e, a._mipmap = r, a._anisoLevel = 1, 
            a._glTexture = A.instance.createTexture(), a;
        }
        return (0, s.default)(n, [ {
            key: "_getFormatByteCount",
            value: function() {
                switch (this._format) {
                  case t.TextureFormat.R8G8B8:
                    return 3;

                  case t.TextureFormat.R8G8B8A8:
                    return 4;

                  case t.TextureFormat.R5G6B5:
                  case t.TextureFormat.Alpha8:
                    return 1;

                  case t.TextureFormat.R16G16B16A16:
                    return 2;

                  case t.TextureFormat.R32G32B32A32:
                    return 4;

                  default:
                    throw "Texture2D: unknown format.";
                }
            }
        }, {
            key: "_isPot",
            value: function(t) {
                return 0 == (t & t - 1);
            }
        }, {
            key: "_getGLFormat",
            value: function() {
                var e, i = A.instance, n = A.layaGPUInstance;
                switch (this._format) {
                  case t.TextureFormat.R8G8B8:
                  case t.TextureFormat.R5G6B5:
                    e = i.RGB;
                    break;

                  case t.TextureFormat.R8G8B8A8:
                    e = i.RGBA;
                    break;

                  case t.TextureFormat.Alpha8:
                    e = i.ALPHA;
                    break;

                  case t.TextureFormat.R32G32B32A32:
                  case t.TextureFormat.R16G16B16A16:
                    e = i.RGBA;
                    break;

                  case t.TextureFormat.DXT1:
                    if (!n._compressedTextureS3tc) throw "BaseTexture: not support DXT1 format.";
                    e = n._compressedTextureS3tc.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    break;

                  case t.TextureFormat.DXT5:
                    if (!n._compressedTextureS3tc) throw "BaseTexture: not support DXT5 format.";
                    e = n._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    break;

                  case t.TextureFormat.ETC1RGB:
                    if (!n._compressedTextureEtc1) throw "BaseTexture: not support ETC1RGB format.";
                    e = n._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;
                    break;

                  case t.TextureFormat.ETC2RGB:
                    if (!n._compressedTextureETC) throw "BaseTexture: not support ETC2RGB format.";
                    e = n._compressedTextureETC.COMPRESSED_RGB8_ETC2;
                    break;

                  case t.TextureFormat.ETC2RGBA:
                    if (!n._compressedTextureETC) throw "BaseTexture: not support ETC2RGBA format.";
                    e = n._compressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;
                    break;

                  case t.TextureFormat.ETC2RGB_Alpha8:
                    if (!n._compressedTextureETC) throw "BaseTexture: not support ETC2SRGB_Alpha8 format.";
                    e = n._compressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
                    break;

                  case t.TextureFormat.ETC2SRGB:
                    if (!n._compressedTextureETC) throw "BaseTexture: not support ETC2SRGB format.";
                    e = n._compressedTextureETC.COMPRESSED_SRGB8_ETC2;
                    break;

                  case t.TextureFormat.PVRTCRGB_2BPPV:
                    if (!n._compressedTexturePvrtc) throw "BaseTexture: not support PVRTCRGB_2BPPV format.";
                    e = n._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    break;

                  case t.TextureFormat.PVRTCRGBA_2BPPV:
                    if (!n._compressedTexturePvrtc) throw "BaseTexture: not support PVRTCRGBA_2BPPV format.";
                    e = n._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                    break;

                  case t.TextureFormat.PVRTCRGB_4BPPV:
                    if (!n._compressedTexturePvrtc) throw "BaseTexture: not support PVRTCRGB_4BPPV format.";
                    e = n._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    break;

                  case t.TextureFormat.PVRTCRGBA_4BPPV:
                    if (!n._compressedTexturePvrtc) throw "BaseTexture: not support PVRTCRGBA_4BPPV format.";
                    e = n._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    break;

                  case t.TextureFormat.ASTC4x4:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC4x4 format.";
                    e = n._compressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;
                    break;

                  case t.TextureFormat.ASTC4x4SRGB:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC4x4_KHR format.";
                    e = n._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
                    break;

                  case t.TextureFormat.ASTC6x6:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC6x6 format.";
                    e = n._compressedTextureASTC.COMPRESSED_RGBA_ASTC_6x6_KHR;
                    break;

                  case t.TextureFormat.ASTC6x6SRGB:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC6x6_KHR format.";
                    e = n._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
                    break;

                  case t.TextureFormat.ASTC8x8:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC8x8 format.";
                    e = n._compressedTextureASTC.COMPRESSED_RGBA_ASTC_8x8_KHR;
                    break;

                  case t.TextureFormat.ASTC8x8SRGB:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC8x8 format.";
                    e = n._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
                    break;

                  case t.TextureFormat.ASTC10x10:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC10x10 format.";
                    e = n._compressedTextureASTC.COMPRESSED_RGBA_ASTC_10x10_KHR;
                    break;

                  case t.TextureFormat.ASTC10x10SRGB:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC10x10 format.";
                    e = n._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
                    break;

                  case t.TextureFormat.ASTC12x12:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC12x12 format.";
                    e = n._compressedTextureASTC.COMPRESSED_RGBA_ASTC_12x12_KHR;
                    break;

                  case t.TextureFormat.ASTC12x12SRGB:
                    if (!n._compressedTextureASTC) throw "BaseTexture: not support ASTC12x12 format.";
                    e = n._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
                    break;

                  default:
                    throw "BaseTexture: unknown texture format.";
                }
                return e;
            }
        }, {
            key: "_setFilterMode",
            value: function(e) {
                var i = A.instance;
                switch (L.bindTexture(i, this._glTextureType, this._glTexture), e) {
                  case t.FilterMode.Point:
                    this._mipmap ? i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.NEAREST_MIPMAP_NEAREST) : i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.NEAREST), 
                    i.texParameteri(this._glTextureType, i.TEXTURE_MAG_FILTER, i.NEAREST);
                    break;

                  case t.FilterMode.Bilinear:
                    this._mipmap ? i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.LINEAR_MIPMAP_NEAREST) : i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.LINEAR), 
                    i.texParameteri(this._glTextureType, i.TEXTURE_MAG_FILTER, i.LINEAR);
                    break;

                  case t.FilterMode.Trilinear:
                    this._mipmap ? i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.LINEAR_MIPMAP_LINEAR) : i.texParameteri(this._glTextureType, i.TEXTURE_MIN_FILTER, i.LINEAR), 
                    i.texParameteri(this._glTextureType, i.TEXTURE_MAG_FILTER, i.LINEAR);
                    break;

                  default:
                    throw new Error("BaseTexture:unknown filterMode value.");
                }
            }
        }, {
            key: "_setWarpMode",
            value: function(e, i) {
                var n = A.instance;
                if (L.bindTexture(n, this._glTextureType, this._glTexture), this._isPot(this._width) && this._isPot(this._height)) switch (i) {
                  case t.WarpMode.Repeat:
                    n.texParameteri(this._glTextureType, e, n.REPEAT);
                    break;

                  case t.WarpMode.Clamp:
                    n.texParameteri(this._glTextureType, e, n.CLAMP_TO_EDGE);
                } else n.texParameteri(this._glTextureType, e, n.CLAMP_TO_EDGE);
            }
        }, {
            key: "_setAnisotropy",
            value: function(t) {
                var e = A.layaGPUInstance._extTextureFilterAnisotropic;
                if (e) {
                    t = Math.max(t, 1);
                    var i = A.instance;
                    L.bindTexture(i, this._glTextureType, this._glTexture), t = Math.min(i.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT), t), 
                    i.texParameterf(this._glTextureType, e.TEXTURE_MAX_ANISOTROPY_EXT, t);
                }
            }
        }, {
            key: "_disposeResource",
            value: function() {
                this._glTexture && (A.instance.deleteTexture(this._glTexture), this._glTexture = null, 
                this._setGPUMemory(0));
            }
        }, {
            key: "_getSource",
            value: function() {
                return this._readyed ? this._glTexture : null;
            }
        }, {
            key: "generateMipmap",
            value: function() {
                this._isPot(this.width) && this._isPot(this.height) && A.instance.generateMipmap(this._glTextureType);
            }
        }, {
            key: "mipmap",
            get: function() {
                return this._mipmap;
            }
        }, {
            key: "format",
            get: function() {
                return this._format;
            }
        }, {
            key: "wrapModeU",
            get: function() {
                return this._wrapModeU;
            },
            set: function(t) {
                this._wrapModeU !== t && (this._wrapModeU = t, -1 !== this._width && this._setWarpMode(A.instance.TEXTURE_WRAP_S, t));
            }
        }, {
            key: "wrapModeV",
            get: function() {
                return this._wrapModeV;
            },
            set: function(t) {
                this._wrapModeV !== t && (this._wrapModeV = t, -1 !== this._height && this._setWarpMode(A.instance.TEXTURE_WRAP_T, t));
            }
        }, {
            key: "filterMode",
            get: function() {
                return this._filterMode;
            },
            set: function(t) {
                t !== this._filterMode && (this._filterMode = t, -1 !== this._width && -1 !== this._height && this._setFilterMode(t));
            }
        }, {
            key: "anisoLevel",
            get: function() {
                return this._anisoLevel;
            },
            set: function(t) {
                t !== this._anisoLevel && (this._anisoLevel = Math.max(1, Math.min(16, t)), -1 !== this._width && -1 !== this._height && this._setAnisotropy(t));
            }
        }, {
            key: "mipmapCount",
            get: function() {
                return this._mipmapCount;
            }
        }, {
            key: "defaulteTexture",
            get: function() {
                throw "BaseTexture:must override it.";
            }
        } ]), n;
    }(U);
    G._rgbmRange = 5, G.FORMAT_R8G8B8 = 0, G.FORMAT_R8G8B8A8 = 1, G.FORMAT_ALPHA8 = 2, 
    G.FORMAT_DXT1 = 3, G.FORMAT_DXT5 = 4, G.FORMAT_ETC1RGB = 5, G.FORMAT_PVRTCRGB_2BPPV = 9, 
    G.FORMAT_PVRTCRGBA_2BPPV = 10, G.FORMAT_PVRTCRGB_4BPPV = 11, G.FORMAT_PVRTCRGBA_4BPPV = 12, 
    G.RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT = 14, G.FORMAT_R32G32B32A32 = 15, G.FORMAT_DEPTH_16 = 0, 
    G.FORMAT_STENCIL_8 = 1, G.FORMAT_DEPTHSTENCIL_16_8 = 2, G.FORMAT_DEPTHSTENCIL_NONE = 3, 
    G.FILTERMODE_POINT = 0, G.FILTERMODE_BILINEAR = 1, G.FILTERMODE_TRILINEAR = 2, G.WARPMODE_REPEAT = 0, 
    G.WARPMODE_CLAMP = 1;
    var W = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
            (0, o.default)(this, t), this._xd_ = !0, this._allocated_ = 8, this._pos_ = 0, this._length = 0, 
            e ? (this._u8d_ = new Uint8Array(e), this._d_ = new DataView(this._u8d_.buffer), 
            this._length = this._d_.byteLength) : this._resizeBuffer(this._allocated_);
        }
        return (0, s.default)(t, [ {
            key: "_resizeBuffer",
            value: function(t) {
                try {
                    var e = new Uint8Array(t);
                    null != this._u8d_ && (this._u8d_.length <= t ? e.set(this._u8d_) : e.set(this._u8d_.subarray(0, t))), 
                    this._u8d_ = e, this._d_ = new DataView(e.buffer);
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    throw "Invalid typed array length:" + t;
                }
            }
        }, {
            key: "getString",
            value: function() {
                return this.readString();
            }
        }, {
            key: "readString",
            value: function() {
                return this._rUTF(this.getUint16());
            }
        }, {
            key: "getFloat32Array",
            value: function(t, e) {
                return this.readFloat32Array(t, e);
            }
        }, {
            key: "readFloat32Array",
            value: function(t, e) {
                var i = t + e;
                i = i > this._length ? this._length : i;
                var n = new Float32Array(this._d_.buffer.slice(t, i));
                return this._pos_ = i, n;
            }
        }, {
            key: "getUint8Array",
            value: function(t, e) {
                return this.readUint8Array(t, e);
            }
        }, {
            key: "readUint8Array",
            value: function(t, e) {
                var i = t + e;
                i = i > this._length ? this._length : i;
                var n = new Uint8Array(this._d_.buffer.slice(t, i));
                return this._pos_ = i, n;
            }
        }, {
            key: "getInt16Array",
            value: function(t, e) {
                return this.readInt16Array(t, e);
            }
        }, {
            key: "readInt16Array",
            value: function(t, e) {
                var i = t + e;
                i = i > this._length ? this._length : i;
                var n = new Int16Array(this._d_.buffer.slice(t, i));
                return this._pos_ = i, n;
            }
        }, {
            key: "getFloat32",
            value: function() {
                return this.readFloat32();
            }
        }, {
            key: "readFloat32",
            value: function() {
                if (this._pos_ + 4 > this._length) throw "getFloat32 error - Out of bounds";
                var t = this._d_.getFloat32(this._pos_, this._xd_);
                return this._pos_ += 4, t;
            }
        }, {
            key: "getFloat64",
            value: function() {
                return this.readFloat64();
            }
        }, {
            key: "readFloat64",
            value: function() {
                if (this._pos_ + 8 > this._length) throw "getFloat64 error - Out of bounds";
                var t = this._d_.getFloat64(this._pos_, this._xd_);
                return this._pos_ += 8, t;
            }
        }, {
            key: "writeFloat32",
            value: function(t) {
                this._ensureWrite(this._pos_ + 4), this._d_.setFloat32(this._pos_, t, this._xd_), 
                this._pos_ += 4;
            }
        }, {
            key: "writeFloat64",
            value: function(t) {
                this._ensureWrite(this._pos_ + 8), this._d_.setFloat64(this._pos_, t, this._xd_), 
                this._pos_ += 8;
            }
        }, {
            key: "getInt32",
            value: function() {
                return this.readInt32();
            }
        }, {
            key: "readInt32",
            value: function() {
                if (this._pos_ + 4 > this._length) throw "getInt32 error - Out of bounds";
                var t = this._d_.getInt32(this._pos_, this._xd_);
                return this._pos_ += 4, t;
            }
        }, {
            key: "getUint32",
            value: function() {
                return this.readUint32();
            }
        }, {
            key: "readUint32",
            value: function() {
                if (this._pos_ + 4 > this._length) throw "getUint32 error - Out of bounds";
                var t = this._d_.getUint32(this._pos_, this._xd_);
                return this._pos_ += 4, t;
            }
        }, {
            key: "writeInt32",
            value: function(t) {
                this._ensureWrite(this._pos_ + 4), this._d_.setInt32(this._pos_, t, this._xd_), 
                this._pos_ += 4;
            }
        }, {
            key: "writeUint32",
            value: function(t) {
                this._ensureWrite(this._pos_ + 4), this._d_.setUint32(this._pos_, t, this._xd_), 
                this._pos_ += 4;
            }
        }, {
            key: "getInt16",
            value: function() {
                return this.readInt16();
            }
        }, {
            key: "readInt16",
            value: function() {
                if (this._pos_ + 2 > this._length) throw "getInt16 error - Out of bounds";
                var t = this._d_.getInt16(this._pos_, this._xd_);
                return this._pos_ += 2, t;
            }
        }, {
            key: "getUint16",
            value: function() {
                return this.readUint16();
            }
        }, {
            key: "readUint16",
            value: function() {
                if (this._pos_ + 2 > this._length) throw "getUint16 error - Out of bounds";
                var t = this._d_.getUint16(this._pos_, this._xd_);
                return this._pos_ += 2, t;
            }
        }, {
            key: "writeUint16",
            value: function(t) {
                this._ensureWrite(this._pos_ + 2), this._d_.setUint16(this._pos_, t, this._xd_), 
                this._pos_ += 2;
            }
        }, {
            key: "writeInt16",
            value: function(t) {
                this._ensureWrite(this._pos_ + 2), this._d_.setInt16(this._pos_, t, this._xd_), 
                this._pos_ += 2;
            }
        }, {
            key: "getUint8",
            value: function() {
                return this.readUint8();
            }
        }, {
            key: "readUint8",
            value: function() {
                if (this._pos_ + 1 > this._length) throw "getUint8 error - Out of bounds";
                return this._u8d_[this._pos_++];
            }
        }, {
            key: "writeUint8",
            value: function(t) {
                this._ensureWrite(this._pos_ + 1), this._d_.setUint8(this._pos_, t), this._pos_++;
            }
        }, {
            key: "_getUInt8",
            value: function(t) {
                return this._readUInt8(t);
            }
        }, {
            key: "_readUInt8",
            value: function(t) {
                return this._d_.getUint8(t);
            }
        }, {
            key: "_getUint16",
            value: function(t) {
                return this._readUint16(t);
            }
        }, {
            key: "_readUint16",
            value: function(t) {
                return this._d_.getUint16(t, this._xd_);
            }
        }, {
            key: "_getMatrix",
            value: function() {
                return this._readMatrix();
            }
        }, {
            key: "_readMatrix",
            value: function() {
                return new k(this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32());
            }
        }, {
            key: "_rUTF",
            value: function(t) {
                var e, i, n = this._pos_ + t, r = String.fromCharCode, a = this._u8d_, s = [], o = 0;
                for (s.length = 1e3; this._pos_ < n; ) if ((e = a[this._pos_++]) < 128) 0 != e && (s[o++] = r(e)); else if (e < 224) s[o++] = r((63 & e) << 6 | 127 & a[this._pos_++]); else if (e < 240) i = a[this._pos_++], 
                s[o++] = r((31 & e) << 12 | (127 & i) << 6 | 127 & a[this._pos_++]); else {
                    var l = (15 & e) << 18 | (127 & (i = a[this._pos_++])) << 12 | (127 & a[this._pos_++]) << 6 | 127 & a[this._pos_++];
                    if (l >= 65536) {
                        var h = l - 65536, u = 55296 | h >> 10, c = 56320 | 1023 & h;
                        s[o++] = r(u), s[o++] = r(c);
                    } else s[o++] = r(l);
                }
                return s.length = o, s.join("");
            }
        }, {
            key: "getCustomString",
            value: function(t) {
                return this.readCustomString(t);
            }
        }, {
            key: "readCustomString",
            value: function(t) {
                for (var e, i = "", n = 0, r = String.fromCharCode, a = this._u8d_; t > 0; ) if ((e = a[this._pos_]) < 128) i += r(e), 
                this._pos_++, t--; else for (n = e - 128, this._pos_++, t -= n; n > 0; ) e = a[this._pos_++], 
                i += r(a[this._pos_++] << 8 | e), n--;
                return i;
            }
        }, {
            key: "clear",
            value: function() {
                this._pos_ = 0, this.length = 0;
            }
        }, {
            key: "__getBuffer",
            value: function() {
                return this._d_.buffer;
            }
        }, {
            key: "writeUTFBytes",
            value: function(t) {
                for (var e = 0, i = (t += "").length; e < i; e++) {
                    var n = t.charCodeAt(e);
                    if (n <= 127) this.writeByte(n); else if (n <= 2047) this._ensureWrite(this._pos_ + 2), 
                    this._u8d_.set([ 192 | n >> 6, 128 | 63 & n ], this._pos_), this._pos_ += 2; else if (n >= 55296 && n <= 56319) {
                        e++;
                        var r = t.charCodeAt(e);
                        if (!Number.isNaN(r) && r >= 56320 && r <= 57343) {
                            var a = 64 + (1023 & n), s = 1023 & r, o = 240 | a >> 8 & 63, l = 128 | a >> 2 & 63, h = 128 | (3 & a) << 4 | s >> 6 & 15, u = 128 | 63 & s;
                            this._ensureWrite(this._pos_ + 4), this._u8d_.set([ o, l, h, u ], this._pos_), this._pos_ += 4;
                        }
                    } else n <= 65535 ? (this._ensureWrite(this._pos_ + 3), this._u8d_.set([ 224 | n >> 12, 128 | n >> 6 & 63, 128 | 63 & n ], this._pos_), 
                    this._pos_ += 3) : (this._ensureWrite(this._pos_ + 4), this._u8d_.set([ 240 | n >> 18, 128 | n >> 12 & 63, 128 | n >> 6 & 63, 128 | 63 & n ], this._pos_), 
                    this._pos_ += 4);
                }
            }
        }, {
            key: "writeUTFString",
            value: function(t) {
                var e = this.pos;
                this.writeUint16(1), this.writeUTFBytes(t);
                var i = this.pos - e - 2;
                this._d_.setUint16(e, i, this._xd_);
            }
        }, {
            key: "writeUTFString32",
            value: function(t) {
                var e = this.pos;
                this.writeUint32(1), this.writeUTFBytes(t);
                var i = this.pos - e - 4;
                this._d_.setUint32(e, i, this._xd_);
            }
        }, {
            key: "readUTFString",
            value: function() {
                return this.readUTFBytes(this.getUint16());
            }
        }, {
            key: "readUTFString32",
            value: function() {
                return this.readUTFBytes(this.getUint32());
            }
        }, {
            key: "getUTFString",
            value: function() {
                return this.readUTFString();
            }
        }, {
            key: "readUTFBytes",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -1;
                if (0 === t) return "";
                var e = this.bytesAvailable;
                if (t > e) throw "readUTFBytes error - Out of bounds";
                return t = t > 0 ? t : e, this._rUTF(t);
            }
        }, {
            key: "getUTFBytes",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -1;
                return this.readUTFBytes(t);
            }
        }, {
            key: "writeByte",
            value: function(t) {
                this._ensureWrite(this._pos_ + 1), this._d_.setInt8(this._pos_, t), this._pos_ += 1;
            }
        }, {
            key: "readByte",
            value: function() {
                if (this._pos_ + 1 > this._length) throw "readByte error - Out of bounds";
                return this._d_.getInt8(this._pos_++);
            }
        }, {
            key: "getByte",
            value: function() {
                return this.readByte();
            }
        }, {
            key: "_ensureWrite",
            value: function(t) {
                this._length < t && (this._length = t), this._allocated_ < t && (this.length = t);
            }
        }, {
            key: "writeArrayBuffer",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                if (e < 0 || i < 0) throw "writeArrayBuffer error - Out of bounds";
                0 == i && (i = t.byteLength - e), this._ensureWrite(this._pos_ + i);
                var n = new Uint8Array(t);
                this._u8d_.set(n.subarray(e, e + i), this._pos_), this._pos_ += i;
            }
        }, {
            key: "readArrayBuffer",
            value: function(t) {
                var e;
                return e = this._u8d_.buffer.slice(this._pos_, this._pos_ + t), this._pos_ = this._pos_ + t, 
                e;
            }
        }, {
            key: "buffer",
            get: function() {
                var t = this._d_.buffer;
                return t.byteLength === this._length ? t : t.slice(0, this._length);
            }
        }, {
            key: "endian",
            get: function() {
                return this._xd_ ? t.LITTLE_ENDIAN : t.BIG_ENDIAN;
            },
            set: function(e) {
                this._xd_ = e === t.LITTLE_ENDIAN;
            }
        }, {
            key: "length",
            set: function(t) {
                this._allocated_ < t ? this._resizeBuffer(this._allocated_ = Math.floor(Math.max(t, 2 * this._allocated_))) : this._allocated_ > t && this._resizeBuffer(this._allocated_ = t), 
                this._length = t;
            },
            get: function() {
                return this._length;
            }
        }, {
            key: "pos",
            get: function() {
                return this._pos_;
            },
            set: function(t) {
                this._pos_ = t;
            }
        }, {
            key: "bytesAvailable",
            get: function() {
                return this._length - this._pos_;
            }
        } ], [ {
            key: "getSystemEndian",
            value: function() {
                if (!t._sysEndian) {
                    var e = new ArrayBuffer(2);
                    new DataView(e).setInt16(0, 256, !0), t._sysEndian = 256 === new Int16Array(e)[0] ? t.LITTLE_ENDIAN : t.BIG_ENDIAN;
                }
                return t._sysEndian;
            }
        } ]), t;
    }();
    W.BIG_ENDIAN = "bigEndian", W.LITTLE_ENDIAN = "littleEndian", W._sysEndian = null, 
    (w = t.RenderTextureFormat || (t.RenderTextureFormat = {}))[w.R8G8B8 = 0] = "R8G8B8", 
    w[w.R8G8B8A8 = 1] = "R8G8B8A8", w[w.Alpha8 = 2] = "Alpha8", w[w.R16G16B16A16 = 14] = "R16G16B16A16", 
    w[w.Depth = 15] = "Depth", w[w.ShadowMap = 16] = "ShadowMap", (M = t.RenderTextureDepthFormat || (t.RenderTextureDepthFormat = {}))[M.DEPTH_16 = 0] = "DEPTH_16", 
    M[M.STENCIL_8 = 1] = "STENCIL_8", M[M.DEPTHSTENCIL_24_8 = 2] = "DEPTHSTENCIL_24_8", 
    M[M.DEPTHSTENCIL_NONE = 3] = "DEPTHSTENCIL_NONE", M[M.DEPTHSTENCIL_16_8 = 2] = "DEPTHSTENCIL_16_8";
    var Y = function() {
        function e() {
            (0, o.default)(this, e);
        }
        return (0, s.default)(e, null, [ {
            key: "supportTextureFormat",
            value: function(e) {
                switch (e) {
                  case t.TextureFormat.R32G32B32A32:
                    return !(!A.layaGPUInstance._isWebGL2 && !A.layaGPUInstance._oesTextureFloat);

                  case t.TextureFormat.R16G16B16A16:
                    return !(!A.layaGPUInstance._isWebGL2 && !A.layaGPUInstance._oesTextureHalfFloat);

                  default:
                    return !0;
                }
            }
        }, {
            key: "supportRenderTextureFormat",
            value: function(e) {
                switch (e) {
                  case t.RenderTextureFormat.R16G16B16A16:
                    return !!(A.layaGPUInstance._isWebGL2 && A.layaGPUInstance._extColorBufferFloat || A.layaGPUInstance._oesTextureHalfFloat && A.layaGPUInstance._oesTextureHalfFloatLinear);

                  case t.RenderTextureFormat.Depth:
                    return !(!A.layaGPUInstance._isWebGL2 && !A.layaGPUInstance._webgl_depth_texture);

                  case t.RenderTextureFormat.ShadowMap:
                    return !!A.layaGPUInstance._isWebGL2;

                  default:
                    return !0;
                }
            }
        }, {
            key: "maxTextureCount",
            get: function() {
                return this._maxTextureCount;
            }
        }, {
            key: "maxTextureSize",
            get: function() {
                return this._maxTextureSize;
            }
        }, {
            key: "shaderCapailityLevel",
            get: function() {
                return this._shaderCapailityLevel;
            }
        } ]), e;
    }(), V = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                for (var e = 0; e < 256; ++e) {
                    var i = e - 127;
                    i < -27 ? (t._baseTable[0 | e] = 0, t._baseTable[256 | e] = 32768, t._shiftTable[0 | e] = 24, 
                    t._shiftTable[256 | e] = 24) : i < -14 ? (t._baseTable[0 | e] = 1024 >> -i - 14, 
                    t._baseTable[256 | e] = 1024 >> -i - 14 | 32768, t._shiftTable[0 | e] = -i - 1, 
                    t._shiftTable[256 | e] = -i - 1) : i <= 15 ? (t._baseTable[0 | e] = i + 15 << 10, 
                    t._baseTable[256 | e] = i + 15 << 10 | 32768, t._shiftTable[0 | e] = 13, t._shiftTable[256 | e] = 13) : i < 128 ? (t._baseTable[0 | e] = 31744, 
                    t._baseTable[256 | e] = 64512, t._shiftTable[0 | e] = 24, t._shiftTable[256 | e] = 24) : (t._baseTable[0 | e] = 31744, 
                    t._baseTable[256 | e] = 64512, t._shiftTable[0 | e] = 13, t._shiftTable[256 | e] = 13);
                }
                for (t._mantissaTable[0] = 0, e = 1; e < 1024; ++e) {
                    var n = e << 13;
                    for (i = 0; 0 == (8388608 & n); ) i -= 8388608, n <<= 1;
                    n &= -8388609, i += 947912704, t._mantissaTable[e] = n | i;
                }
                for (e = 1024; e < 2048; ++e) t._mantissaTable[e] = 939524096 + (e - 1024 << 13);
                for (t._exponentTable[0] = 0, e = 1; e < 31; ++e) t._exponentTable[e] = e << 23;
                for (t._exponentTable[31] = 1199570944, t._exponentTable[32] = 2147483648, e = 33; e < 63; ++e) t._exponentTable[e] = 2147483648 + (e - 32 << 23);
                for (t._exponentTable[63] = 3347054592, t._offsetTable[0] = 0, e = 1; e < 64; ++e) t._offsetTable[e] = 32 === e ? 0 : 1024;
            }
        }, {
            key: "roundToFloat16Bits",
            value: function(e) {
                t._floatView[0] = e;
                var i = t._uint32View[0], n = i >> 23 & 511;
                return t._baseTable[n] + ((8388607 & i) >> t._shiftTable[n]);
            }
        }, {
            key: "convertToNumber",
            value: function(e) {
                var i = e >> 10;
                return t._uint32View[0] = t._mantissaTable[t._offsetTable[i] + (1023 & e)] + t._exponentTable[i], 
                t._floatView[0];
            }
        } ]), t;
    }();
    V._buffer = new ArrayBuffer(4), V._floatView = new Float32Array(V._buffer), V._uint32View = new Uint32Array(V._buffer), 
    V._baseTable = new Uint32Array(512), V._shiftTable = new Uint32Array(512), V._mantissaTable = new Uint32Array(2048), 
    V._exponentTable = new Uint32Array(64), V._offsetTable = new Uint32Array(64);
    var X = function(e) {
        (0, a.default)(n, e);
        var i = l(n);
        function n() {
            var e, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t.TextureFormat.R8G8B8A8, l = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], h = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            (0, o.default)(this, n), e = i.call(this, s, l);
            var u = A.instance;
            e._glTextureType = u.TEXTURE_2D, e._width = r, e._height = a, e._canRead = h, e._setWarpMode(u.TEXTURE_WRAP_S, e._wrapModeU), 
            e._setWarpMode(u.TEXTURE_WRAP_T, e._wrapModeV), e._setFilterMode(e._filterMode), 
            e._setAnisotropy(e._anisoLevel);
            var c = e._gpuCompressFormat();
            if (l) {
                var _ = Math.max(Math.ceil(Math.log2(r)) + 1, Math.ceil(Math.log2(a)) + 1);
                if (!c) for (var d = 0; d < _; d++) e._setPixels(null, d, Math.max(r >> d, 1), Math.max(a >> d, 1));
                e._mipmapCount = _, e._setGPUMemory(r * a * 4 * (1 + 1 / 3));
            } else c || e._setPixels(null, 0, r, a), e._mipmapCount = 1, e._setGPUMemory(r * a * 4);
            return e;
        }
        return (0, s.default)(n, [ {
            key: "_gpuCompressFormat",
            value: function() {
                return this._format != t.TextureFormat.R8G8B8A8 && this._format != t.TextureFormat.R8G8B8 && this._format != t.TextureFormat.R16G16B16A16 && this._format != t.TextureFormat.R32G32B32A32 && this._format != t.TextureFormat.R5G6B5 && this._format != t.TextureFormat.Alpha8;
            }
        }, {
            key: "_setPixels",
            value: function(e, i, n, r) {
                var a = A.instance, s = this._glTextureType, o = this._getGLFormat();
                switch (L.bindTexture(a, s, this._glTexture), this.format) {
                  case t.TextureFormat.R8G8B8:
                    a.pixelStorei(a.UNPACK_ALIGNMENT, 1), a.texImage2D(s, i, o, n, r, 0, o, a.UNSIGNED_BYTE, e), 
                    a.pixelStorei(a.UNPACK_ALIGNMENT, 4);
                    break;

                  case t.TextureFormat.R5G6B5:
                    a.pixelStorei(a.UNPACK_ALIGNMENT, 2), a.texImage2D(s, i, o, n, r, 0, o, a.UNSIGNED_SHORT_5_6_5, e), 
                    a.pixelStorei(a.UNPACK_ALIGNMENT, 4);
                    break;

                  case t.TextureFormat.R32G32B32A32:
                    A.layaGPUInstance._isWebGL2 ? a.texImage2D(s, i, a.RGBA32F, n, r, 0, o, a.FLOAT, e) : a.texImage2D(s, i, a.RGBA, n, r, 0, o, a.FLOAT, e);
                    break;

                  case t.TextureFormat.R16G16B16A16:
                    A.layaGPUInstance._isWebGL2 ? a.texImage2D(s, i, a.RGBA16F, n, r, 0, o, a.HALF_FLOAT, e) : a.texImage2D(s, i, a.RGBA, n, r, 0, o, A.layaGPUInstance._oesTextureHalfFloat.HALF_FLOAT_OES, e);
                    break;

                  default:
                    a.texImage2D(s, i, o, n, r, 0, o, a.UNSIGNED_BYTE, e);
                }
            }
        }, {
            key: "_calcualatesCompressedDataSize",
            value: function(e, i, n) {
                switch (e) {
                  case t.TextureFormat.DXT1:
                    return (i + 3 >> 2) * (n + 3 >> 2) * 8;

                  case t.TextureFormat.DXT5:
                    return (i + 3 >> 2) * (n + 3 >> 2) * 16;

                  case t.TextureFormat.PVRTCRGB_4BPPV:
                  case t.TextureFormat.PVRTCRGBA_4BPPV:
                    return Math.floor((Math.max(i, 8) * Math.max(n, 8) * 4 + 7) / 8);

                  case t.TextureFormat.PVRTCRGB_2BPPV:
                  case t.TextureFormat.PVRTCRGBA_2BPPV:
                    return Math.floor((Math.max(i, 16) * Math.max(n, 8) * 2 + 7) / 8);

                  default:
                    return 0;
                }
            }
        }, {
            key: "_pharseDDS",
            value: function(e) {
                var i = new Int32Array(e, 0, 31);
                if (542327876 != i[0]) throw "Invalid magic number in DDS header";
                if (!(4 & i[20])) throw "Unsupported format, must contain a FourCC code";
                var n = i[21];
                switch (this._format) {
                  case t.TextureFormat.DXT1:
                    if (827611204 !== n) throw "the FourCC code is not same with texture format.";
                    break;

                  case t.TextureFormat.DXT5:
                    if (894720068 !== n) throw "the FourCC code is not same with texture format.";
                    break;

                  default:
                    throw "unknown texture format.";
                }
                var r = 1;
                if (131072 & i[2]) {
                    if (r = Math.max(1, i[7]), !this._mipmap) throw "the mipmap is not same with Texture2D.";
                } else if (this._mipmap) throw "the mipmap is not same with Texture2D.";
                var a = i[4], s = i[3];
                this._width = a, this._height = s;
                var o = i[1] + 4;
                this._upLoadCompressedTexImage2D(e, a, s, r, o, 0);
            }
        }, {
            key: "_pharseKTX",
            value: function(e) {
                var i = new Uint8Array(e, 0, 12);
                if (171 != i[0] || 75 != i[1] || 84 != i[2] || 88 != i[3] || 32 != i[4] || 49 != i[5] || 49 != i[6] || 187 != i[7] || 13 != i[8] || 10 != i[9] || 26 != i[10] || 10 != i[11]) throw "Invalid fileIdentifier in KTX header";
                var n = new Int32Array(i.buffer, i.length, 13), r = n[4];
                if (this._format = -1, A.layaGPUInstance._compressedTextureASTC) switch (r) {
                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR:
                    this._format = t.TextureFormat.ASTC4x4;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:
                    this._format = t.TextureFormat.ASTC4x4SRGB;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:
                    this._format = t.TextureFormat.ASTC6x6SRGB;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:
                    this._format = t.TextureFormat.ASTC8x8SRGB;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:
                    this._format = t.TextureFormat.ASTC10x10SRGB;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:
                    this._format = t.TextureFormat.ASTC12x12SRGB;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_RGBA_ASTC_6x6_KHR:
                    this._format = t.TextureFormat.ASTC6x6;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_RGBA_ASTC_8x8_KHR:
                    this._format = t.TextureFormat.ASTC8x8;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_RGBA_ASTC_10x10_KHR:
                    this._format = t.TextureFormat.ASTC10x10;
                    break;

                  case A.layaGPUInstance._compressedTextureASTC.COMPRESSED_RGBA_ASTC_12x12_KHR:
                    this._format = t.TextureFormat.ASTC12x12;
                }
                if (A.layaGPUInstance._compressedTextureEtc1) switch (r) {
                  case A.layaGPUInstance._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL:
                    this._format = t.TextureFormat.ETC1RGB;
                }
                if (A.layaGPUInstance._compressedTextureETC) switch (r) {
                  case A.layaGPUInstance._compressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC:
                    this._format = t.TextureFormat.ETC2RGBA;
                    break;

                  case A.layaGPUInstance._compressedTextureETC.COMPRESSED_RGB8_ETC2:
                    this._format = t.TextureFormat.ETC2RGB;
                    break;

                  case A.layaGPUInstance._compressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:
                    this._format = t.TextureFormat.ETC2RGB_Alpha8;
                    break;

                  case A.layaGPUInstance._compressedTextureETC.COMPRESSED_SRGB8_ETC2:
                    this._format = t.TextureFormat.ETC2SRGB;
                }
                if (-1 == this._format) throw "unknown texture format.";
                var a = n[11], s = n[6], o = n[7];
                this._width = s, this._height = o;
                var l = 64 + n[12];
                this._upLoadKTXCompressedTexImage2D(e, s, o, a, l, 4);
            }
        }, {
            key: "_pharsePVR",
            value: function(e) {
                var i = new Int32Array(e, 0, 13);
                if (55727696 != i[0]) throw "Invalid magic number in PVR header";
                switch (i[2]) {
                  case 0:
                    this._format = t.TextureFormat.PVRTCRGB_2BPPV;
                    break;

                  case 2:
                    this._format = t.TextureFormat.PVRTCRGB_4BPPV;
                    break;

                  case 1:
                    this._format = t.TextureFormat.PVRTCRGBA_2BPPV;
                    break;

                  case 3:
                    this._format = t.TextureFormat.PVRTCRGBA_4BPPV;
                    break;

                  default:
                    throw "Texture2D:unknown PVR format.";
                }
                var n = i[11], r = i[7], a = i[6];
                this._width = r, this._height = a;
                var s = i[12] + 52;
                this._upLoadCompressedTexImage2D(e, r, a, n, s, 0);
            }
        }, {
            key: "_upLoadCompressedTexImage2D",
            value: function(t, e, i, n, r, a) {
                var s = A.instance, o = this._glTextureType;
                L.bindTexture(s, o, this._glTexture);
                for (var l = this._getGLFormat(), h = r, u = 0; u < n; u++) {
                    h += a;
                    var c = this._calcualatesCompressedDataSize(this._format, e, i), _ = new Uint8Array(t, h, c);
                    s.compressedTexImage2D(o, u, l, e, i, 0, _), e = Math.max(e >> 1, 1), i = Math.max(i >> 1, 1), 
                    h += c;
                }
                var d = h;
                this._setGPUMemory(d), this._readyed = !0, this._activeResource();
            }
        }, {
            key: "_upLoadKTXCompressedTexImage2D",
            value: function(t, e, i, n, r, a) {
                var s = A.instance, o = this._glTextureType;
                L.bindTexture(s, o, this._glTexture);
                for (var l = this._getGLFormat(), h = r, u = 0; u < n; u++) {
                    var c = new Int32Array(t, h, 1)[0];
                    h += a;
                    var _ = new Uint8Array(t, h, c);
                    s.compressedTexImage2D(o, u, l, e, i, 0, _), e = Math.max(e >> 1, 1), i = Math.max(i >> 1, 1), 
                    h += c, h += 3 - (c + 3) % 4;
                }
                var d = h;
                this._setGPUMemory(d), this._readyed = !0, this._activeResource();
            }
        }, {
            key: "loadImageSource",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = A.instance, r = e.width, a = e.height;
                this._width = r, this._height = a, this._isPot(r) && this._isPot(a) || (this._mipmap = !1), 
                this._setWarpMode(n.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(n.TEXTURE_WRAP_T, this._wrapModeV), 
                this._setFilterMode(this._filterMode), L.bindTexture(n, this._glTextureType, this._glTexture);
                var s = this._getGLFormat();
                u.Render.isConchApp ? (e.setPremultiplyAlpha && e.setPremultiplyAlpha(i), n.texImage2D(this._glTextureType, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, e)) : (i && n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0), 
                this.format == t.TextureFormat.R5G6B5 ? n.texImage2D(this._glTextureType, 0, n.RGB, n.RGB, n.UNSIGNED_SHORT_5_6_5, e) : n.texImage2D(this._glTextureType, 0, s, s, n.UNSIGNED_BYTE, e), 
                i && n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1)), this._mipmap ? (n.generateMipmap(this._glTextureType), 
                this._setGPUMemory(r * a * 4 * (1 + 1 / 3))) : this._setGPUMemory(r * a * 4), this._canRead && (u.Render.isConchApp ? this._pixels = new Uint8Array(e._nativeObj.getImageData(0, 0, r, a)) : (u.Browser.canvas.size(r, a), 
                u.Browser.canvas.clear(), u.Browser.context.drawImage(e, 0, 0, r, a), this._pixels = new Uint8Array(u.Browser.context.getImageData(0, 0, r, a).data.buffer))), 
                this._readyed = !0, this._activeResource();
            }
        }, {
            key: "setPixels",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (this._gpuCompressFormat()) throw "Texture2D:the format is GPU compression format.";
                if (!t) throw "Texture2D:pixels can't be null.";
                var i = Math.max(this._width >> e, 1), n = Math.max(this._height >> e, 1), r = i * n * this._getFormatByteCount();
                if (t.length < r) throw "Texture2D:pixels length should at least " + r + ".";
                this._setPixels(t, e, i, n), this._canRead && (this._pixels = t), this._readyed = !0, 
                this._activeResource();
            }
        }, {
            key: "setSubPixels",
            value: function(e, i, n, r, a) {
                var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                if (this._gpuCompressFormat()) throw "Texture2D:the format is GPU compression format.";
                if (!a) throw "Texture2D:pixels can't be null.";
                var o = A.instance, l = this._glTextureType;
                L.bindTexture(o, l, this._glTexture);
                var h = this._getGLFormat();
                switch (this.format) {
                  case t.TextureFormat.R8G8B8:
                    o.pixelStorei(o.UNPACK_ALIGNMENT, 1), o.texSubImage2D(l, s, e, i, n, r, h, o.UNSIGNED_BYTE, a), 
                    o.pixelStorei(o.UNPACK_ALIGNMENT, 4);
                    break;

                  case t.TextureFormat.R5G6B5:
                    o.pixelStorei(o.UNPACK_ALIGNMENT, 2), o.texSubImage2D(l, s, e, i, n, r, h, o.UNSIGNED_SHORT_5_6_5, a), 
                    o.pixelStorei(o.UNPACK_ALIGNMENT, 4);
                    break;

                  case t.TextureFormat.R32G32B32A32:
                    o.texSubImage2D(l, s, e, i, n, r, h, o.FLOAT, a);
                    break;

                  default:
                    o.texSubImage2D(l, s, e, i, n, r, h, o.UNSIGNED_BYTE, a);
                }
                this._readyed = !0, this._activeResource();
            }
        }, {
            key: "setCompressData",
            value: function(e) {
                switch (this._format) {
                  case t.TextureFormat.DXT1:
                  case t.TextureFormat.DXT5:
                    this._pharseDDS(e);
                    break;

                  case t.TextureFormat.ETC1RGB:
                  case t.TextureFormat.ETC2RGB:
                  case t.TextureFormat.ETC2RGBA:
                  case t.TextureFormat.ETC2RGB_Alpha8:
                  case t.TextureFormat.ETC2SRGB:
                  case t.TextureFormat.ASTC4x4:
                  case t.TextureFormat.ASTC4x4SRGB:
                  case t.TextureFormat.ASTC6x6:
                  case t.TextureFormat.ASTC6x6SRGB:
                  case t.TextureFormat.ASTC8x8:
                  case t.TextureFormat.ASTC8x8SRGB:
                  case t.TextureFormat.ASTC10x10:
                  case t.TextureFormat.ASTC10x10SRGB:
                  case t.TextureFormat.ASTC12x12:
                  case t.TextureFormat.ASTC12x12SRGB:
                  case t.TextureFormat.KTXTEXTURE:
                    this._pharseKTX(e);
                    break;

                  case t.TextureFormat.PVRTCRGB_2BPPV:
                  case t.TextureFormat.PVRTCRGBA_2BPPV:
                  case t.TextureFormat.PVRTCRGB_4BPPV:
                  case t.TextureFormat.PVRTCRGBA_4BPPV:
                  case t.TextureFormat.PVRTEXTURE:
                    this._pharsePVR(e);
                    break;

                  default:
                    throw "Texture2D:unkonwn format.";
                }
                1 == this.mipmapCount || this.width != 1 << this.mipmapCount - 1 && this.height != 1 << this.mipmapCount ? this._mipmap = !1 : this._mipmap = !0;
                var i = A.instance;
                this._setWarpMode(i.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(i.TEXTURE_WRAP_T, this._wrapModeV), 
                this._setFilterMode(this._filterMode);
            }
        }, {
            key: "getPixels",
            value: function() {
                if (this._canRead) return this._pixels;
                throw new Error("Texture2D: must set texture canRead is true.");
            }
        }, {
            key: "defaulteTexture",
            get: function() {
                return n.grayTexture;
            }
        } ], [ {
            key: "__init__",
            value: function() {
                var e = new Uint8Array(3);
                e[0] = 128, e[1] = 128, e[2] = 128, n.grayTexture = new n(1, 1, t.TextureFormat.R8G8B8, !1, !1), 
                n.grayTexture.setPixels(e), n.grayTexture.lock = !0, e[0] = 255, e[1] = 255, e[2] = 255, 
                n.whiteTexture = new n(1, 1, t.TextureFormat.R8G8B8, !1, !1), n.whiteTexture.setPixels(e), 
                n.whiteTexture.lock = !0, e[0] = 0, e[1] = 0, e[2] = 0, n.blackTexture = new n(1, 1, t.TextureFormat.R8G8B8, !1, !1), 
                n.blackTexture.setPixels(e), n.blackTexture.lock = !0, n.erroTextur = n.whiteTexture;
            }
        }, {
            key: "_parse",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = r ? new n(r[0], r[1], r[2], r[3], r[4]) : new n(0, 0);
                switch (i && (a.wrapModeU = i.wrapModeU, a.wrapModeV = i.wrapModeV, a.filterMode = i.filterMode, 
                a.anisoLevel = i.anisoLevel), a._format) {
                  case t.TextureFormat.R8G8B8:
                  case t.TextureFormat.R8G8B8A8:
                    a.loadImageSource(e);
                    break;

                  case t.TextureFormat.DXT1:
                  case t.TextureFormat.DXT5:
                  case t.TextureFormat.ETC1RGB:
                  case t.TextureFormat.PVRTCRGB_2BPPV:
                  case t.TextureFormat.PVRTCRGBA_2BPPV:
                  case t.TextureFormat.PVRTCRGB_4BPPV:
                  case t.TextureFormat.PVRTCRGBA_4BPPV:
                  case t.TextureFormat.ETC2RGB:
                  case t.TextureFormat.ETC2RGBA:
                  case t.TextureFormat.ETC2SRGB:
                  case t.TextureFormat.ASTC4x4:
                  case t.TextureFormat.ASTC6x6:
                  case t.TextureFormat.ASTC8x8:
                  case t.TextureFormat.ASTC10x10:
                  case t.TextureFormat.ASTC12x12:
                  case t.TextureFormat.KTXTEXTURE:
                  case t.TextureFormat.PVRTEXTURE:
                    a.setCompressData(e);
                    break;

                  default:
                    throw "Texture2D:unkonwn format.";
                }
                return a;
            }
        }, {
            key: "_SimpleAnimatorTextureParse",
            value: function(e) {
                var i, r, a = new W(e);
                switch (a.readUTFString()) {
                  case "LAYAANIMATORTEXTURE:0000":
                    var s, o = a.readInt32(), l = a.readInt32();
                    i = new Float32Array(o * o * 4), r = new Float32Array(a.readArrayBuffer(4 * l)), 
                    i.set(r, 0), (s = new n(o, o, t.TextureFormat.R32G32B32A32, !1, !1)).setPixels(i, 0), 
                    s.filterMode = t.FilterMode.Point;
                    break;

                  case "LAYACOMPRESSANIMATORTEXTURE:0000":
                    if (o = a.readInt32(), l = a.readInt32(), i = new Uint16Array(a.readArrayBuffer(2 * l)), 
                    Y.supportTextureFormat(t.TextureFormat.R16G16B16A16)) (r = new Uint16Array(o * o * 4)).set(i, 0), 
                    (s = new n(o, o, t.TextureFormat.R16G16B16A16, !1, !1)).setPixels(r, 0), s.filterMode = t.FilterMode.Point; else {
                        console.log("The platform does not support 16-bit floating-point textures"), Y.supportTextureFormat(t.TextureFormat.R32G32B32A32) || console.error("The platform does not support 32-bit floating-point textures"), 
                        r = new Float32Array(o * o * 4);
                        for (var h = 0, u = i.length; h < u; h++) r[h] = V.convertToNumber(i[h]);
                        (s = new n(o, o, t.TextureFormat.R32G32B32A32, !1, !1)).setPixels(r, 0), s.filterMode = t.FilterMode.Point;
                    }
                    break;

                  default:
                    throw "Laya3D:unknow version.";
                }
                return s;
            }
        }, {
            key: "load",
            value: function(t, e) {
                u.loader.create(t, e, null, u.Loader.TEXTURE2D);
            }
        } ]), n;
    }(G);
    X.TEXTURE2D = "TEXTURE2D", X.grayTexture = null, X.whiteTexture = null, X.blackTexture = null, 
    X.erroTextur = null;
    var H = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.call(this);
        }
        return i;
    }(N), z = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "mat2MatArray",
            value: function(e, i) {
                var n = e, r = i;
                return r[0] = n.a, r[1] = n.b, r[2] = t.EMPTYMAT4_ARRAY[2], r[3] = t.EMPTYMAT4_ARRAY[3], 
                r[4] = n.c, r[5] = n.d, r[6] = t.EMPTYMAT4_ARRAY[6], r[7] = t.EMPTYMAT4_ARRAY[7], 
                r[8] = t.EMPTYMAT4_ARRAY[8], r[9] = t.EMPTYMAT4_ARRAY[9], r[10] = t.EMPTYMAT4_ARRAY[10], 
                r[11] = t.EMPTYMAT4_ARRAY[11], r[12] = n.tx, r[13] = n.ty, r[14] = t.EMPTYMAT4_ARRAY[14], 
                r[15] = t.EMPTYMAT4_ARRAY[15], i;
            }
        }, {
            key: "restoreTempArray",
            value: function() {
                t.TEMPMAT4_ARRAY[0] = 1, t.TEMPMAT4_ARRAY[1] = 0, t.TEMPMAT4_ARRAY[4] = 0, t.TEMPMAT4_ARRAY[5] = 1, 
                t.TEMPMAT4_ARRAY[12] = 0, t.TEMPMAT4_ARRAY[13] = 0;
            }
        }, {
            key: "clear",
            value: function() {
                t.worldScissorTest = !1, t.worldAlpha = 1;
            }
        } ]), t;
    }();
    z._MAXSIZE = 99999999, z.EMPTYMAT4_ARRAY = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], 
    z.TEMPMAT4_ARRAY = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], z.worldMatrix4 = z.TEMPMAT4_ARRAY, 
    z.worldMatrix = new k(), z.matWVP = null, z.worldAlpha = 1, z.worldScissorTest = !1, 
    z.width = 0, z.height = 0;
    var K = function(e) {
        (0, a.default)(n, e);
        var i = l(n);
        function n(e, r) {
            var a, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t.RenderTextureFormat.R8G8B8, l = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : t.RenderTextureDepthFormat.DEPTH_16;
            return (0, o.default)(this, n), (a = i.call(this, s, !1))._mgrKey = 0, a._glTextureType = A.instance.TEXTURE_2D, 
            a._width = e, a._height = r, a._depthStencilFormat = l, a._create(e, r), a.lock = !0, 
            a;
        }
        return (0, s.default)(n, [ {
            key: "getIsReady",
            value: function() {
                return !0;
            }
        }, {
            key: "_create",
            value: function(e, i) {
                var n = A.instance;
                this._frameBuffer = n.createFramebuffer(), L.bindTexture(n, this._glTextureType, this._glTexture);
                var r = this._getGLFormat();
                if (n.texImage2D(this._glTextureType, 0, r, e, i, 0, r, n.UNSIGNED_BYTE, null), 
                this._setGPUMemory(e * i * 4), n.bindFramebuffer(n.FRAMEBUFFER, this._frameBuffer), 
                n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, this._glTexture, 0), 
                this._depthStencilFormat !== t.RenderTextureDepthFormat.DEPTHSTENCIL_NONE) switch (this._depthStencilBuffer = n.createRenderbuffer(), 
                n.bindRenderbuffer(n.RENDERBUFFER, this._depthStencilBuffer), this._depthStencilFormat) {
                  case t.RenderTextureDepthFormat.DEPTH_16:
                    n.renderbufferStorage(n.RENDERBUFFER, n.DEPTH_COMPONENT16, e, i), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.RENDERBUFFER, this._depthStencilBuffer);
                    break;

                  case t.RenderTextureDepthFormat.STENCIL_8:
                    n.renderbufferStorage(n.RENDERBUFFER, n.STENCIL_INDEX8, e, i), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.STENCIL_ATTACHMENT, n.RENDERBUFFER, this._depthStencilBuffer);
                    break;

                  case t.RenderTextureDepthFormat.DEPTHSTENCIL_24_8:
                    n.renderbufferStorage(n.RENDERBUFFER, n.DEPTH_STENCIL, e, i), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.RENDERBUFFER, this._depthStencilBuffer);
                }
                n.bindFramebuffer(n.FRAMEBUFFER, null), n.bindRenderbuffer(n.RENDERBUFFER, null), 
                this._setWarpMode(n.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(n.TEXTURE_WRAP_T, this._wrapModeV), 
                this._setFilterMode(this._filterMode), this._setAnisotropy(this._anisoLevel), this._readyed = !0, 
                this._activeResource();
            }
        }, {
            key: "generateMipmap",
            value: function() {
                this._isPot(this.width) && this._isPot(this.height) ? (this._mipmap = !0, A.instance.generateMipmap(this._glTextureType), 
                this._setFilterMode(this._filterMode), this._setGPUMemory(this.width * this.height * 4 * (1 + 1 / 3))) : (this._mipmap = !1, 
                this._setGPUMemory(this.width * this.height * 4));
            }
        }, {
            key: "start",
            value: function() {
                var t = A.instance;
                A.instance.bindFramebuffer(t.FRAMEBUFFER, this._frameBuffer), this._lastRT = n._currentActive, 
                n._currentActive = this, this._readyed = !0, t.viewport(0, 0, this._width, this._height), 
                this._lastWidth = z.width, this._lastHeight = z.height, z.width = this._width, z.height = this._height, 
                H.activeShader = null;
            }
        }, {
            key: "end",
            value: function() {
                var t = A.instance;
                t.bindFramebuffer(t.FRAMEBUFFER, null), n._currentActive = null, this._readyed = !0;
            }
        }, {
            key: "restore",
            value: function() {
                var t = A.instance;
                this._lastRT != n._currentActive && (A.instance.bindFramebuffer(t.FRAMEBUFFER, this._lastRT ? this._lastRT._frameBuffer : null), 
                n._currentActive = this._lastRT), this._readyed = !0, t.viewport(0, 0, this._lastWidth, this._lastHeight), 
                z.width = this._lastWidth, z.height = this._lastHeight, H.activeShader = null;
            }
        }, {
            key: "clear",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, r = A.instance;
                r.clearColor(t, e, i, n);
                var a = r.COLOR_BUFFER_BIT;
                switch (this._depthStencilFormat) {
                  case r.DEPTH_COMPONENT16:
                    a |= r.DEPTH_BUFFER_BIT;
                    break;

                  case r.STENCIL_INDEX8:
                    a |= r.STENCIL_BUFFER_BIT;
                    break;

                  case r.DEPTH_STENCIL:
                    a |= r.DEPTH_BUFFER_BIT, a |= r.STENCIL_BUFFER_BIT;
                }
                r.clear(a);
            }
        }, {
            key: "getData",
            value: function(t, e, i, n) {
                if (u.Render.isConchApp && 2 == window.conchConfig.threadMode) throw "native 2 thread mode use getDataAsync";
                var r = A.instance;
                if (r.bindFramebuffer(r.FRAMEBUFFER, this._frameBuffer), r.checkFramebufferStatus(r.FRAMEBUFFER) !== r.FRAMEBUFFER_COMPLETE) return r.bindFramebuffer(r.FRAMEBUFFER, null), 
                null;
                var a = new Uint8Array(this._width * this._height * 4), s = this._getGLFormat();
                return r.readPixels(t, e, i, n, s, r.UNSIGNED_BYTE, a), r.bindFramebuffer(r.FRAMEBUFFER, null), 
                a;
            }
        }, {
            key: "getDataAsync",
            value: function(t, e, i, n, r) {
                var a = A.instance;
                a.bindFramebuffer(a.FRAMEBUFFER, this._frameBuffer), a.readPixelsAsync(t, e, i, n, a.RGBA, a.UNSIGNED_BYTE, function(t) {
                    r(new Uint8Array(t));
                }), a.bindFramebuffer(a.FRAMEBUFFER, null);
            }
        }, {
            key: "recycle",
            value: function() {}
        }, {
            key: "_disposeResource",
            value: function() {
                if (this._frameBuffer) {
                    var t = A.instance;
                    t.deleteTexture(this._glTexture), t.deleteFramebuffer(this._frameBuffer), t.deleteRenderbuffer(this._depthStencilBuffer), 
                    this._glTexture = null, this._frameBuffer = null, this._depthStencilBuffer = null, 
                    this._setGPUMemory(0);
                }
            }
        }, {
            key: "depthStencilFormat",
            get: function() {
                return this._depthStencilFormat;
            }
        }, {
            key: "defaulteTexture",
            get: function() {
                return X.grayTexture;
            }
        }, {
            key: "sourceWidth",
            get: function() {
                return this._width;
            }
        }, {
            key: "sourceHeight",
            get: function() {
                return this._height;
            }
        }, {
            key: "offsetX",
            get: function() {
                return 0;
            }
        }, {
            key: "offsetY",
            get: function() {
                return 0;
            }
        } ], [ {
            key: "pushRT",
            value: function() {
                n.rtStack.push({
                    rt: n._currentActive,
                    w: z.width,
                    h: z.height
                });
            }
        }, {
            key: "popRT",
            value: function() {
                var t = A.instance, e = n.rtStack.pop();
                e && (n._currentActive != e.rt && (A.instance.bindFramebuffer(t.FRAMEBUFFER, e.rt ? e.rt._frameBuffer : null), 
                n._currentActive = e.rt), t.viewport(0, 0, e.w, e.h), z.width = e.w, z.height = e.h);
            }
        }, {
            key: "currentActive",
            get: function() {
                return n._currentActive;
            }
        } ]), n;
    }(G);
    K.rtStack = [], K.defuv = [ 0, 0, 1, 0, 1, 1, 0, 1 ], K.flipyuv = [ 0, 1, 1, 1, 1, 0, 0, 0 ];
    var j = function() {
        function e() {
            (0, o.default)(this, e);
        }
        return (0, s.default)(e, null, [ {
            key: "getRT",
            value: function(e, i) {
                return i |= 0, (e |= 0) >= 1e4 && console.error("getRT error! w too big"), new K(e, i, t.RenderTextureFormat.R8G8B8A8, -1);
            }
        }, {
            key: "releaseRT",
            value: function(t) {
                t.destroy();
            }
        } ]), e;
    }();
    j.dict = {};
    var q = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "_init_",
            value: function(e) {
                t.fns = [ t.BlendNormal, t.BlendAdd, t.BlendMultiply, t.BlendScreen, t.BlendOverlay, t.BlendLight, t.BlendMask, t.BlendDestinationOut, t.BlendAddOld ], 
                t.targetFns = [ t.BlendNormalTarget, t.BlendAddTarget, t.BlendMultiplyTarget, t.BlendScreenTarget, t.BlendOverlayTarget, t.BlendLightTarget, t.BlendMask, t.BlendDestinationOut, t.BlendAddTargetOld ];
            }
        }, {
            key: "BlendNormal",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE_MINUS_SRC_ALPHA, !0);
            }
        }, {
            key: "BlendAddOld",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.DST_ALPHA, !0);
            }
        }, {
            key: "BlendAdd",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendMultiply",
            value: function(t) {
                L.setBlendFunc(t, t.DST_COLOR, t.ONE_MINUS_SRC_ALPHA, !0);
            }
        }, {
            key: "BlendScreen",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendOverlay",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE_MINUS_SRC_COLOR, !0);
            }
        }, {
            key: "BlendLight",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendNormalTarget",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE_MINUS_SRC_ALPHA, !0);
            }
        }, {
            key: "BlendAddTargetOld",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.DST_ALPHA, !0);
            }
        }, {
            key: "BlendAddTarget",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendMultiplyTarget",
            value: function(t) {
                L.setBlendFunc(t, t.DST_COLOR, t.ONE_MINUS_SRC_ALPHA, !0);
            }
        }, {
            key: "BlendScreenTarget",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendOverlayTarget",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE_MINUS_SRC_COLOR, !0);
            }
        }, {
            key: "BlendLightTarget",
            value: function(t) {
                L.setBlendFunc(t, t.ONE, t.ONE, !0);
            }
        }, {
            key: "BlendMask",
            value: function(t) {
                L.setBlendFunc(t, t.ZERO, t.SRC_ALPHA, !0);
            }
        }, {
            key: "BlendDestinationOut",
            value: function(t) {
                L.setBlendFunc(t, t.ZERO, t.ZERO, !0);
            }
        } ]), t;
    }();
    q.activeBlendFunction = null, q.NAMES = [ "normal", "add", "multiply", "screen", "overlay", "light", "mask", "destination-out", "add_old" ], 
    q.TOINT = {
        normal: 0,
        add: 1,
        multiply: 2,
        screen: 3,
        overlay: 4,
        light: 5,
        mask: 6,
        "destination-out": 7,
        lighter: 1,
        lighter_old: 8,
        add_old: 8
    }, q.NORMAL = "normal", q.MASK = "mask", q.LIGHTER = "lighter";
    var Z = function() {
        function t(e, i, n) {
            (0, o.default)(this, t), this._value = 0, this._name2int = e, this._int2name = i, 
            this._int2nameMap = n;
        }
        return (0, s.default)(t, [ {
            key: "add",
            value: function(t) {
                return this._value |= "string" == typeof t ? this._name2int[t] : t, this._value;
            }
        }, {
            key: "addInt",
            value: function(t) {
                return this._value |= t, this._value;
            }
        }, {
            key: "remove",
            value: function(t) {
                return this._value &= "string" == typeof t ? ~this._name2int[t] : ~t, this._value;
            }
        }, {
            key: "isDefine",
            value: function(t) {
                return (this._value & t) === t;
            }
        }, {
            key: "getValue",
            value: function() {
                return this._value;
            }
        }, {
            key: "setValue",
            value: function(t) {
                this._value = t;
            }
        }, {
            key: "toNameDic",
            value: function() {
                return this._int2nameMap[this._value] || t._toText(this._value, this._int2name, this._int2nameMap);
            }
        } ], [ {
            key: "_reg",
            value: function(t, e, i, n) {
                i[t] = e, n[e] = t;
            }
        }, {
            key: "_toText",
            value: function(t, e, i) {
                var n = i[t];
                if (n) return n;
                for (var r = {}, a = 1, s = 0; s < 32 && !((a = 1 << s) > t); s++) if (t & a) {
                    var o = e[a];
                    o && (r[o] = "");
                }
                return i[t] = r, r;
            }
        }, {
            key: "_toInt",
            value: function(t, e) {
                for (var i = t.split("."), n = 0, r = 0, a = i.length; r < a; r++) {
                    var s = e[i[r]];
                    if (!s) throw new Error("Defines to int err:" + t + "/" + i[r]);
                    n |= s;
                }
                return n;
            }
        } ]), t;
    }(), Q = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.call(this, i.__name2int, i.__int2name, i.__int2nameMap);
        }
        return (0, s.default)(i, null, [ {
            key: "__init__",
            value: function() {
                i.reg("TEXTURE2D", i.TEXTURE2D), i.reg("PRIMITIVE", i.PRIMITIVE), i.reg("GLOW_FILTER", i.FILTERGLOW), 
                i.reg("BLUR_FILTER", i.FILTERBLUR), i.reg("COLOR_FILTER", i.FILTERCOLOR), i.reg("COLOR_ADD", i.COLORADD), 
                i.reg("WORLDMAT", i.WORLDMAT), i.reg("FILLTEXTURE", i.FILLTEXTURE), i.reg("MVP3D", i.MVP3D);
            }
        }, {
            key: "reg",
            value: function(t, e) {
                this._reg(t, e, i.__name2int, i.__int2name);
            }
        }, {
            key: "toText",
            value: function(t, e, i) {
                return this._toText(t, e, i);
            }
        }, {
            key: "toInt",
            value: function(t) {
                return this._toInt(t, i.__name2int);
            }
        } ]), i;
    }(Z);
    Q.TEXTURE2D = 1, Q.PRIMITIVE = 4, Q.FILTERGLOW = 8, Q.FILTERBLUR = 16, Q.FILTERCOLOR = 32, 
    Q.COLORADD = 64, Q.WORLDMAT = 128, Q.FILLTEXTURE = 256, Q.SKINMESH = 512, Q.MVP3D = 2048, 
    Q.NOOPTMASK = Q.FILTERGLOW | Q.FILTERBLUR | Q.FILTERCOLOR | Q.FILLTEXTURE, Q.__name2int = {}, 
    Q.__int2name = [], Q.__int2nameMap = [];
    var $ = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "show",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                t._StatRender.show(e, i);
            }
        }, {
            key: "enable",
            value: function() {
                t._StatRender.enable();
            }
        }, {
            key: "hide",
            value: function() {
                t._StatRender.hide();
            }
        }, {
            key: "clear",
            value: function() {
                t.trianglesFaces = t.renderBatches = t.savedRenderBatches = t.shaderCall = t.spriteRenderUseCacheCount = t.frustumCulling = t.octreeNodeCulling = t.canvasNormal = t.canvasBitmap = t.canvasReCache = 0;
            }
        }, {
            key: "onclick",
            set: function(e) {
                t._StatRender.set_onclick(e);
            }
        } ]), t;
    }();
    $.FPS = 0, $.loopCount = 0, $.shaderCall = 0, $.renderBatches = 0, $.savedRenderBatches = 0, 
    $.trianglesFaces = 0, $.spriteCount = 0, $.spriteRenderUseCacheCount = 0, $.frustumCulling = 0, 
    $.octreeNodeCulling = 0, $.canvasNormal = 0, $.canvasBitmap = 0, $.canvasReCache = 0, 
    $.renderSlow = !1, $._fpsData = [], $._timer = 0, $._count = 0, $._StatRender = null;
    var J = function() {
        function t() {
            (0, o.default)(this, t), this._strsToID = {}, this._idToStrs = [], this._length = 0;
        }
        return (0, s.default)(t, [ {
            key: "add",
            value: function(t) {
                var e = this._strsToID[t];
                return null != e ? e : (this._idToStrs[this._length] = t, this._strsToID[t] = this._length++);
            }
        }, {
            key: "getID",
            value: function(t) {
                var e = this._strsToID[t];
                return null == e ? -1 : e;
            }
        }, {
            key: "getName",
            value: function(t) {
                var e = this._idToStrs[t];
                return null == e ? void 0 : e;
            }
        } ]), t;
    }(), tt = function(t) {
        (0, a.default)(r, t);
        var e = l(r);
        function r(t, a) {
            var s, l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, h = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, u = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
            if ((0, o.default)(this, r), (s = e.call(this))._attribInfo = null, s.customCompile = !1, 
            s._curActTexIndex = 0, s.tag = {}, s._program = null, s._params = null, s._paramsMap = {}, 
            !t || !a) throw "Shader Error";
            return s._attribInfo = u, s._id = ++r._count, s._vs = t, s._ps = a, s._nameMap = h || {}, 
            null != l && (r.sharders[l] = (0, i.default)(s)), s.recreateResource(), s.lock = !0, 
            (0, n.default)(s);
        }
        return (0, s.default)(r, [ {
            key: "recreateResource",
            value: function() {
                this._compile(), this._setGPUMemory(0);
            }
        }, {
            key: "_disposeResource",
            value: function() {
                L.mainContext.deleteShader(this._vshader), L.mainContext.deleteShader(this._pshader), 
                L.mainContext.deleteProgram(this._program), this._vshader = this._pshader = this._program = null, 
                this._params = null, this._paramsMap = {}, this._setGPUMemory(0), this._curActTexIndex = 0;
            }
        }, {
            key: "_compile",
            value: function() {
                if (this._vs && this._ps && !this._params) {
                    var t;
                    this._reCompile = !0, this._params = [], this.customCompile && (t = u.ShaderCompile.preGetParams(this._vs, this._ps));
                    var e, i, n, a = L.mainContext;
                    this._program = a.createProgram(), this._vshader = r._createShader(a, this._vs, a.VERTEX_SHADER), 
                    this._pshader = r._createShader(a, this._ps, a.FRAGMENT_SHADER), a.attachShader(this._program, this._vshader), 
                    a.attachShader(this._program, this._pshader);
                    var s = this._attribInfo ? this._attribInfo.length : 0;
                    for (i = 0; i < s; i += 2) a.bindAttribLocation(this._program, this._attribInfo[i + 1], this._attribInfo[i]);
                    if (a.linkProgram(this._program), !this.customCompile && !a.getProgramParameter(this._program, a.LINK_STATUS)) throw a.getProgramInfoLog(this._program);
                    var o = this.customCompile ? t.uniforms.length : a.getProgramParameter(this._program, a.ACTIVE_UNIFORMS);
                    for (i = 0; i < o; i++) {
                        var l = this.customCompile ? t.uniforms[i] : a.getActiveUniform(this._program, i);
                        (e = {
                            vartype: "uniform",
                            glfun: null,
                            ivartype: 1,
                            location: a.getUniformLocation(this._program, l.name),
                            name: l.name,
                            type: l.type,
                            isArray: !1,
                            isSame: !1,
                            preValue: null,
                            indexOfParams: 0
                        }).name.indexOf("[0]") > 0 && (e.name = e.name.substr(0, e.name.length - 3), e.isArray = !0, 
                        e.location = a.getUniformLocation(this._program, e.name)), this._params.push(e);
                    }
                    for (i = 0, n = this._params.length; i < n; i++) switch ((e = this._params[i]).indexOfParams = i, 
                    e.index = 1, e.value = [ e.location, null ], e.codename = e.name, e.name = this._nameMap[e.codename] ? this._nameMap[e.codename] : e.codename, 
                    this._paramsMap[e.name] = e, e._this = this, e.uploadedValue = [], e.type) {
                      case a.INT:
                        e.fun = e.isArray ? this._uniform1iv : this._uniform1i;
                        break;

                      case a.FLOAT:
                        e.fun = e.isArray ? this._uniform1fv : this._uniform1f;
                        break;

                      case a.FLOAT_VEC2:
                        e.fun = e.isArray ? this._uniform_vec2v : this._uniform_vec2;
                        break;

                      case a.FLOAT_VEC3:
                        e.fun = e.isArray ? this._uniform_vec3v : this._uniform_vec3;
                        break;

                      case a.FLOAT_VEC4:
                        e.fun = e.isArray ? this._uniform_vec4v : this._uniform_vec4;
                        break;

                      case a.SAMPLER_2D:
                        e.fun = this._uniform_sampler2D;
                        break;

                      case a.SAMPLER_CUBE:
                        e.fun = this._uniform_samplerCube;
                        break;

                      case a.FLOAT_MAT4:
                        e.glfun = a.uniformMatrix4fv, e.fun = this._uniformMatrix4fv;
                        break;

                      case a.BOOL:
                        e.fun = this._uniform1i;
                        break;

                      case a.FLOAT_MAT2:
                      case a.FLOAT_MAT3:
                      default:
                        throw new Error("compile shader err!");
                    }
                }
            }
        }, {
            key: "getUniform",
            value: function(t) {
                return this._paramsMap[t];
            }
        }, {
            key: "_uniform1f",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e ? (L.mainContext.uniform1f(t.location, i[0] = e), 1) : 0;
            }
        }, {
            key: "_uniform1fv",
            value: function(t, e) {
                if (e.length < 4) {
                    var i = t.uploadedValue;
                    return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] || i[3] !== e[3] ? (L.mainContext.uniform1fv(t.location, e), 
                    i[0] = e[0], i[1] = e[1], i[2] = e[2], i[3] = e[3], 1) : 0;
                }
                return L.mainContext.uniform1fv(t.location, e), 1;
            }
        }, {
            key: "_uniform_vec2",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] ? (L.mainContext.uniform2f(t.location, i[0] = e[0], i[1] = e[1]), 
                1) : 0;
            }
        }, {
            key: "_uniform_vec2v",
            value: function(t, e) {
                if (e.length < 2) {
                    var i = t.uploadedValue;
                    return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] || i[3] !== e[3] ? (L.mainContext.uniform2fv(t.location, e), 
                    i[0] = e[0], i[1] = e[1], i[2] = e[2], i[3] = e[3], 1) : 0;
                }
                return L.mainContext.uniform2fv(t.location, e), 1;
            }
        }, {
            key: "_uniform_vec3",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] ? (L.mainContext.uniform3f(t.location, i[0] = e[0], i[1] = e[1], i[2] = e[2]), 
                1) : 0;
            }
        }, {
            key: "_uniform_vec3v",
            value: function(t, e) {
                return L.mainContext.uniform3fv(t.location, e), 1;
            }
        }, {
            key: "_uniform_vec4",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] || i[3] !== e[3] ? (L.mainContext.uniform4f(t.location, i[0] = e[0], i[1] = e[1], i[2] = e[2], i[3] = e[3]), 
                1) : 0;
            }
        }, {
            key: "_uniform_vec4v",
            value: function(t, e) {
                return L.mainContext.uniform4fv(t.location, e), 1;
            }
        }, {
            key: "_uniformMatrix2fv",
            value: function(t, e) {
                return L.mainContext.uniformMatrix2fv(t.location, !1, e), 1;
            }
        }, {
            key: "_uniformMatrix3fv",
            value: function(t, e) {
                return L.mainContext.uniformMatrix3fv(t.location, !1, e), 1;
            }
        }, {
            key: "_uniformMatrix4fv",
            value: function(t, e) {
                return L.mainContext.uniformMatrix4fv(t.location, !1, e), 1;
            }
        }, {
            key: "_uniform1i",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e ? (L.mainContext.uniform1i(t.location, i[0] = e), 1) : 0;
            }
        }, {
            key: "_uniform1iv",
            value: function(t, e) {
                return L.mainContext.uniform1iv(t.location, e), 1;
            }
        }, {
            key: "_uniform_ivec2",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] ? (L.mainContext.uniform2i(t.location, i[0] = e[0], i[1] = e[1]), 
                1) : 0;
            }
        }, {
            key: "_uniform_ivec2v",
            value: function(t, e) {
                return L.mainContext.uniform2iv(t.location, e), 1;
            }
        }, {
            key: "_uniform_vec3i",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] ? (L.mainContext.uniform3i(t.location, i[0] = e[0], i[1] = e[1], i[2] = e[2]), 
                1) : 0;
            }
        }, {
            key: "_uniform_vec3vi",
            value: function(t, e) {
                return L.mainContext.uniform3iv(t.location, e), 1;
            }
        }, {
            key: "_uniform_vec4i",
            value: function(t, e) {
                var i = t.uploadedValue;
                return i[0] !== e[0] || i[1] !== e[1] || i[2] !== e[2] || i[3] !== e[3] ? (L.mainContext.uniform4i(t.location, i[0] = e[0], i[1] = e[1], i[2] = e[2], i[3] = e[3]), 
                1) : 0;
            }
        }, {
            key: "_uniform_vec4vi",
            value: function(t, e) {
                return L.mainContext.uniform4iv(t.location, e), 1;
            }
        }, {
            key: "_uniform_sampler2D",
            value: function(t, e) {
                var i = L.mainContext, n = t.uploadedValue;
                return null == n[0] ? (n[0] = this._curActTexIndex, i.uniform1i(t.location, this._curActTexIndex), 
                L.activeTexture(i, i.TEXTURE0 + this._curActTexIndex), L.bindTexture(i, i.TEXTURE_2D, e), 
                this._curActTexIndex++, 1) : (L.activeTexture(i, i.TEXTURE0 + n[0]), L.bindTexture(i, i.TEXTURE_2D, e), 
                0);
            }
        }, {
            key: "_uniform_samplerCube",
            value: function(t, e) {
                var i = L.mainContext, n = t.uploadedValue;
                return null == n[0] ? (n[0] = this._curActTexIndex, i.uniform1i(t.location, this._curActTexIndex), 
                L.activeTexture(i, i.TEXTURE0 + this._curActTexIndex), L.bindTexture(i, i.TEXTURE_CUBE_MAP, e), 
                this._curActTexIndex++, 1) : (L.activeTexture(i, i.TEXTURE0 + n[0]), L.bindTexture(i, i.TEXTURE_CUBE_MAP, e), 
                0);
            }
        }, {
            key: "_noSetValue",
            value: function(t) {
                console.log("no....:" + t.name);
            }
        }, {
            key: "uploadOne",
            value: function(t, e) {
                L.useProgram(L.mainContext, this._program);
                var i = this._paramsMap[t];
                i.fun.call(this, i, e);
            }
        }, {
            key: "uploadTexture2D",
            value: function(t) {
                var e = L;
                e._activeTextures[0] !== t && (e.bindTexture(L.mainContext, A.instance.TEXTURE_2D, t), 
                e._activeTextures[0] = t);
            }
        }, {
            key: "upload",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                H.activeShader = H.bindShader = this;
                var i = L.mainContext;
                L.useProgram(i, this._program), this._reCompile ? (e = this._params, this._reCompile = !1) : e = e || this._params;
                for (var n, r, a = e.length, s = 0, o = 0; o < a; o++) null !== (r = t[(n = e[o]).name]) && (s += n.fun.call(this, n, r));
                $.shaderCall += s;
            }
        }, {
            key: "uploadArray",
            value: function(t, e, i) {
                H.activeShader = this, H.bindShader = this, L.useProgram(L.mainContext, this._program), 
                this._params;
                for (var n, r, a = 0, s = e - 2; s >= 0; s -= 2) (r = this._paramsMap[t[s]]) && null != (n = t[s + 1]) && (i && i[r.name] && i[r.name].bind(), 
                a += r.fun.call(this, r, n));
                $.shaderCall += a;
            }
        }, {
            key: "getParams",
            value: function() {
                return this._params;
            }
        }, {
            key: "setAttributesLocation",
            value: function(t) {
                this._attribInfo = t;
            }
        } ], [ {
            key: "getShader",
            value: function(t) {
                return r.sharders[t];
            }
        }, {
            key: "create",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                return new r(t, e, i, n, a);
            }
        }, {
            key: "withCompile",
            value: function(t, e, i, n) {
                if (i && r.sharders[i]) return r.sharders[i];
                var a = r._preCompileShader[r.SHADERNAME2ID * t];
                if (!a) throw new Error("withCompile shader err!" + t);
                return a.createShader(e, i, n, null);
            }
        }, {
            key: "withCompile2D",
            value: function(t, e, i, n, a) {
                var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null;
                if (n && r.sharders[n]) return r.sharders[n];
                var o = r._preCompileShader[r.SHADERNAME2ID * t + e];
                if (!o) throw new Error("withCompile shader err!" + t + " " + e);
                return o.createShader(i, n, a, s);
            }
        }, {
            key: "addInclude",
            value: function(t, e) {
                u.ShaderCompile.addInclude(t, e);
            }
        }, {
            key: "preCompile",
            value: function(t, e, i, n) {
                var a = r.SHADERNAME2ID * t;
                r._preCompileShader[a] = new u.ShaderCompile(e, i, n);
            }
        }, {
            key: "preCompile2D",
            value: function(t, e, i, n, a) {
                var s = r.SHADERNAME2ID * t + e;
                r._preCompileShader[s] = new u.ShaderCompile(i, n, a);
            }
        }, {
            key: "_createShader",
            value: function(t, e, i) {
                var n = t.createShader(i);
                return t.shaderSource(n, e), t.compileShader(n), t.getShaderParameter(n, t.COMPILE_STATUS) ? n : (console.log(t.getShaderInfoLog(n)), 
                null);
            }
        } ]), r;
    }(H);
    tt._count = 0, tt._preCompileShader = {}, tt.SHADERNAME2ID = 2e-4, tt.nameKey = new J(), 
    tt.sharders = new Array(32);
    var et = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n(t, e) {
            var r, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
            return (0, o.default)(this, n), (r = i.call(this, t, e, a, s, l))._params2dQuick2 = null, 
            r._shaderValueWidth = 0, r._shaderValueHeight = 0, r;
        }
        return (0, s.default)(n, [ {
            key: "_disposeResource",
            value: function() {
                (0, e.default)((0, r.default)(n.prototype), "_disposeResource", this).call(this), 
                this._params2dQuick2 = null;
            }
        }, {
            key: "upload2dQuick2",
            value: function(t) {
                this.upload(t, this._params2dQuick2 || this._make2dQuick2());
            }
        }, {
            key: "_make2dQuick2",
            value: function() {
                if (!this._params2dQuick2) {
                    this._params2dQuick2 = [];
                    for (var t, e = this._params, i = 0, n = e.length; i < n; i++) "size" !== (t = e[i]).name && this._params2dQuick2.push(t);
                }
                return this._params2dQuick2;
            }
        } ], [ {
            key: "create",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                return new n(t, e, i, r, a);
            }
        } ]), n;
    }(tt), it = function() {
        function t(e, i) {
            (0, o.default)(this, t), this.defines = new Q(), this.size = [ 0, 0 ], this.alpha = 1, 
            this.ALPHA = 1, this.subID = 0, this.ref = 1, this._cacheID = 0, this.clipMatDir = [ u.Context._MAXSIZE, 0, 0, u.Context._MAXSIZE ], 
            this.clipMatPos = [ 0, 0 ], this.clipOff = [ 0, 0 ], this.mainID = e, this.subID = i, 
            this.textureHost = null, this.texture = null, this.color = null, this.colorAdd = null, 
            this.u_mmat2 = null, this._cacheID = e | i, this._inClassCache = t._cache[this._cacheID], 
            e > 0 && !this._inClassCache && (this._inClassCache = t._cache[this._cacheID] = [], 
            this._inClassCache._length = 0), this.clear();
        }
        return (0, s.default)(t, [ {
            key: "setValue",
            value: function(t) {}
        }, {
            key: "_ShaderWithCompile",
            value: function() {
                return tt.withCompile2D(0, this.mainID, this.defines.toNameDic(), this.mainID | this.defines._value, et.create, this._attribLocation);
            }
        }, {
            key: "upload",
            value: function() {
                var t = z;
                z.worldMatrix4 === z.TEMPMAT4_ARRAY || this.defines.addInt(Q.WORLDMAT), this.mmat = t.worldMatrix4, 
                z.matWVP && (this.defines.addInt(Q.MVP3D), this.u_MvpMatrix = z.matWVP.elements);
                var e = tt.sharders[this.mainID | this.defines._value] || this._ShaderWithCompile();
                e._shaderValueWidth !== t.width || e._shaderValueHeight !== t.height ? (this.size[0] = t.width, 
                this.size[1] = t.height, e._shaderValueWidth = t.width, e._shaderValueHeight = t.height, 
                e.upload(this, null)) : e.upload(this, e._params2dQuick2 || e._make2dQuick2());
            }
        }, {
            key: "setFilters",
            value: function(t) {
                if (this.filters = t, t) for (var e, i = t.length, n = 0; n < i; n++) (e = t[n]) && (this.defines.add(e.type), 
                e.action.setValue(this));
            }
        }, {
            key: "clear",
            value: function() {
                this.defines._value = this.subID, this.clipOff[0] = 0;
            }
        }, {
            key: "release",
            value: function() {
                --this.ref < 1 && (this._inClassCache && (this._inClassCache[this._inClassCache._length++] = this), 
                this.clear(), this.filters = null, this.ref = 1, this.clipOff[0] = 0);
            }
        } ], [ {
            key: "_initone",
            value: function(e, i) {
                t._typeClass[e] = i, t._cache[e] = [], t._cache[e]._length = 0;
            }
        }, {
            key: "__init__",
            value: function() {}
        }, {
            key: "create",
            value: function(e, i) {
                var n = t._cache[e | i];
                return n._length ? n[--n._length] : new t._typeClass[e | i](i);
            }
        } ]), t;
    }();
    it._cache = [], it._typeClass = [], it.TEMPMAT4_ARRAY = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];
    var nt = function() {
        function t() {
            (0, o.default)(this, t), this.clear();
        }
        return (0, s.default)(t, [ {
            key: "clear",
            value: function() {
                this.submitType = -1, this.blendShader = this.other = 0;
            }
        }, {
            key: "copyFrom",
            value: function(t) {
                this.other = t.other, this.blendShader = t.blendShader, this.submitType = t.submitType;
            }
        }, {
            key: "copyFrom2",
            value: function(t, e, i) {
                this.other = i, this.submitType = e;
            }
        }, {
            key: "equal3_2",
            value: function(t, e, i) {
                return this.submitType === e && this.other === i && this.blendShader === t.blendShader;
            }
        }, {
            key: "equal4_2",
            value: function(t, e, i) {
                return this.submitType === e && this.other === i && this.blendShader === t.blendShader;
            }
        }, {
            key: "equal_3",
            value: function(t) {
                return this.submitType === t.submitType && this.blendShader === t.blendShader;
            }
        }, {
            key: "equal",
            value: function(t) {
                return this.other === t.other && this.submitType === t.submitType && this.blendShader === t.blendShader;
            }
        } ]), t;
    }(), rt = function() {
        function t() {
            (0, o.default)(this, t), this._ref = 1, this._key = new nt();
        }
        return (0, s.default)(t, [ {
            key: "renderSubmit",
            value: function() {
                return this.fun.apply(this._this, this.args), 1;
            }
        }, {
            key: "getRenderType",
            value: function() {
                return 0;
            }
        }, {
            key: "releaseRender",
            value: function() {
                if (--this._ref < 1) {
                    var e = t.POOL;
                    e[e._length++] = this;
                }
            }
        } ], [ {
            key: "create",
            value: function(e, i, n) {
                var r = t.POOL._length ? t.POOL[--t.POOL._length] : new t();
                return r.fun = i, r.args = e, r._this = n, r._ref = 1, r._key.clear(), r;
            }
        } ]), t;
    }();
    rt.POOL = [], rt.POOL._length = 0;
    var at = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "type",
            get: function() {
                return -1;
            }
        } ]), t;
    }();
    at.BLUR = 16, at.COLOR = 32, at.GLOW = 8, at._filter = function(t, e, i, n) {
        var r = e, a = this._next;
        if (a) {
            var s = t.filters, o = s.length;
            if (1 == o && s[0].type == at.COLOR) return e.save(), e.setColorFilter(s[0]), a._fun.call(a, t, e, i, n), 
            void e.restore();
            var l, h = it.create(Q.TEXTURE2D, 0), u = E.TEMP, c = r._curMat, _ = k.create();
            c.copyTo(_);
            var d = 0, f = 0, v = null, p = t._cacheStyle.filterCache || null;
            if (p && 0 == t.getRepaint()) {
                if (!!t._cacheStyle.hasGlowFilter && (d = 50, f = 25), (l = t.getBounds()).width <= 0 || l.height <= 0) return;
                l.width += d, l.height += d, u.x = l.x * _.a + l.y * _.c, u.y = l.y * _.d + l.x * _.b, 
                l.x = u.x, l.y = u.y, u.x = l.width * _.a + l.height * _.c, u.y = l.height * _.d + l.width * _.b, 
                l.width = u.x, l.height = u.y;
            } else {
                t._isHaveGlowFilter() && (d = 50, f = 25), (l = new R()).copyFrom(t.getSelfBounds()), 
                l.x += t.x, l.y += t.y, l.x -= t.pivotX + 4, l.y -= t.pivotY + 4;
                var y = l.x, g = l.y;
                if (l.width += d + 8, l.height += d + 8, u.x = l.x * _.a + l.y * _.c, u.y = l.y * _.d + l.x * _.b, 
                l.x = u.x, l.y = u.y, u.x = l.width * _.a + l.height * _.c, u.y = l.height * _.d + l.width * _.b, 
                l.width = u.x, l.height = u.y, l.width <= 0 || l.height <= 0) return;
                p && j.releaseRT(p), v = j.getRT(l.width, l.height);
                var m = p = j.getRT(l.width, l.height);
                t._getCacheStyle().filterCache = p, r.pushRT(), r.useRT(v);
                var T = t.x - y + f, x = t.y - g + f;
                a._fun.call(a, t, e, T, x), r.useRT(m);
                for (var A = 0; A < o; A++) {
                    0 != A && (r.useRT(v), r.drawTarget(m, 0, 0, l.width, l.height, k.TEMP.identity(), h, null, q.TOINT.overlay), 
                    r.useRT(m));
                    var C = s[A];
                    switch (C.type) {
                      case at.BLUR:
                      case at.GLOW:
                        C._glRender && C._glRender.render(v, e, l.width, l.height, C);
                        break;

                      case at.COLOR:
                        r.setColorFilter(C), r.drawTarget(v, 0, 0, l.width, l.height, k.EMPTY.identity(), it.create(Q.TEXTURE2D, 0)), 
                        r.setColorFilter(null);
                    }
                }
                r.popRT();
            }
            if (i = i - f - t.x, n = n - f - t.y, u.setTo(i, n), _.transformPoint(u), i = u.x + l.x, 
            n = u.y + l.y, r._drawRenderTexture(p, i, n, l.width, l.height, k.TEMP.identity(), 1, K.defuv), 
            v) {
                var b = rt.create([ v ], function(t) {
                    t.destroy();
                }, this);
                v = null, e.addRenderObject(b);
            }
            _.destroy();
        }
    };
    var st = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "toRadian",
            value: function(e) {
                return e * t._pi2;
            }
        }, {
            key: "toAngle",
            value: function(e) {
                return e * t._pi;
            }
        }, {
            key: "toHexColor",
            value: function(t) {
                if (t < 0 || isNaN(t)) return null;
                for (var e = t.toString(16); e.length < 6; ) e = "0" + e;
                return "#" + e;
            }
        }, {
            key: "getGID",
            value: function() {
                return t._gid++;
            }
        }, {
            key: "concatArray",
            value: function(t, e) {
                if (!e) return t;
                if (!t) return e;
                var i, n = e.length;
                for (i = 0; i < n; i++) t.push(e[i]);
                return t;
            }
        }, {
            key: "clearArray",
            value: function(t) {
                return t ? (t.length = 0, t) : t;
            }
        }, {
            key: "copyArray",
            value: function(t, e) {
                if (t || (t = []), !e) return t;
                t.length = e.length;
                var i, n = e.length;
                for (i = 0; i < n; i++) t[i] = e[i];
                return t;
            }
        }, {
            key: "getGlobalRecByPoints",
            value: function(t, e, i, n, r) {
                var a, s;
                a = E.create().setTo(e, i), a = t.localToGlobal(a), s = E.create().setTo(n, r), 
                s = t.localToGlobal(s);
                var o = R._getWrapRec([ a.x, a.y, s.x, s.y ]);
                return a.recover(), s.recover(), o;
            }
        }, {
            key: "getGlobalPosAndScale",
            value: function(e) {
                return t.getGlobalRecByPoints(e, 0, 0, 1, 1);
            }
        }, {
            key: "bind",
            value: function(t, e) {
                return t.bind(e);
            }
        }, {
            key: "updateOrder",
            value: function(t) {
                if (!t || t.length < 2) return !1;
                for (var e, i, n, r = 1, a = t.length; r < a; ) {
                    for (n = t[e = r], i = t[e]._zOrder; --e > -1 && t[e]._zOrder > i; ) t[e + 1] = t[e];
                    t[e + 1] = n, r++;
                }
                return !0;
            }
        }, {
            key: "transPointList",
            value: function(t, e, i) {
                var n, r = t.length;
                for (n = 0; n < r; n += 2) t[n] += e, t[n + 1] += i;
            }
        }, {
            key: "parseInt",
            value: function(t) {
                function e(e) {
                    return t.apply(this, arguments);
                }
                return e.toString = function() {
                    return t.toString();
                }, e;
            }(function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = parseInt(t, e);
                return isNaN(i) ? 0 : i;
            })
        }, {
            key: "getFileExtension",
            value: function(e) {
                t._extReg.lastIndex = e.lastIndexOf(".");
                var i = t._extReg.exec(e);
                return i && i.length > 1 ? i[1].toLowerCase() : null;
            }
        }, {
            key: "getFilecompatibleExtension",
            value: function(t) {
                var e = t.split("."), i = e.length;
                return e.length > 2 ? e[i - 2] + "." + e[i - 1] : null;
            }
        }, {
            key: "getTransformRelativeToWindow",
            value: function(e, i, n) {
                var r = t.gStage, a = t.getGlobalPosAndScale(e), s = r._canvasTransform.clone(), o = s.tx, l = s.ty;
                s.rotate(-Math.PI / 180 * r.canvasDegree), s.scale(r.clientScaleX, r.clientScaleY);
                var h, u, c, _, d = r.canvasDegree % 180 != 0;
                return d ? (h = n + a.y, u = i + a.x, h *= s.d, u *= s.a, 90 == r.canvasDegree ? (h = o - h, 
                u += l) : (h += o, u = l - u)) : (h = i + a.x, u = n + a.y, h *= s.a, u *= s.d, 
                h += o, u += l), u += r._safariOffsetY, d ? (c = s.d * a.height, _ = s.a * a.width) : (c = s.a * a.width, 
                _ = s.d * a.height), {
                    x: h,
                    y: u,
                    scaleX: c,
                    scaleY: _
                };
            }
        }, {
            key: "fitDOMElementInArea",
            value: function(e, i, n, r, a, s) {
                e._fitLayaAirInitialized || (e._fitLayaAirInitialized = !0, e.style.transformOrigin = e.style.webKittransformOrigin = "left top", 
                e.style.position = "absolute");
                var o = t.getTransformRelativeToWindow(i, n, r);
                e.style.transform = e.style.webkitTransform = "scale(" + o.scaleX + "," + o.scaleY + ") rotate(" + t.gStage.canvasDegree + "deg)", 
                e.style.width = a + "px", e.style.height = s + "px", e.style.left = o.x + "px", 
                e.style.top = o.y + "px";
            }
        }, {
            key: "isOkTextureList",
            value: function(t) {
                if (!t) return !1;
                var e, i, n = t.length;
                for (e = 0; e < n; e++) if (!(i = t[e]) || !i._getSource()) return !1;
                return !0;
            }
        }, {
            key: "isOKCmdList",
            value: function(t) {
                if (!t) return !1;
                var e, i = t.length;
                for (e = 0; e < i; e++) t[e];
                return !0;
            }
        }, {
            key: "getQueryString",
            value: function(t) {
                if (u.Browser.onMiniGame) return null;
                if (!window.location || !window.location.search) return null;
                var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)"), i = window.location.search.substr(1).match(e);
                return null != i ? unescape(i[2]) : null;
            }
        } ]), t;
    }();
    st.gStage = null, st._gid = 1, st._pi = 180 / Math.PI, st._pi2 = Math.PI / 180, 
    st._extReg = /\.(\w+)\??/g, st.parseXMLFromString = function(t) {
        var e;
        if (t = t.replace(/>\s+</g, "><"), (e = new DOMParser().parseFromString(t, "text/xml")).firstChild.textContent.indexOf("This page contains the following errors") > -1) throw new Error(e.firstChild.firstChild.textContent);
        return e;
    };
    var ot = function() {
        function t(e) {
            if ((0, o.default)(this, t), this.arrColor = [], null == e || "none" == e) return this.strColor = "#00000000", 
            this.numColor = 0, void (this.arrColor = [ 0, 0, 0, 0 ]);
            var i, n, r;
            if ("string" == typeof e) if (e.indexOf("rgba(") >= 0 || e.indexOf("rgb(") >= 0) {
                var a, s, l = e;
                for (a = l.indexOf("("), s = l.indexOf(")"), l = l.substring(a + 1, s), this.arrColor = l.split(","), 
                n = this.arrColor.length, i = 0; i < n; i++) this.arrColor[i] = parseFloat(this.arrColor[i]), 
                i < 3 && (this.arrColor[i] = Math.round(this.arrColor[i]));
                r = 4 == this.arrColor.length ? 256 * (256 * (256 * this.arrColor[0] + this.arrColor[1]) + this.arrColor[2]) + Math.round(255 * this.arrColor[3]) : 256 * (256 * this.arrColor[0] + this.arrColor[1]) + this.arrColor[2], 
                this.strColor = e;
            } else {
                if (this.strColor = e, "#" === e.charAt(0) && (e = e.substr(1)), 3 === (n = e.length) || 4 === n) {
                    var h = "";
                    for (i = 0; i < n; i++) h += e[i] + e[i];
                    e = h;
                }
                r = parseInt(e, 16);
            } else r = e, this.strColor = st.toHexColor(r);
            this.strColor.indexOf("rgba") >= 0 || 9 === this.strColor.length ? (this.arrColor = [ ((4278190080 & r) >>> 24) / 255, ((16711680 & r) >> 16) / 255, ((65280 & r) >> 8) / 255, (255 & r) / 255 ], 
            this.numColor = (4278190080 & r) >>> 24 | (16711680 & r) >> 8 | (65280 & r) << 8 | (255 & r) << 24) : (this.arrColor = [ ((16711680 & r) >> 16) / 255, ((65280 & r) >> 8) / 255, (255 & r) / 255, 1 ], 
            this.numColor = 4278190080 | (16711680 & r) >> 16 | 65280 & r | (255 & r) << 16), 
            this.arrColor.__id = ++t._COLODID;
        }
        return (0, s.default)(t, null, [ {
            key: "_initDefault",
            value: function() {
                for (var e in t._DEFAULT = {}, t._COLOR_MAP) t._SAVE[e] = t._DEFAULT[e] = new t(t._COLOR_MAP[e]);
                return t._DEFAULT;
            }
        }, {
            key: "_initSaveMap",
            value: function() {
                for (var e in t._SAVE_SIZE = 0, t._SAVE = {}, t._DEFAULT) t._SAVE[e] = t._DEFAULT[e];
            }
        }, {
            key: "create",
            value: function(e) {
                var i = e + "", n = t._SAVE[i];
                return null != n ? n : (t._SAVE_SIZE < 1e3 && t._initSaveMap(), t._SAVE[i] = new t(e));
            }
        } ]), t;
    }();
    ot._SAVE = {}, ot._SAVE_SIZE = 0, ot._COLOR_MAP = {
        purple: "#800080",
        orange: "#ffa500",
        white: "#FFFFFF",
        red: "#FF0000",
        green: "#00FF00",
        blue: "#0000FF",
        black: "#000000",
        yellow: "#FFFF00",
        gray: "#808080"
    }, ot._DEFAULT = ot._initDefault(), ot._COLODID = 1;
    var lt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
            return (0, o.default)(this, i), t = e.call(this), n || (n = t._copyMatrix(i.IDENTITY_MATRIX)), 
            t._mat = new Float32Array(16), t._alpha = new Float32Array(4), t.setByMatrix(n), 
            t;
        }
        return (0, s.default)(i, [ {
            key: "gray",
            value: function() {
                return this.setByMatrix(i.GRAY_MATRIX);
            }
        }, {
            key: "color",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
                return this.setByMatrix([ 1, 0, 0, 0, t, 0, 1, 0, 0, e, 0, 0, 1, 0, i, 0, 0, 0, 1, n ]);
            }
        }, {
            key: "setColor",
            value: function(t) {
                var e = ot.create(t).arrColor, i = [ 0, 0, 0, 0, 256 * e[0], 0, 0, 0, 0, 256 * e[1], 0, 0, 0, 0, 256 * e[2], 0, 0, 0, 1, 0 ];
                return this.setByMatrix(i);
            }
        }, {
            key: "setByMatrix",
            value: function(t) {
                this._matrix != t && this._copyMatrix(t);
                for (var e = 0, i = 0, n = 0; n < 20; n++) n % 5 != 4 ? this._mat[e++] = t[n] : this._alpha[i++] = t[n];
                return this;
            }
        }, {
            key: "adjustColor",
            value: function(t, e, i, n) {
                return this.adjustHue(n), this.adjustContrast(e), this.adjustBrightness(t), this.adjustSaturation(i), 
                this;
            }
        }, {
            key: "adjustBrightness",
            value: function(t) {
                return 0 == (t = this._clampValue(t, 100)) || isNaN(t) ? this : this._multiplyMatrix([ 1, 0, 0, 0, t, 0, 1, 0, 0, t, 0, 0, 1, 0, t, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);
            }
        }, {
            key: "adjustContrast",
            value: function(t) {
                if (0 == (t = this._clampValue(t, 100)) || isNaN(t)) return this;
                var e, n = (e = t < 0 ? 127 + t / 100 * 127 : 127 * (e = 0 == (e = t % 1) ? i.DELTA_INDEX[t] : i.DELTA_INDEX[t << 0] * (1 - e) + i.DELTA_INDEX[1 + (t << 0)] * e) + 127) / 127, r = .5 * (127 - e);
                return this._multiplyMatrix([ n, 0, 0, 0, r, 0, n, 0, 0, r, 0, 0, n, 0, r, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);
            }
        }, {
            key: "adjustSaturation",
            value: function(t) {
                if (0 == (t = this._clampValue(t, 100)) || isNaN(t)) return this;
                var e = 1 + (t > 0 ? 3 * t / 100 : t / 100), i = 1 - e, n = .3086 * i, r = .6094 * i, a = .082 * i;
                return this._multiplyMatrix([ n + e, r, a, 0, 0, n, r + e, a, 0, 0, n, r, a + e, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);
            }
        }, {
            key: "adjustHue",
            value: function(t) {
                if (0 == (t = this._clampValue(t, 180) / 180 * Math.PI) || isNaN(t)) return this;
                var e = Math.cos(t), i = Math.sin(t), n = .213, r = .715, a = .072;
                return this._multiplyMatrix([ n + e * (1 - n) + i * -n, r + e * -r + i * -r, a + e * -a + i * (1 - a), 0, 0, n + e * -n + .143 * i, r + e * (1 - r) + .14 * i, a + e * -a + -.283 * i, 0, 0, n + e * -n + -.787 * i, r + e * -r + i * r, a + e * (1 - a) + i * a, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);
            }
        }, {
            key: "reset",
            value: function() {
                return this.setByMatrix(this._copyMatrix(i.IDENTITY_MATRIX));
            }
        }, {
            key: "_multiplyMatrix",
            value: function(t) {
                var e = [];
                this._matrix = this._fixMatrix(this._matrix);
                for (var i = 0; i < 5; i++) {
                    for (var n = 0; n < 5; n++) e[n] = this._matrix[n + 5 * i];
                    for (n = 0; n < 5; n++) {
                        for (var r = 0, a = 0; a < 5; a++) r += t[n + 5 * a] * e[a];
                        this._matrix[n + 5 * i] = r;
                    }
                }
                return this.setByMatrix(this._matrix);
            }
        }, {
            key: "_clampValue",
            value: function(t, e) {
                return Math.min(e, Math.max(-e, t));
            }
        }, {
            key: "_fixMatrix",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                return null == t ? i.IDENTITY_MATRIX : (t.length < i.LENGTH ? t = t.slice(0, t.length).concat(i.IDENTITY_MATRIX.slice(t.length, i.LENGTH)) : t.length > i.LENGTH && (t = t.slice(0, i.LENGTH)), 
                t);
            }
        }, {
            key: "_copyMatrix",
            value: function(t) {
                var e = i.LENGTH;
                this._matrix || (this._matrix = []);
                for (var n = 0; n < e; n++) this._matrix[n] = t[n];
                return this._matrix;
            }
        }, {
            key: "type",
            get: function() {
                return at.COLOR;
            }
        } ]), i;
    }(at);
    lt.DELTA_INDEX = [ 0, .01, .02, .04, .05, .06, .07, .08, .1, .11, .12, .14, .15, .16, .17, .18, .2, .21, .22, .24, .25, .27, .28, .3, .32, .34, .36, .38, .4, .42, .44, .46, .48, .5, .53, .56, .59, .62, .65, .68, .71, .74, .77, .8, .83, .86, .89, .92, .95, .98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10 ], 
    lt.GRAY_MATRIX = [ .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, .3086, .6094, .082, 0, 0, 0, 0, 0, 1, 0 ], 
    lt.IDENTITY_MATRIX = [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ], 
    lt.LENGTH = 25;
    var ht = function() {
        function t() {
            (0, o.default)(this, t), this.colorFlt = null, this.uv = null;
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture && this.texture._removeReference(), this.texture = null, this.matrix = null, 
                c.recover("DrawTextureCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                this.texture && t.drawTextureWithTransform(this.texture, this.x, this.y, this.width, this.height, this.matrix, e, i, this.alpha, this.blendMode, this.colorFlt, this.uv);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l, h, u) {
                var _ = c.getItemByClass("DrawTextureCmd", t);
                return _.texture = e, e._addReference(), _.x = i, _.y = n, _.width = r, _.height = a, 
                _.matrix = s, _.alpha = o, _.color = l, _.blendMode = h, _.uv = null == u ? null : u, 
                l && (_.colorFlt = new lt(), _.colorFlt.setColor(l)), _;
            }
        } ]), t;
    }();
    ht.ID = "DrawTexture";
    var ut = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture = null, this.offset = null, this.other = null, c.recover("FillTextureCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.fillTexture(this.texture, this.x + e, this.y + i, this.width, this.height, this.type, this.offset, this.other);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l) {
                var h = c.getItemByClass("FillTextureCmd", t);
                return h.texture = e, h.x = i, h.y = n, h.width = r, h.height = a, h.type = s, h.offset = o, 
                h.other = l, h;
            }
        } ]), t;
    }();
    ut.ID = "FillTexture";
    var ct = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("RestoreCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.restore();
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("RestoreCmd", t);
            }
        } ]), t;
    }();
    ct.ID = "Restore";
    var _t = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("RotateCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._rotate(this.angle, this.pivotX + e, this.pivotY + i);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n) {
                var r = c.getItemByClass("RotateCmd", t);
                return r.angle = e, r.pivotX = i, r.pivotY = n, r;
            }
        } ]), t;
    }();
    _t.ID = "Rotate";
    var dt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("ScaleCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._scale(this.scaleX, this.scaleY, this.pivotX + e, this.pivotY + i);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r) {
                var a = c.getItemByClass("ScaleCmd", t);
                return a.scaleX = e, a.scaleY = i, a.pivotX = n, a.pivotY = r, a;
            }
        } ]), t;
    }();
    dt.ID = "Scale";
    var ft = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.matrix = null, c.recover("TransformCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t._transform(this.matrix, this.pivotX + e, this.pivotY + i);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n) {
                var r = c.getItemByClass("TransformCmd", t);
                return r.matrix = e, r.pivotX = i, r.pivotY = n, r;
            }
        } ]), t;
    }();
    ft.ID = "Transform";
    var vt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("TranslateCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.translate(this.tx, this.ty);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i) {
                var n = c.getItemByClass("TranslateCmd", t);
                return n.tx = e, n.ty = i, n;
            }
        } ]), t;
    }();
    vt.ID = "Translate";
    var pt = function() {
        function t() {
            (0, o.default)(this, t), this._controlPoints = [ new E(), new E(), new E() ], this._calFun = this.getPoint2;
        }
        return (0, s.default)(t, [ {
            key: "_switchPoint",
            value: function(t, e) {
                var i = this._controlPoints.shift();
                i.setTo(t, e), this._controlPoints.push(i);
            }
        }, {
            key: "getPoint2",
            value: function(t, e) {
                var i = this._controlPoints[0], n = this._controlPoints[1], r = this._controlPoints[2], a = Math.pow(1 - t, 2) * i.x + 2 * t * (1 - t) * n.x + Math.pow(t, 2) * r.x, s = Math.pow(1 - t, 2) * i.y + 2 * t * (1 - t) * n.y + Math.pow(t, 2) * r.y;
                e.push(a, s);
            }
        }, {
            key: "getPoint3",
            value: function(t, e) {
                var i = this._controlPoints[0], n = this._controlPoints[1], r = this._controlPoints[2], a = this._controlPoints[3], s = Math.pow(1 - t, 3) * i.x + 3 * n.x * t * (1 - t) * (1 - t) + 3 * r.x * t * t * (1 - t) + a.x * Math.pow(t, 3), o = Math.pow(1 - t, 3) * i.y + 3 * n.y * t * (1 - t) * (1 - t) + 3 * r.y * t * t * (1 - t) + a.y * Math.pow(t, 3);
                e.push(s, o);
            }
        }, {
            key: "insertPoints",
            value: function(t, e) {
                var i, n;
                for (n = 1 / (t = t > 0 ? t : 5), i = 0; i <= 1; i += n) this._calFun(i, e);
            }
        }, {
            key: "getBezierPoints",
            value: function(t) {
                var e, i, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 2;
                if ((i = t.length) < 2 * (r + 1)) return [];
                var a = [];
                switch (r) {
                  case 2:
                    this._calFun = this.getPoint2;
                    break;

                  case 3:
                    this._calFun = this.getPoint3;
                    break;

                  default:
                    return [];
                }
                for (;this._controlPoints.length <= r; ) this._controlPoints.push(E.create());
                for (e = 0; e < 2 * r; e += 2) this._switchPoint(t[e], t[e + 1]);
                for (e = 2 * r; e < i; e += 2) this._switchPoint(t[e], t[e + 1]), e / 2 % r == 0 && this.insertPoints(n, a);
                return a;
            }
        } ]), t;
    }();
    pt.I = new pt();
    var yt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "multiply",
            value: function(t, e, i) {
                return (t.x - i.x) * (e.y - i.y) - (e.x - i.x) * (t.y - i.y);
            }
        }, {
            key: "dis",
            value: function(t, e) {
                return (t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y);
            }
        }, {
            key: "_getPoints",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                for (t._mPointList || (t._mPointList = []); t._mPointList.length < e; ) t._mPointList.push(new E());
                return n || (n = []), n.length = 0, i ? t.getFrom(n, t._mPointList, e) : t.getFromR(n, t._mPointList, e), 
                n;
            }
        }, {
            key: "getFrom",
            value: function(t, e, i) {
                var n;
                for (n = 0; n < i; n++) t.push(e[n]);
                return t;
            }
        }, {
            key: "getFromR",
            value: function(t, e, i) {
                var n;
                for (n = 0; n < i; n++) t.push(e.pop());
                return t;
            }
        }, {
            key: "pListToPointList",
            value: function(e) {
                var i, n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = e.length / 2, a = t._getPoints(r, n, t._tempPointList);
                for (i = 0; i < r; i++) a[i].setTo(e[i + i], e[i + i + 1]);
                return a;
            }
        }, {
            key: "pointListToPlist",
            value: function(e) {
                var i, n, r = e.length, a = t._temPList;
                for (a.length = 0, i = 0; i < r; i++) n = e[i], a.push(n.x, n.y);
                return a;
            }
        }, {
            key: "scanPList",
            value: function(e) {
                return st.copyArray(e, t.pointListToPlist(t.scan(t.pListToPointList(e, !0))));
            }
        }, {
            key: "scan",
            value: function(e) {
                var i, n, r, a, s, o = 0, l = e.length, h = {};
                for ((a = t._temArr).length = 0, i = e.length - 1; i >= 0; i--) (s = (r = e[i]).x + "_" + r.y) in h || (h[s] = !0, 
                a.push(r));
                for (l = a.length, st.copyArray(e, a), i = 1; i < l; i++) (e[i].y < e[o].y || e[i].y == e[o].y && e[i].x < e[o].x) && (o = i);
                for (r = e[0], e[0] = e[o], e[o] = r, i = 1; i < l - 1; i++) {
                    for (o = i, n = i + 1; n < l; n++) (t.multiply(e[n], e[o], e[0]) > 0 || 0 == t.multiply(e[n], e[o], e[0]) && t.dis(e[0], e[n]) < t.dis(e[0], e[o])) && (o = n);
                    r = e[i], e[i] = e[o], e[o] = r;
                }
                if ((a = t._temArr).length = 0, e.length < 3) return st.copyArray(a, e);
                for (a.push(e[0], e[1], e[2]), i = 3; i < l; i++) {
                    for (;a.length >= 2 && t.multiply(e[i], a[a.length - 1], a[a.length - 2]) >= 0; ) a.pop();
                    e[i] && a.push(e[i]);
                }
                return a;
            }
        } ]), t;
    }();
    yt._tempPointList = [], yt._temPList = [], yt._temArr = [];
    var gt = function() {
        function t(e) {
            (0, o.default)(this, t), this.setValue(e);
        }
        return (0, s.default)(t, [ {
            key: "setValue",
            value: function(t) {
                this._color = t ? t instanceof ot ? t : ot.create(t) : ot.create("#000000");
            }
        }, {
            key: "reset",
            value: function() {
                this._color = ot.create("#000000");
            }
        }, {
            key: "toInt",
            value: function() {
                return this._color.numColor;
            }
        }, {
            key: "equal",
            value: function(t) {
                return "string" == typeof t ? this._color.strColor === t : t instanceof ot && this._color.numColor === t.numColor;
            }
        }, {
            key: "toColorStr",
            value: function() {
                return this._color.strColor;
            }
        } ], [ {
            key: "create",
            value: function(e) {
                if (e) {
                    var i = e instanceof ot ? e : ot.create(e);
                    return i._drawStyle || (i._drawStyle = new t(e));
                }
                return t.DEFAULT;
            }
        } ]), t;
    }();
    gt.DEFAULT = new gt("#000000");
    var mt = function() {
        function t() {
            (0, o.default)(this, t), this._lastOriX = 0, this._lastOriY = 0, this.paths = [], 
            this._curPath = null;
        }
        return (0, s.default)(t, [ {
            key: "beginPath",
            value: function(t) {
                this.paths.length = 1, this._curPath = this.paths[0] = new Tt(), this._curPath.convex = t;
            }
        }, {
            key: "closePath",
            value: function() {
                this._curPath.loop = !0;
            }
        }, {
            key: "newPath",
            value: function() {
                this._curPath = new Tt(), this.paths.push(this._curPath);
            }
        }, {
            key: "addPoint",
            value: function(t, e) {
                this._curPath.path.push(t, e);
            }
        }, {
            key: "push",
            value: function(t, e) {
                this._curPath ? this._curPath.path.length > 0 && (this._curPath = new Tt(), this.paths.push(this._curPath)) : (this._curPath = new Tt(), 
                this.paths.push(this._curPath));
                var i = this._curPath;
                i.path = t.slice(), i.convex = e;
            }
        }, {
            key: "reset",
            value: function() {
                this.paths.length = 0;
            }
        } ]), t;
    }(), Tt = function t() {
        (0, o.default)(this, t), this.path = [], this.loop = !1, this.convex = !1;
    }, xt = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t.TYPE_2D;
            (0, o.default)(this, t), this.clipInfoID = -1, this._mesh = null, this._blendFn = null, 
            this._id = 0, this._renderType = 0, this._parent = null, this._key = new nt(), this._startIdx = 0, 
            this._numEle = 0, this._ref = 1, this.shaderValue = null, this._renderType = e, 
            this._id = ++t.ID;
        }
        return (0, s.default)(t, [ {
            key: "getID",
            value: function() {
                return this._id;
            }
        }, {
            key: "getRenderType",
            value: function() {
                return this._renderType;
            }
        }, {
            key: "toString",
            value: function() {
                return "ibindex:" + this._startIdx + " num:" + this._numEle + " key=" + this._key;
            }
        }, {
            key: "renderSubmit",
            value: function() {
                return 1;
            }
        }, {
            key: "releaseRender",
            value: function() {}
        } ], [ {
            key: "__init__",
            value: function() {
                var e = t.RENDERBASE = new t(-1);
                e.shaderValue = new it(0, 0), e.shaderValue.ALPHA = 1, e._ref = 4294967295;
            }
        } ]), t;
    }();
    xt.TYPE_2D = 1e4, xt.TYPE_CANVAS = 10003, xt.TYPE_CMDSETRT = 10004, xt.TYPE_CUSTOM = 10005, 
    xt.TYPE_BLURRT = 10006, xt.TYPE_CMDDESTORYPRERT = 10007, xt.TYPE_DISABLESTENCIL = 10008, 
    xt.TYPE_OTHERIBVB = 10009, xt.TYPE_PRIMITIVE = 10010, xt.TYPE_RT = 10011, xt.TYPE_BLUR_RT = 10012, 
    xt.TYPE_TARGET = 10013, xt.TYPE_CHANGE_VALUE = 10014, xt.TYPE_SHAPE = 10015, xt.TYPE_TEXTURE = 10016, 
    xt.TYPE_FILLTEXTURE = 10017, xt.KEY_ONCE = -1, xt.KEY_FILLRECT = 1, xt.KEY_DRAWTEXTURE = 2, 
    xt.KEY_VG = 3, xt.KEY_TRIANGLES = 4, xt.ID = 1, xt.preRender = null;
    var kt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "isSaveMark",
            value: function() {
                return !1;
            }
        }, {
            key: "restore",
            value: function(e) {
                this._dataObj[this._valueName] = this._value, t.POOL[t.POOL._length++] = this, this._newSubmit && (e._curSubmit = xt.RENDERBASE);
            }
        } ], [ {
            key: "_createArray",
            value: function() {
                var t = [];
                return t._length = 0, t;
            }
        }, {
            key: "_init",
            value: function() {
                var e = t._namemap = {};
                return e[t.TYPE_ALPHA] = "ALPHA", e[t.TYPE_FILESTYLE] = "fillStyle", e[t.TYPE_FONT] = "font", 
                e[t.TYPE_LINEWIDTH] = "lineWidth", e[t.TYPE_STROKESTYLE] = "strokeStyle", e[t.TYPE_ENABLEMERGE] = "_mergeID", 
                e[t.TYPE_MARK] = e[t.TYPE_TRANSFORM] = e[t.TYPE_TRANSLATE] = [], e[t.TYPE_TEXTBASELINE] = "textBaseline", 
                e[t.TYPE_TEXTALIGN] = "textAlign", e[t.TYPE_GLOBALCOMPOSITEOPERATION] = "_nBlendType", 
                e[t.TYPE_SHADER] = "shader", e[t.TYPE_FILTERS] = "filters", e[t.TYPE_COLORFILTER] = "_colorFiler", 
                e;
            }
        }, {
            key: "save",
            value: function(e, i, n, r) {
                if ((e._saveMark._saveuse & i) !== i) {
                    e._saveMark._saveuse |= i;
                    var a = t.POOL, s = a._length > 0 ? a[--a._length] : new t();
                    s._value = n[s._valueName = t._namemap[i]], s._dataObj = n, s._newSubmit = r;
                    var o = e._save;
                    o[o._length++] = s;
                }
            }
        } ]), t;
    }();
    kt.TYPE_ALPHA = 1, kt.TYPE_FILESTYLE = 2, kt.TYPE_FONT = 8, kt.TYPE_LINEWIDTH = 256, 
    kt.TYPE_STROKESTYLE = 512, kt.TYPE_MARK = 1024, kt.TYPE_TRANSFORM = 2048, kt.TYPE_TRANSLATE = 4096, 
    kt.TYPE_ENABLEMERGE = 8192, kt.TYPE_TEXTBASELINE = 16384, kt.TYPE_TEXTALIGN = 32768, 
    kt.TYPE_GLOBALCOMPOSITEOPERATION = 65536, kt.TYPE_CLIPRECT = 131072, kt.TYPE_CLIPRECT_STENCIL = 262144, 
    kt.TYPE_IBVB = 524288, kt.TYPE_SHADER = 1048576, kt.TYPE_FILTERS = 2097152, kt.TYPE_FILTERS_TYPE = 4194304, 
    kt.TYPE_COLORFILTER = 8388608, kt.POOL = kt._createArray(), kt._namemap = kt._init();
    var Et = function() {
        function t() {
            (0, o.default)(this, t), this._globalClipMatrix = new k(), this._clipInfoID = -1, 
            this._clipRect = new R(), this.incache = !1;
        }
        return (0, s.default)(t, [ {
            key: "isSaveMark",
            value: function() {
                return !1;
            }
        }, {
            key: "restore",
            value: function(e) {
                this._globalClipMatrix.copyTo(e._globalClipMatrix), this._clipRect.clone(e._clipRect), 
                e._clipInfoID = this._clipInfoID, t.POOL[t.POOL._length++] = this, e._clipInCache = this.incache;
            }
        } ], [ {
            key: "save",
            value: function(e) {
                if ((e._saveMark._saveuse & kt.TYPE_CLIPRECT) != kt.TYPE_CLIPRECT) {
                    e._saveMark._saveuse |= kt.TYPE_CLIPRECT;
                    var i = t.POOL, n = i._length > 0 ? i[--i._length] : new t();
                    e._globalClipMatrix.copyTo(n._globalClipMatrix), e._clipRect.clone(n._clipRect), 
                    n._clipInfoID = e._clipInfoID, n.incache = e._clipInCache;
                    var r = e._save;
                    r[r._length++] = n;
                }
            }
        } ]), t;
    }();
    Et.POOL = kt._createArray();
    var Rt = function() {
        function t() {
            (0, o.default)(this, t), this._saveuse = 0;
        }
        return (0, s.default)(t, [ {
            key: "isSaveMark",
            value: function() {
                return !0;
            }
        }, {
            key: "restore",
            value: function(e) {
                e._saveMark = this._preSaveMark, t.POOL[t.POOL._length++] = this;
            }
        } ], [ {
            key: "Create",
            value: function(e) {
                var i = t.POOL, n = i._length > 0 ? i[--i._length] : new t();
                return n._saveuse = 0, n._preSaveMark = e._saveMark, e._saveMark = n, n;
            }
        } ]), t;
    }();
    Rt.POOL = kt._createArray();
    var At = function() {
        function t() {
            (0, o.default)(this, t), this._matrix = new k();
        }
        return (0, s.default)(t, [ {
            key: "isSaveMark",
            value: function() {
                return !1;
            }
        }, {
            key: "restore",
            value: function(e) {
                e._curMat = this._savematrix, t.POOL[t.POOL._length++] = this;
            }
        } ], [ {
            key: "save",
            value: function(e) {
                var i = e._saveMark;
                if ((i._saveuse & kt.TYPE_TRANSFORM) !== kt.TYPE_TRANSFORM) {
                    i._saveuse |= kt.TYPE_TRANSFORM;
                    var n = t.POOL, r = n._length > 0 ? n[--n._length] : new t();
                    r._savematrix = e._curMat, e._curMat = e._curMat.copyTo(r._matrix);
                    var a = e._save;
                    a[a._length++] = r;
                }
            }
        } ]), t;
    }();
    At.POOL = kt._createArray();
    var Ct = function() {
        function t() {
            (0, o.default)(this, t), this._mat = new k();
        }
        return (0, s.default)(t, [ {
            key: "isSaveMark",
            value: function() {
                return !1;
            }
        }, {
            key: "restore",
            value: function(e) {
                this._mat.copyTo(e._curMat), t.POOL[t.POOL._length++] = this;
            }
        } ], [ {
            key: "save",
            value: function(e) {
                var i = t.POOL, n = i._length > 0 ? i[--i._length] : new t();
                e._curMat.copyTo(n._mat);
                var r = e._save;
                r[r._length++] = n;
            }
        } ]), t;
    }();
    Ct.POOL = kt._createArray();
    var bt = function() {
        function t() {
            (0, o.default)(this, t), this._nativeVertexArrayObject = A.layaGPUInstance.createVertexArray();
        }
        return (0, s.default)(t, [ {
            key: "bind",
            value: function() {
                t._curBindedBufferState !== this && (A.layaGPUInstance.bindVertexArray(this._nativeVertexArrayObject), 
                t._curBindedBufferState = this);
            }
        }, {
            key: "unBind",
            value: function() {
                if (t._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                A.layaGPUInstance.bindVertexArray(null), t._curBindedBufferState = null;
            }
        }, {
            key: "destroy",
            value: function() {
                A.layaGPUInstance.deleteVertexArray(this._nativeVertexArrayObject);
            }
        }, {
            key: "bindForNative",
            value: function() {
                A.instance.bindVertexArray(this._nativeVertexArrayObject), t._curBindedBufferState = this;
            }
        }, {
            key: "unBindForNative",
            value: function() {
                A.instance.bindVertexArray(null), t._curBindedBufferState = null;
            }
        } ]), t;
    }(), St = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.call(this);
        }
        return i;
    }(bt), wt = function() {
        function t() {
            (0, o.default)(this, t), this._byteLength = 0, this._glBuffer = A.instance.createBuffer();
        }
        return (0, s.default)(t, [ {
            key: "_bindForVAO",
            value: function() {}
        }, {
            key: "bind",
            value: function() {
                return !1;
            }
        }, {
            key: "destroy",
            value: function() {
                this._glBuffer && (A.instance.deleteBuffer(this._glBuffer), this._glBuffer = null);
            }
        }, {
            key: "bufferUsage",
            get: function() {
                return this._bufferUsage;
            }
        } ]), t;
    }(), Mt = function t() {
        (0, o.default)(this, t);
    };
    Mt.loopStTm = 0, Mt.loopCount = 0;
    var It = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this))._maxsize = 0, t._upload = !0, 
            t._uploadSize = 0, t._bufferSize = 0, t._u8Array = null, t;
        }
        return (0, s.default)(i, [ {
            key: "setByteLength",
            value: function(t) {
                this._byteLength !== t && (t <= this._bufferSize || this._resizeBuffer(2 * t + 256, !0), 
                this._byteLength = t);
            }
        }, {
            key: "needSize",
            value: function(t) {
                var e = this._byteLength;
                if (t) {
                    var i = this._byteLength + t;
                    i <= this._bufferSize || this._resizeBuffer(i << 1, !0), this._byteLength = i;
                }
                return e;
            }
        }, {
            key: "_bufferData",
            value: function() {
                this._maxsize = Math.max(this._maxsize, this._byteLength), Mt.loopCount % 30 == 0 && (this._buffer.byteLength > this._maxsize + 64 && (this._buffer = this._buffer.slice(0, this._maxsize + 64), 
                this._bufferSize = this._buffer.byteLength, this._checkArrayUse()), this._maxsize = this._byteLength), 
                this._uploadSize < this._buffer.byteLength && (this._uploadSize = this._buffer.byteLength, 
                A.instance.bufferData(this._bufferType, this._uploadSize, this._bufferUsage)), A.instance.bufferSubData(this._bufferType, 0, new Uint8Array(this._buffer, 0, this._byteLength));
            }
        }, {
            key: "_bufferSubData",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                if (this._maxsize = Math.max(this._maxsize, this._byteLength), Mt.loopCount % 30 == 0 && (this._buffer.byteLength > this._maxsize + 64 && (this._buffer = this._buffer.slice(0, this._maxsize + 64), 
                this._bufferSize = this._buffer.byteLength, this._checkArrayUse()), this._maxsize = this._byteLength), 
                this._uploadSize < this._buffer.byteLength && (this._uploadSize = this._buffer.byteLength, 
                A.instance.bufferData(this._bufferType, this._uploadSize, this._bufferUsage)), e || i) {
                    var n = this._buffer.slice(e, i);
                    A.instance.bufferSubData(this._bufferType, t, n);
                } else A.instance.bufferSubData(this._bufferType, t, this._buffer);
            }
        }, {
            key: "_checkArrayUse",
            value: function() {}
        }, {
            key: "_bind_uploadForVAO",
            value: function() {
                return !!this._upload && (this._upload = !1, this._bindForVAO(), this._bufferData(), 
                !0);
            }
        }, {
            key: "_bind_upload",
            value: function() {
                return !!this._upload && (this._upload = !1, this.bind(), this._bufferData(), !0);
            }
        }, {
            key: "_bind_subUpload",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return !!this._upload && (this._upload = !1, this.bind(), this._bufferSubData(t, e, i), 
                !0);
            }
        }, {
            key: "_resizeBuffer",
            value: function(t, e) {
                var i = this._buffer;
                if (t <= i.byteLength) return this;
                var n = this._u8Array;
                if (e && i && i.byteLength > 0) {
                    var r = new ArrayBuffer(t), a = n && n.buffer == i ? n : new Uint8Array(i);
                    (n = this._u8Array = new Uint8Array(r)).set(a, 0), i = this._buffer = r;
                } else i = this._buffer = new ArrayBuffer(t), this._u8Array = null;
                return this._checkArrayUse(), this._upload = !0, this._bufferSize = i.byteLength, 
                this;
            }
        }, {
            key: "append",
            value: function(t) {
                var e, i;
                this._upload = !0, e = t.byteLength, t instanceof Uint8Array ? (this._resizeBuffer(this._byteLength + e, !0), 
                i = new Uint8Array(this._buffer, this._byteLength)) : t instanceof Uint16Array ? (this._resizeBuffer(this._byteLength + e, !0), 
                i = new Uint16Array(this._buffer, this._byteLength)) : t instanceof Float32Array && (this._resizeBuffer(this._byteLength + e, !0), 
                i = new Float32Array(this._buffer, this._byteLength)), i.set(t, 0), this._byteLength += e, 
                this._checkArrayUse();
            }
        }, {
            key: "appendU16Array",
            value: function(t, e) {
                this._resizeBuffer(this._byteLength + 2 * e, !0);
                var i = new Uint16Array(this._buffer, this._byteLength, e);
                if (6 == e) i[0] = t[0], i[1] = t[1], i[2] = t[2], i[3] = t[3], i[4] = t[4], i[5] = t[5]; else if (e >= 100) i.set(new Uint16Array(t.buffer, 0, e)); else for (var n = 0; n < e; n++) i[n] = t[n];
                this._byteLength += 2 * e, this._checkArrayUse();
            }
        }, {
            key: "appendEx",
            value: function(t, e) {
                var i;
                this._upload = !0, i = t.byteLength, this._resizeBuffer(this._byteLength + i, !0), 
                new e(this._buffer, this._byteLength).set(t, 0), this._byteLength += i, this._checkArrayUse();
            }
        }, {
            key: "appendEx2",
            value: function(t, e, i) {
                var n, r, a, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
                for (this._upload = !0, n = i * s, this._resizeBuffer(this._byteLength + n, !0), 
                r = new e(this._buffer, this._byteLength), a = 0; a < i; a++) r[a] = t[a];
                this._byteLength += n, this._checkArrayUse();
            }
        }, {
            key: "getBuffer",
            value: function() {
                return this._buffer;
            }
        }, {
            key: "setNeedUpload",
            value: function() {
                this._upload = !0;
            }
        }, {
            key: "getNeedUpload",
            value: function() {
                return this._upload;
            }
        }, {
            key: "upload",
            value: function() {
                var t = A.instance, e = this._bind_upload();
                return t.bindBuffer(this._bufferType, null), this._bufferType == t.ARRAY_BUFFER && (wt._bindedVertexBuffer = null), 
                this._bufferType == t.ELEMENT_ARRAY_BUFFER && (wt._bindedIndexBuffer = null), H.activeShader = null, 
                e;
            }
        }, {
            key: "subUpload",
            value: function() {
                var t = A.instance, e = this._bind_subUpload();
                return t.bindBuffer(this._bufferType, null), this._bufferType == t.ARRAY_BUFFER && (wt._bindedVertexBuffer = null), 
                this._bufferType == t.ELEMENT_ARRAY_BUFFER && (wt._bindedIndexBuffer = null), H.activeShader = null, 
                e;
            }
        }, {
            key: "_disposeResource",
            value: function() {
                this._upload = !0, this._uploadSize = 0;
            }
        }, {
            key: "clear",
            value: function() {
                this._byteLength = 0, this._upload = !0;
            }
        }, {
            key: "bufferLength",
            get: function() {
                return this._buffer.byteLength;
            }
        }, {
            key: "byteLength",
            set: function(t) {
                this.setByteLength(t);
            }
        } ], [ {
            key: "__int__",
            value: function(t) {}
        } ]), i;
    }(wt);
    It.FLOAT32 = 4, It.SHORT = 2;
    var Pt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 35044;
            return (0, o.default)(this, i), (t = e.call(this))._bufferUsage = n, t._bufferType = A.instance.ELEMENT_ARRAY_BUFFER, 
            t._buffer = new ArrayBuffer(8), t;
        }
        return (0, s.default)(i, [ {
            key: "_checkArrayUse",
            value: function() {
                this._uint16Array && (this._uint16Array = new Uint16Array(this._buffer));
            }
        }, {
            key: "getUint16Array",
            value: function() {
                return this._uint16Array || (this._uint16Array = new Uint16Array(this._buffer));
            }
        }, {
            key: "_bindForVAO",
            value: function() {
                var t = A.instance;
                t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this._glBuffer);
            }
        }, {
            key: "bind",
            value: function() {
                if (wt._bindedIndexBuffer !== this._glBuffer) {
                    var t = A.instance;
                    return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this._glBuffer), wt._bindedIndexBuffer = this._glBuffer, 
                    !0;
                }
                return !1;
            }
        }, {
            key: "destory",
            value: function() {
                this._uint16Array = null, this._buffer = null;
            }
        }, {
            key: "disposeResource",
            value: function() {
                this._disposeResource();
            }
        } ]), i;
    }(It);
    Pt.create = function() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 35044;
        return new Pt(t);
    };
    var Lt = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n(t, e) {
            var r;
            return (0, o.default)(this, n), (r = i.call(this))._vertexStride = t, r._bufferUsage = e, 
            r._bufferType = A.instance.ARRAY_BUFFER, r._buffer = new ArrayBuffer(8), r._floatArray32 = new Float32Array(r._buffer), 
            r._uint32Array = new Uint32Array(r._buffer), r;
        }
        return (0, s.default)(n, [ {
            key: "getFloat32Array",
            value: function() {
                return this._floatArray32;
            }
        }, {
            key: "appendArray",
            value: function(t) {
                var e = this._byteLength >> 2;
                this.setByteLength(this._byteLength + 4 * t.length), this.getFloat32Array().set(t, e), 
                this._upload = !0;
            }
        }, {
            key: "_checkArrayUse",
            value: function() {
                this._floatArray32 && (this._floatArray32 = new Float32Array(this._buffer)), this._uint32Array && (this._uint32Array = new Uint32Array(this._buffer));
            }
        }, {
            key: "deleteBuffer",
            value: function() {
                (0, e.default)((0, r.default)(n.prototype), "_disposeResource", this).call(this);
            }
        }, {
            key: "_bindForVAO",
            value: function() {
                var t = A.instance;
                t.bindBuffer(t.ARRAY_BUFFER, this._glBuffer);
            }
        }, {
            key: "bind",
            value: function() {
                if (wt._bindedVertexBuffer !== this._glBuffer) {
                    var t = A.instance;
                    return t.bindBuffer(t.ARRAY_BUFFER, this._glBuffer), wt._bindedVertexBuffer = this._glBuffer, 
                    !0;
                }
                return !1;
            }
        }, {
            key: "destroy",
            value: function() {
                (0, e.default)((0, r.default)(n.prototype), "destroy", this).call(this), this._byteLength = 0, 
                this._upload = !0, this._buffer = null, this._floatArray32 = null;
            }
        }, {
            key: "vertexStride",
            get: function() {
                return this._vertexStride;
            }
        } ]), n;
    }(It);
    Lt.create = function(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 35048;
        return new Lt(t, e);
    };
    var Dt = function() {
        function t(e, i, n) {
            (0, o.default)(this, t), this._stride = 0, this.vertNum = 0, this.indexNum = 0, 
            this._applied = !1, this._quadNum = 0, this.canReuse = !1, this._stride = e, this._vb = new Lt(e, A.instance.DYNAMIC_DRAW), 
            i ? this._vb._resizeBuffer(i, !1) : h.webGL2D_MeshAllocMaxMem && this._vb._resizeBuffer(65536 * e, !1), 
            this._ib = new Pt(), n && this._ib._resizeBuffer(n, !1);
        }
        return (0, s.default)(t, [ {
            key: "cloneWithNewVB",
            value: function() {
                var e = new t(this._stride, 0, 0);
                return e._ib = this._ib, e._quadNum = this._quadNum, e._attribInfo = this._attribInfo, 
                e;
            }
        }, {
            key: "cloneWithNewVBIB",
            value: function() {
                var e = new t(this._stride, 0, 0);
                return e._attribInfo = this._attribInfo, e;
            }
        }, {
            key: "getVBW",
            value: function() {
                return this._vb.setNeedUpload(), this._vb;
            }
        }, {
            key: "getVBR",
            value: function() {
                return this._vb;
            }
        }, {
            key: "getIBR",
            value: function() {
                return this._ib;
            }
        }, {
            key: "getIBW",
            value: function() {
                return this._ib.setNeedUpload(), this._ib;
            }
        }, {
            key: "createQuadIB",
            value: function(t) {
                this._quadNum = t, this._ib._resizeBuffer(6 * t * 2, !1), this._ib.byteLength = this._ib.bufferLength;
                for (var e = this._ib.getUint16Array(), i = 0, n = 0, r = 0; r < t; r++) e[i++] = n, 
                e[i++] = n + 2, e[i++] = n + 1, e[i++] = n, e[i++] = n + 3, e[i++] = n + 2, n += 4;
                this._ib.setNeedUpload();
            }
        }, {
            key: "setAttributes",
            value: function(t) {
                if (this._attribInfo = t, this._attribInfo.length % 3 != 0) throw "Mesh2D setAttributes error!";
            }
        }, {
            key: "configVAO",
            value: function(t) {
                if (!this._applied) {
                    this._applied = !0, this._vao || (this._vao = new St()), this._vao.bind(), this._vb._bindForVAO(), 
                    this._ib.setNeedUpload(), this._ib._bind_uploadForVAO();
                    for (var e = this._attribInfo.length / 3, i = 0, n = 0; n < e; n++) {
                        var r = this._attribInfo[i + 1], a = this._attribInfo[i], s = this._attribInfo[i + 2];
                        t.enableVertexAttribArray(n), t.vertexAttribPointer(n, r, a, !1, this._stride, s), 
                        i += 3;
                    }
                    this._vao.unBind();
                }
            }
        }, {
            key: "useMesh",
            value: function(t) {
                this._applied || this.configVAO(t), this._vao.bind(), this._vb.bind(), this._ib._bind_upload() || this._ib.bind(), 
                this._vb._bind_upload() || this._vb.bind();
            }
        }, {
            key: "getEleNum",
            value: function() {
                return this._ib.getBuffer().byteLength / 2;
            }
        }, {
            key: "releaseMesh",
            value: function() {}
        }, {
            key: "destroy",
            value: function() {}
        }, {
            key: "clearVB",
            value: function() {
                this._vb.clear();
            }
        } ]), t;
    }();
    Dt._gvaoid = 0;
    var Bt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this, i.const_stride, 4, 4)).canReuse = !0, 
            t.setAttributes(i._fixattriInfo), i._fixib ? (t._ib = i._fixib, t._quadNum = i._maxIB) : (t.createQuadIB(i._maxIB), 
            i._fixib = t._ib), t;
        }
        return (0, s.default)(i, [ {
            key: "releaseMesh",
            value: function() {
                this._vb.setByteLength(0), this.vertNum = 0, this.indexNum = 0, i._POOL.push(this);
            }
        }, {
            key: "destroy",
            value: function() {
                this._vb.destroy(), this._vb.deleteBuffer();
            }
        }, {
            key: "addQuad",
            value: function(t, e, n, r) {
                var a = this._vb, s = a._byteLength >> 2;
                a.setByteLength(s + i.const_stride << 2);
                var o = a._floatArray32 || a.getFloat32Array(), l = a._uint32Array, h = s, u = r ? 255 : 0;
                o[h++] = t[0], o[h++] = t[1], o[h++] = e[0], o[h++] = e[1], l[h++] = n, l[h++] = u, 
                o[h++] = t[2], o[h++] = t[3], o[h++] = e[2], o[h++] = e[3], l[h++] = n, l[h++] = u, 
                o[h++] = t[4], o[h++] = t[5], o[h++] = e[4], o[h++] = e[5], l[h++] = n, l[h++] = u, 
                o[h++] = t[6], o[h++] = t[7], o[h++] = e[6], o[h++] = e[7], l[h++] = n, l[h++] = u, 
                a._upload = !0;
            }
        } ], [ {
            key: "__int__",
            value: function() {
                i._fixattriInfo = [ 5126, 4, 0, 5121, 4, 16, 5121, 4, 20 ];
            }
        }, {
            key: "getAMesh",
            value: function(t) {
                var e = null;
                return e = i._POOL.length ? i._POOL.pop() : new i(), t && e._vb._resizeBuffer(65536 * i.const_stride, !1), 
                e;
            }
        } ]), i;
    }(Dt);
    Bt.const_stride = 24, Bt._maxIB = 16384, Bt._POOL = [];
    var Ft = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this, i.const_stride, 4, 4)).canReuse = !0, 
            t.setAttributes(i._fixattriInfo), t;
        }
        return (0, s.default)(i, [ {
            key: "addData",
            value: function(t, e, n, r, a) {
                var s = this._vb, o = this._ib, l = t.length >> 1, h = s.needSize(l * i.const_stride) >> 2, u = s._floatArray32 || s.getFloat32Array(), c = s._uint32Array, _ = 0, d = r.a, f = r.b, v = r.c, p = r.d, y = r.tx, g = r.ty, m = 0;
                for (m = 0; m < l; m++) {
                    var T = t[_], x = t[_ + 1];
                    u[h] = T * d + x * v + y, u[h + 1] = T * f + x * p + g, u[h + 2] = e[_], u[h + 3] = e[_ + 1], 
                    c[h + 4] = a, c[h + 5] = 255, h += 6, _ += 2;
                }
                s.setNeedUpload();
                var k = this.vertNum, E = n.length, R = o.needSize(n.byteLength), A = o.getUint16Array(), C = R >> 1;
                if (k > 0) {
                    var b = C + E, S = 0;
                    for (m = C; m < b; m++, S++) A[m] = n[S] + k;
                } else A.set(n, C);
                o.setNeedUpload(), this.vertNum += l, this.indexNum += n.length;
            }
        }, {
            key: "releaseMesh",
            value: function() {
                this._vb.setByteLength(0), this._ib.setByteLength(0), this.vertNum = 0, this.indexNum = 0, 
                i._POOL.push(this);
            }
        }, {
            key: "destroy",
            value: function() {
                this._ib.destroy(), this._vb.destroy(), this._ib.disposeResource(), this._vb.deleteBuffer();
            }
        } ], [ {
            key: "__init__",
            value: function() {
                i._fixattriInfo = [ 5126, 4, 0, 5121, 4, 16, 5121, 4, 20 ];
            }
        }, {
            key: "getAMesh",
            value: function(t) {
                var e;
                return e = i._POOL.length ? i._POOL.pop() : new i(), t && e._vb._resizeBuffer(65536 * i.const_stride, !1), 
                e;
            }
        } ]), i;
    }(Dt);
    Ft.const_stride = 24, Ft._POOL = [];
    var Ot = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this, i.const_stride, 4, 4)).canReuse = !0, 
            t.setAttributes(i._fixattriInfo), t;
        }
        return (0, s.default)(i, [ {
            key: "addVertAndIBToMesh",
            value: function(t, e, n, r) {
                for (var a = this._vb.needSize(e.length / 2 * i.const_stride) >> 2, s = this._vb._floatArray32 || this._vb.getFloat32Array(), o = this._vb._uint32Array, l = 0, h = e.length / 2, u = 0; u < h; u++) s[a++] = e[l], 
                s[a++] = e[l + 1], l += 2, o[a++] = n;
                this._vb.setNeedUpload(), this._ib.append(new Uint16Array(r)), this._ib.setNeedUpload(), 
                this.vertNum += h, this.indexNum += r.length;
            }
        }, {
            key: "releaseMesh",
            value: function() {
                this._vb.setByteLength(0), this._ib.setByteLength(0), this.vertNum = 0, this.indexNum = 0, 
                i._POOL.push(this);
            }
        }, {
            key: "destroy",
            value: function() {
                this._ib.destroy(), this._vb.destroy(), this._ib.disposeResource(), this._vb.deleteBuffer();
            }
        } ], [ {
            key: "__init__",
            value: function() {
                i._fixattriInfo = [ 5126, 2, 0, 5121, 4, 8 ];
            }
        }, {
            key: "getAMesh",
            value: function(t) {
                var e;
                return e = i._POOL.length ? i._POOL.pop() : new i(), t && e._vb._resizeBuffer(65536 * i.const_stride, !1), 
                e;
            }
        } ]), i;
    }(Dt);
    Ot.const_stride = 12, Ot._POOL = [];
    var Nt = function() {
        function t(e, i) {
            (0, o.default)(this, t), this.submitStartPos = 0, this.submitEndPos = 0, this.touches = [], 
            this.submits = [], this.sprite = null, this.meshlist = [], this.cachedClipInfo = new k(), 
            this.oldTx = 0, this.oldTy = 0, this.invMat = new k(), this.context = e, this.sprite = i, 
            e._globalClipMatrix.copyTo(this.cachedClipInfo);
        }
        return (0, s.default)(t, [ {
            key: "startRec",
            value: function() {
                var t = this.context;
                t._charSubmitCache && t._charSubmitCache._enable && (t._charSubmitCache.enable(!1, t), 
                t._charSubmitCache.enable(!0, t)), t._incache = !0, this.touches.length = 0, t.touches = this.touches, 
                t._globalClipMatrix.copyTo(this.cachedClipInfo), this.submits.length = 0, this.submitStartPos = t._submits._length;
                for (var e = 0, i = this.meshlist.length; e < i; e++) {
                    var n = this.meshlist[e];
                    n.canReuse ? n.releaseMesh() : n.destroy();
                }
                this.meshlist.length = 0, this._mesh = Bt.getAMesh(!1), this._pathMesh = Ot.getAMesh(!1), 
                this._triangleMesh = Ft.getAMesh(!1), this.meshlist.push(this._mesh), this.meshlist.push(this._pathMesh), 
                this.meshlist.push(this._triangleMesh), t._curSubmit = xt.RENDERBASE, this._oldMesh = t._mesh, 
                this._oldPathMesh = t._pathMesh, this._oldTriMesh = t._triangleMesh, this._oldMeshList = t.meshlist, 
                t._mesh = this._mesh, t._pathMesh = this._pathMesh, t._triangleMesh = this._triangleMesh, 
                t.meshlist = this.meshlist, this.oldTx = t._curMat.tx, this.oldTy = t._curMat.ty, 
                t._curMat.tx = 0, t._curMat.ty = 0, t._curMat.copyTo(this.invMat), this.invMat.invert();
            }
        }, {
            key: "endRec",
            value: function() {
                var t = this.context;
                t._charSubmitCache && t._charSubmitCache._enable && (t._charSubmitCache.enable(!1, t), 
                t._charSubmitCache.enable(!0, t));
                var e = t._submits;
                this.submitEndPos = e._length;
                for (var i = this.submitEndPos - this.submitStartPos, n = 0; n < i; n++) this.submits.push(e[this.submitStartPos + n]);
                e._length -= i, t._mesh = this._oldMesh, t._pathMesh = this._oldPathMesh, t._triangleMesh = this._oldTriMesh, 
                t.meshlist = this._oldMeshList, t._curSubmit = xt.RENDERBASE, t._curMat.tx = this.oldTx, 
                t._curMat.ty = this.oldTy, t.touches = null, t._incache = !1;
            }
        }, {
            key: "isCacheValid",
            value: function() {
                var t = this.context._globalClipMatrix;
                return t.a == this.cachedClipInfo.a && t.b == this.cachedClipInfo.b && t.c == this.cachedClipInfo.c && t.d == this.cachedClipInfo.d && t.tx == this.cachedClipInfo.tx && t.ty == this.cachedClipInfo.ty;
            }
        }, {
            key: "flushsubmit",
            value: function() {
                var t = xt.RENDERBASE;
                this.submits.forEach(function(e) {
                    e != xt.RENDERBASE && (xt.preRender = t, t = e, e.renderSubmit());
                });
            }
        }, {
            key: "releaseMem",
            value: function() {}
        } ]), t;
    }();
    Nt.matI = new k();
    var Ut = function() {
        function t() {
            (0, o.default)(this, t), this.ALPHA = 1, this.defines = new Q(), this.shaderType = 0, 
            this.fillStyle = gt.DEFAULT, this.strokeStyle = gt.DEFAULT;
        }
        return (0, s.default)(t, [ {
            key: "destroy",
            value: function() {
                this.defines = null, this.filters = null;
            }
        } ], [ {
            key: "__init__",
            value: function() {
                tt.preCompile2D(0, Q.TEXTURE2D, "/*\n\ttexture和fillrect使用的。\n*/\nattribute vec4 posuv;\nattribute vec4 attribColor;\nattribute vec4 attribFlags;\n//attribute vec4 clipDir;\n//attribute vec2 clipRect;\nuniform vec4 clipMatDir;\nuniform vec2 clipMatPos;\t\t// 这个是全局的，不用再应用矩阵了。\nvarying vec2 cliped;\nuniform vec2 size;\nuniform vec2 clipOff;\t\t\t// 使用要把clip偏移。cacheas normal用. 只用了[0]\n#ifdef WORLDMAT\n\tuniform mat4 mmat;\n#endif\n#ifdef MVP3D\n\tuniform mat4 u_MvpMatrix;\n#endif\nvarying vec4 v_texcoordAlpha;\nvarying vec4 v_color;\nvarying float v_useTex;\n\nvoid main() {\n\n\tvec4 pos = vec4(posuv.xy,0.,1.);\n#ifdef WORLDMAT\n\tpos=mmat*pos;\n#endif\n\tvec4 pos1  =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,0.,1.0);\n#ifdef MVP3D\n\tgl_Position=u_MvpMatrix*pos1;\n#else\n\tgl_Position=pos1;\n#endif\n\tv_texcoordAlpha.xy = posuv.zw;\n\t//v_texcoordAlpha.z = attribColor.a/255.0;\n\tv_color = attribColor/255.0;\n\tv_color.xyz*=v_color.w;//反正后面也要预乘\n\t\n\tv_useTex = attribFlags.r/255.0;\n\tfloat clipw = length(clipMatDir.xy);\n\tfloat cliph = length(clipMatDir.zw);\n\t\n\tvec2 clpos = clipMatPos.xy;\n\t#ifdef WORLDMAT\n\t\t// 如果有mmat，需要修改clipMatPos,因为 这是cacheas normal （如果不是就错了）， clipMatPos被去掉了偏移\n\t\tif(clipOff[0]>0.0){\n\t\t\tclpos.x+=mmat[3].x;\t//tx\t最简单处理\n\t\t\tclpos.y+=mmat[3].y;\t//ty\n\t\t}\n\t#endif\n\tvec2 clippos = pos.xy - clpos;\t//pos已经应用矩阵了，为了减的有意义，clip的位置也要缩放\n\tif(clipw>20000. && cliph>20000.)\n\t\tcliped = vec2(0.5,0.5);\n\telse {\n\t\t//转成0到1之间。/clipw/clipw 表示clippos与normalize之后的clip朝向点积之后，再除以clipw\n\t\tcliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\n\t}\n\n}", "/*\r\n\ttexture和fillrect使用的。\r\n*/\r\n#if defined(GL_FRAGMENT_PRECISION_HIGH)// 原来的写法会被我们自己的解析流程处理，而我们的解析是不认内置宏的，导致被删掉，所以改成 if defined 了\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_texcoordAlpha;\r\nvarying vec4 v_color;\r\nvarying float v_useTex;\r\nuniform sampler2D texture;\r\nvarying vec2 cliped;\r\n\r\n#ifdef BLUR_FILTER\r\nuniform vec4 strength_sig2_2sig2_gauss1;\r\nuniform vec2 blurInfo;\r\n\r\n#define PI 3.141593\r\n\r\nfloat getGaussian(float x, float y){\r\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\r\n}\r\n\r\nvec4 blur(){\r\n    const float blurw = 9.0;\r\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\r\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \r\n    vec2 startpos=v_texcoordAlpha.xy-halfsz;\r\n    vec2 ctexcoord = startpos;\r\n    vec2 step = 1.0/blurInfo;  //每个像素      \r\n    \r\n    for(float y = 0.0;y<=blurw; ++y){\r\n        ctexcoord.x=startpos.x;\r\n        for(float x = 0.0;x<=blurw; ++x){\r\n            //TODO 纹理坐标的固定偏移应该在vs中处理\r\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\r\n            ctexcoord.x+=step.x;\r\n        }\r\n        ctexcoord.y+=step.y;\r\n    }\r\n    return vec4Color;\r\n}\r\n#endif\r\n\r\n#ifdef COLOR_FILTER\r\nuniform vec4 colorAlpha;\r\nuniform mat4 colorMat;\r\n#endif\r\n\r\n#ifdef GLOW_FILTER\r\nuniform vec4 u_color;\r\nuniform vec4 u_blurInfo1;\r\nuniform vec4 u_blurInfo2;\r\n#endif\r\n\r\n#ifdef COLOR_ADD\r\nuniform vec4 colorAdd;\r\n#endif\r\n\r\n#ifdef FILLTEXTURE\t\r\nuniform vec4 u_TexRange;//startu,startv,urange, vrange\r\n#endif\r\nvoid main() {\r\n\tif(cliped.x<0.) discard;\r\n\tif(cliped.x>1.) discard;\r\n\tif(cliped.y<0.) discard;\r\n\tif(cliped.y>1.) discard;\r\n\t\r\n#ifdef FILLTEXTURE\t\r\n   vec4 color= texture2D(texture, fract(v_texcoordAlpha.xy)*u_TexRange.zw + u_TexRange.xy);\r\n#else\r\n   vec4 color= texture2D(texture, v_texcoordAlpha.xy);\r\n#endif\r\n\r\n   if(v_useTex<=0.)color = vec4(1.,1.,1.,1.);\r\n   color.a*=v_color.w;\r\n   //color.rgb*=v_color.w;\r\n   color.rgb*=v_color.rgb;\r\n   gl_FragColor=color;\r\n   \r\n   #ifdef COLOR_ADD\r\n\tgl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\r\n\tgl_FragColor.xyz *= colorAdd.a;\r\n   #endif\r\n   \r\n   #ifdef BLUR_FILTER\r\n\tgl_FragColor =   blur();\r\n\tgl_FragColor.w*=v_color.w;   \r\n   #endif\r\n   \r\n   #ifdef COLOR_FILTER\r\n\tmat4 alphaMat =colorMat;\r\n\r\n\talphaMat[0][3] *= gl_FragColor.a;\r\n\talphaMat[1][3] *= gl_FragColor.a;\r\n\talphaMat[2][3] *= gl_FragColor.a;\r\n\r\n\tgl_FragColor = gl_FragColor * alphaMat;\r\n\tgl_FragColor += colorAlpha/255.0*gl_FragColor.a;\r\n   #endif\r\n   \r\n   #ifdef GLOW_FILTER\r\n\tconst float c_IterationTime = 10.0;\r\n\tfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\r\n\tvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\r\n\tvec2 vec2FilterDir = vec2(-(u_blurInfo1.z)/u_blurInfo2.x,-(u_blurInfo1.w)/u_blurInfo2.y);\r\n\tvec2 vec2FilterOff = vec2(u_blurInfo1.x/u_blurInfo2.x/c_IterationTime * 2.0,u_blurInfo1.y/u_blurInfo2.y/c_IterationTime * 2.0);\r\n\tfloat maxNum = u_blurInfo1.x * u_blurInfo1.y;\r\n\tvec2 vec2Off = vec2(0.0,0.0);\r\n\tfloat floatOff = c_IterationTime/2.0;\r\n\tfor(float i = 0.0;i<=c_IterationTime; ++i){\r\n\t\tfor(float j = 0.0;j<=c_IterationTime; ++j){\r\n\t\t\tvec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\r\n\t\t\tvec4Color += texture2D(texture, v_texcoordAlpha.xy + vec2FilterDir + vec2Off)/floatIterationTotalTime;\r\n\t\t}\r\n\t}\r\n\tgl_FragColor = vec4(u_color.rgb,vec4Color.a * u_blurInfo2.z);\r\n\tgl_FragColor.rgb *= gl_FragColor.a;   \r\n   #endif\r\n   \r\n}", null), 
                tt.preCompile2D(0, Q.PRIMITIVE, "attribute vec4 position;\nattribute vec4 attribColor;\n//attribute vec4 clipDir;\n//attribute vec2 clipRect;\nuniform vec4 clipMatDir;\nuniform vec2 clipMatPos;\n#ifdef WORLDMAT\n\tuniform mat4 mmat;\n#endif\nuniform mat4 u_mmat2;\n//uniform vec2 u_pos;\nuniform vec2 size;\nvarying vec4 color;\n//vec4 dirxy=vec4(0.9,0.1, -0.1,0.9);\n//vec4 clip=vec4(100.,30.,300.,600.);\nvarying vec2 cliped;\nvoid main(){\n\t\n#ifdef WORLDMAT\n\tvec4 pos=mmat*vec4(position.xy,0.,1.);\n\tgl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n#else\n\tgl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n#endif\t\n\tfloat clipw = length(clipMatDir.xy);\n\tfloat cliph = length(clipMatDir.zw);\n\tvec2 clippos = position.xy - clipMatPos.xy;\t//pos已经应用矩阵了，为了减的有意义，clip的位置也要缩放\n\tif(clipw>20000. && cliph>20000.)\n\t\tcliped = vec2(0.5,0.5);\n\telse {\n\t\t//clipdir是带缩放的方向，由于上面clippos是在缩放后的空间计算的，所以需要把方向先normalize一下\n\t\tcliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\n\t}\n  //pos2d.x = dot(clippos,dirx);\n  color=attribColor/255.;\n}", "precision mediump float;\n//precision mediump float;\nvarying vec4 color;\n//uniform float alpha;\nvarying vec2 cliped;\nvoid main(){\n\t//vec4 a=vec4(color.r, color.g, color.b, 1);\n\t//a.a*=alpha;\n    gl_FragColor= color;// vec4(color.r, color.g, color.b, alpha);\n\tgl_FragColor.rgb*=color.a;\n\tif(cliped.x<0.) discard;\n\tif(cliped.x>1.) discard;\n\tif(cliped.y<0.) discard;\n\tif(cliped.y>1.) discard;\n}", null), 
                tt.preCompile2D(0, Q.SKINMESH, "attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_color.rgb *= v_color.a;\n  v_texcoord = texcoord;  \n}", "precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n\tvec4 t_color = texture2D(texture, v_texcoord);\n\tgl_FragColor = t_color.rgba * v_color;\n\tgl_FragColor *= alpha;\n}", null);
            }
        } ]), t;
    }(), Gt = function() {
        function t() {
            (0, o.default)(this, t);
            var e = A.instance;
            this.ib = Pt.create(e.DYNAMIC_DRAW), this.vb = Lt.create(8);
        }
        return (0, s.default)(t, [ {
            key: "addSkinMesh",
            value: function(t) {
                t.getData2(this.vb, this.ib, this.vb._byteLength / 32);
            }
        }, {
            key: "reset",
            value: function() {
                this.vb.clear(), this.ib.clear();
            }
        } ], [ {
            key: "getInstance",
            value: function() {
                return t.instance = t.instance || new t();
            }
        } ]), t;
    }(), Wt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "createLine2",
            value: function(e, i, n, r, a, s) {
                if (e.length < 4) return null;
                var o = t.tempData.length > e.length + 2 ? t.tempData : new Array(e.length + 2);
                o[0] = e[0], o[1] = e[1];
                var l = 2, h = 0, u = e.length;
                for (h = 2; h < u; h += 2) Math.abs(e[h] - e[h - 2]) + Math.abs(e[h + 1] - e[h - 1]) > .01 && (o[l++] = e[h], 
                o[l++] = e[h + 1]);
                s && Math.abs(e[0] - o[l - 2]) + Math.abs(e[1] - o[l - 1]) > .01 && (o[l++] = e[0], 
                o[l++] = e[1]);
                var c = a;
                u = l / 2;
                var _, d, f, v, p, y, g, m, T, x, k, E, R, A, C, b, S, w, M, I, P = n / 2;
                for (f = o[0], v = o[1], x = f - (p = o[2]), T = (T = -(v - (y = o[3]))) / (I = Math.sqrt(T * T + x * x)) * P, 
                x = x / I * P, c.push(f - T, v - x, f + T, v + x), h = 1; h < u - 1; h++) f = o[2 * (h - 1)], 
                v = o[2 * (h - 1) + 1], p = o[2 * h], y = o[2 * h + 1], g = o[2 * (h + 1)], m = o[2 * (h + 1) + 1], 
                x = f - p, E = p - g, C = (-(T = (T = -(v - y)) / (I = Math.sqrt(T * T + x * x)) * P) + f) * (-(x = x / I * P) + y) - (-T + p) * (-x + v), 
                w = (-(k = (k = -(y - m)) / (I = Math.sqrt(k * k + E * E)) * P) + g) * (-(E = E / I * P) + y) - (-k + p) * (-E + m), 
                M = (R = -x + v - (-x + y)) * (S = -k + p - (-k + g)) - (b = -E + m - (-E + y)) * (A = -T + p - (-T + f)), 
                Math.abs(M) < .1 ? (M += 10.1, c.push(p - T, y - x, p + T, y + x)) : (_ = (A * w - S * C) / M, 
                d = (b * C - R * w) / M, c.push(_, d, p - (_ - p), y - (d - y)));
                for (f = o[l - 4], v = o[l - 3], x = f - (p = o[l - 2]), T = (T = -(v - (y = o[l - 1]))) / (I = Math.sqrt(T * T + x * x)) * P, 
                x = x / I * P, c.push(p - T, y - x, p + T, y + x), h = 1; h < u; h++) i.push(r + 2 * (h - 1), r + 2 * (h - 1) + 1, r + 2 * h + 1, r + 2 * h + 1, r + 2 * h, r + 2 * (h - 1));
                return c;
            }
        }, {
            key: "createLineTriangle",
            value: function(t, e, i, n, r, a, s) {
                var o = t.slice(), l = o.length, h = o[0], u = o[1], c = o[2], _ = (o[2], 0), d = 0, f = 0, v = 0, p = l / 2;
                if (!(p <= 1) && 2 != p) {
                    for (var y = new Array(4 * p), g = 0, m = 0, T = 0; T < p - 1; T++) h = o[m++], 
                    u = o[m++], c = o[m++], v = o[m++] - u, 0 != (f = c - h) && 0 != v && (_ = Math.sqrt(f * f + v * v)) > .001 && (y[d = 4 * g] = h, 
                    y[d + 1] = u, y[d + 2] = f / _, y[d + 3] = v / _, g++);
                    for (n ? (h = o[l - 2], u = o[l - 1], c = o[0], v = o[1] - u, 0 != (f = c - h) && 0 != v && (_ = Math.sqrt(f * f + v * v)) > .001 && (y[d = 4 * g] = h, 
                    y[d + 1] = u, y[d + 2] = f / _, y[d + 3] = v / _, g++)) : (y[d = 4 * g] = h, y[d + 1] = u, 
                    y[d + 2] = f / _, y[d + 3] = v / _, g++), m = 0, T = 0; T < p; T++) h = o[m], u = o[m + 1], 
                    c = o[m + 2], o[m + 3];
                }
            }
        } ]), t;
    }();
    Wt.tempData = new Array(256);
    var Yt = function t(e, i, n) {
        (0, o.default)(this, t), this.i = e, this.x = i, this.y = n, this.prev = null, this.next = null, 
        this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
    }, Vt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "earcut",
            value: function(e, i, n) {
                n = n || 2;
                var r, a, s, o, l, h, u, c = i && i.length, _ = c ? i[0] * n : e.length, d = t.linkedList(e, 0, _, n, !0), f = [];
                if (!d) return f;
                if (c && (d = t.eliminateHoles(e, i, d, n)), e.length > 80 * n) {
                    r = s = e[0], a = o = e[1];
                    for (var v = n; v < _; v += n) (l = e[v]) < r && (r = l), (h = e[v + 1]) < a && (a = h), 
                    l > s && (s = l), h > o && (o = h);
                    u = 0 !== (u = Math.max(s - r, o - a)) ? 1 / u : 0;
                }
                return t.earcutLinked(d, f, n, r, a, u), f;
            }
        }, {
            key: "linkedList",
            value: function(e, i, n, r, a) {
                var s, o;
                if (a === t.signedArea(e, i, n, r) > 0) for (s = i; s < n; s += r) o = t.insertNode(s, e[s], e[s + 1], o); else for (s = n - r; s >= i; s -= r) o = t.insertNode(s, e[s], e[s + 1], o);
                return o && t.equals(o, o.next) && (t.removeNode(o), o = o.next), o;
            }
        }, {
            key: "filterPoints",
            value: function(e, i) {
                if (!e) return e;
                i || (i = e);
                var n, r = e;
                do {
                    if (n = !1, r.steiner || !t.equals(r, r.next) && 0 !== t.area(r.prev, r, r.next)) r = r.next; else {
                        if (t.removeNode(r), (r = i = r.prev) === r.next) break;
                        n = !0;
                    }
                } while (n || r !== i);
                return i;
            }
        }, {
            key: "earcutLinked",
            value: function(e, i, n, r, a, s) {
                var o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
                if (e) {
                    !o && s && t.indexCurve(e, r, a, s);
                    for (var l, h, u = e; e.prev !== e.next; ) if (l = e.prev, h = e.next, s ? t.isEarHashed(e, r, a, s) : t.isEar(e)) i.push(l.i / n), 
                    i.push(e.i / n), i.push(h.i / n), t.removeNode(e), e = h.next, u = h.next; else if ((e = h) === u) {
                        o ? 1 === o ? (e = t.cureLocalIntersections(e, i, n), t.earcutLinked(e, i, n, r, a, s, 2)) : 2 === o && t.splitEarcut(e, i, n, r, a, s) : t.earcutLinked(t.filterPoints(e, null), i, n, r, a, s, 1);
                        break;
                    }
                }
            }
        }, {
            key: "isEar",
            value: function(e) {
                var i = e.prev, n = e, r = e.next;
                if (t.area(i, n, r) >= 0) return !1;
                for (var a = e.next.next; a !== e.prev; ) {
                    if (t.pointInTriangle(i.x, i.y, n.x, n.y, r.x, r.y, a.x, a.y) && t.area(a.prev, a, a.next) >= 0) return !1;
                    a = a.next;
                }
                return !0;
            }
        }, {
            key: "isEarHashed",
            value: function(e, i, n, r) {
                var a = e.prev, s = e, o = e.next;
                if (t.area(a, s, o) >= 0) return !1;
                for (var l = a.x < s.x ? a.x < o.x ? a.x : o.x : s.x < o.x ? s.x : o.x, h = a.y < s.y ? a.y < o.y ? a.y : o.y : s.y < o.y ? s.y : o.y, u = a.x > s.x ? a.x > o.x ? a.x : o.x : s.x > o.x ? s.x : o.x, c = a.y > s.y ? a.y > o.y ? a.y : o.y : s.y > o.y ? s.y : o.y, _ = t.zOrder(l, h, i, n, r), d = t.zOrder(u, c, i, n, r), f = e.nextZ; f && f.z <= d; ) {
                    if (f !== e.prev && f !== e.next && t.pointInTriangle(a.x, a.y, s.x, s.y, o.x, o.y, f.x, f.y) && t.area(f.prev, f, f.next) >= 0) return !1;
                    f = f.nextZ;
                }
                for (f = e.prevZ; f && f.z >= _; ) {
                    if (f !== e.prev && f !== e.next && t.pointInTriangle(a.x, a.y, s.x, s.y, o.x, o.y, f.x, f.y) && t.area(f.prev, f, f.next) >= 0) return !1;
                    f = f.prevZ;
                }
                return !0;
            }
        }, {
            key: "cureLocalIntersections",
            value: function(e, i, n) {
                var r = e;
                do {
                    var a = r.prev, s = r.next.next;
                    !t.equals(a, s) && t.intersects(a, r, r.next, s) && t.locallyInside(a, s) && t.locallyInside(s, a) && (i.push(a.i / n), 
                    i.push(r.i / n), i.push(s.i / n), t.removeNode(r), t.removeNode(r.next), r = e = s), 
                    r = r.next;
                } while (r !== e);
                return r;
            }
        }, {
            key: "splitEarcut",
            value: function(e, i, n, r, a, s) {
                var o = e;
                do {
                    for (var l = o.next.next; l !== o.prev; ) {
                        if (o.i !== l.i && t.isValidDiagonal(o, l)) {
                            var h = t.splitPolygon(o, l);
                            return o = t.filterPoints(o, o.next), h = t.filterPoints(h, h.next), t.earcutLinked(o, i, n, r, a, s), 
                            void t.earcutLinked(h, i, n, r, a, s);
                        }
                        l = l.next;
                    }
                    o = o.next;
                } while (o !== e);
            }
        }, {
            key: "eliminateHoles",
            value: function(e, i, n, r) {
                var a, s, o, l, h, u = [];
                for (a = 0, s = i.length; a < s; a++) o = i[a] * r, l = a < s - 1 ? i[a + 1] * r : e.length, 
                (h = t.linkedList(e, o, l, r, !1)) === h.next && (h.steiner = !0), u.push(t.getLeftmost(h));
                for (u.sort(t.compareX), a = 0; a < u.length; a++) t.eliminateHole(u[a], n), n = t.filterPoints(n, n.next);
                return n;
            }
        }, {
            key: "compareX",
            value: function(t, e) {
                return t.x - e.x;
            }
        }, {
            key: "eliminateHole",
            value: function(e, i) {
                if (i = t.findHoleBridge(e, i)) {
                    var n = t.splitPolygon(i, e);
                    t.filterPoints(n, n.next);
                }
            }
        }, {
            key: "findHoleBridge",
            value: function(e, i) {
                var n, r = i, a = e.x, s = e.y, o = -1 / 0;
                do {
                    if (s <= r.y && s >= r.next.y && r.next.y !== r.y) {
                        var l = r.x + (s - r.y) * (r.next.x - r.x) / (r.next.y - r.y);
                        if (l <= a && l > o) {
                            if (o = l, l === a) {
                                if (s === r.y) return r;
                                if (s === r.next.y) return r.next;
                            }
                            n = r.x < r.next.x ? r : r.next;
                        }
                    }
                    r = r.next;
                } while (r !== i);
                if (!n) return null;
                if (a === o) return n.prev;
                var h, u = n, c = n.x, _ = n.y, d = 1 / 0;
                for (r = n.next; r !== u; ) a >= r.x && r.x >= c && a !== r.x && t.pointInTriangle(s < _ ? a : o, s, c, _, s < _ ? o : a, s, r.x, r.y) && ((h = Math.abs(s - r.y) / (a - r.x)) < d || h === d && r.x > n.x) && t.locallyInside(r, e) && (n = r, 
                d = h), r = r.next;
                return n;
            }
        }, {
            key: "indexCurve",
            value: function(e, i, n, r) {
                var a = e;
                do {
                    null === a.z && (a.z = t.zOrder(a.x, a.y, i, n, r)), a.prevZ = a.prev, a.nextZ = a.next, 
                    a = a.next;
                } while (a !== e);
                a.prevZ.nextZ = null, a.prevZ = null, t.sortLinked(a);
            }
        }, {
            key: "sortLinked",
            value: function(t) {
                var e, i, n, r, a, s, o, l, h = 1;
                do {
                    for (i = t, t = null, a = null, s = 0; i; ) {
                        for (s++, n = i, o = 0, e = 0; e < h && (o++, n = n.nextZ); e++) ;
                        for (l = h; o > 0 || l > 0 && n; ) 0 !== o && (0 === l || !n || i.z <= n.z) ? (r = i, 
                        i = i.nextZ, o--) : (r = n, n = n.nextZ, l--), a ? a.nextZ = r : t = r, r.prevZ = a, 
                        a = r;
                        i = n;
                    }
                    a.nextZ = null, h *= 2;
                } while (s > 1);
                return t;
            }
        }, {
            key: "zOrder",
            value: function(t, e, i, n, r) {
                return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) * r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) * r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
            }
        }, {
            key: "getLeftmost",
            value: function(t) {
                var e = t, i = t;
                do {
                    e.x < i.x && (i = e), e = e.next;
                } while (e !== t);
                return i;
            }
        }, {
            key: "pointInTriangle",
            value: function(t, e, i, n, r, a, s, o) {
                return (r - s) * (e - o) - (t - s) * (a - o) >= 0 && (t - s) * (n - o) - (i - s) * (e - o) >= 0 && (i - s) * (a - o) - (r - s) * (n - o) >= 0;
            }
        }, {
            key: "isValidDiagonal",
            value: function(e, i) {
                return e.next.i !== i.i && e.prev.i !== i.i && !t.intersectsPolygon(e, i) && t.locallyInside(e, i) && t.locallyInside(i, e) && t.middleInside(e, i);
            }
        }, {
            key: "area",
            value: function(t, e, i) {
                return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y);
            }
        }, {
            key: "equals",
            value: function(t, e) {
                return t.x === e.x && t.y === e.y;
            }
        }, {
            key: "intersects",
            value: function(e, i, n, r) {
                return !!(t.equals(e, i) && t.equals(n, r) || t.equals(e, r) && t.equals(n, i)) || t.area(e, i, n) > 0 != t.area(e, i, r) > 0 && t.area(n, r, e) > 0 != t.area(n, r, i) > 0;
            }
        }, {
            key: "intersectsPolygon",
            value: function(e, i) {
                var n = e;
                do {
                    if (n.i !== e.i && n.next.i !== e.i && n.i !== i.i && n.next.i !== i.i && t.intersects(n, n.next, e, i)) return !0;
                    n = n.next;
                } while (n !== e);
                return !1;
            }
        }, {
            key: "locallyInside",
            value: function(e, i) {
                return t.area(e.prev, e, e.next) < 0 ? t.area(e, i, e.next) >= 0 && t.area(e, e.prev, i) >= 0 : t.area(e, i, e.prev) < 0 || t.area(e, e.next, i) < 0;
            }
        }, {
            key: "middleInside",
            value: function(t, e) {
                var i = t, n = !1, r = (t.x + e.x) / 2, a = (t.y + e.y) / 2;
                do {
                    i.y > a != i.next.y > a && i.next.y !== i.y && r < (i.next.x - i.x) * (a - i.y) / (i.next.y - i.y) + i.x && (n = !n), 
                    i = i.next;
                } while (i !== t);
                return n;
            }
        }, {
            key: "splitPolygon",
            value: function(t, e) {
                var i = new Yt(t.i, t.x, t.y), n = new Yt(e.i, e.x, e.y), r = t.next, a = e.prev;
                return t.next = e, e.prev = t, i.next = r, r.prev = i, n.next = i, i.prev = n, a.next = n, 
                n.prev = a, n;
            }
        }, {
            key: "insertNode",
            value: function(t, e, i, n) {
                var r = new Yt(t, e, i);
                return n ? (r.next = n.next, r.prev = n, n.next.prev = r, n.next = r) : (r.prev = r, 
                r.next = r), r;
            }
        }, {
            key: "removeNode",
            value: function(t) {
                t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), 
                t.nextZ && (t.nextZ.prevZ = t.prevZ);
            }
        }, {
            key: "signedArea",
            value: function(t, e, i, n) {
                for (var r = 0, a = e, s = i - n; a < i; a += n) r += (t[s] - t[a]) * (t[a + 1] + t[s + 1]), 
                s = a;
                return r;
            }
        } ]), t;
    }(), Xt = function t() {
        (0, o.default)(this, t);
    };
    Xt.BYTES_PE = 4, Xt.BYTES_PIDX = 2, Xt.defaultMatrix4 = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], 
    Xt.defaultMinusYMatrix4 = [ 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], Xt.uniformMatrix3 = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0 ], 
    Xt._TMPARRAY = [], Xt._OFFSETX = 0, Xt._OFFSETY = 0;
    var Ht = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xt.TYPE_2D;
            return (0, o.default)(this, i), e.call(this, t);
        }
        return (0, s.default)(i, [ {
            key: "renderSubmit",
            value: function() {
                if (0 === this._numEle || !this._mesh || 0 == this._numEle) return 1;
                var t = this.shaderValue.textureHost;
                if (t) {
                    var e = t._getSource();
                    if (!e) return 1;
                    this.shaderValue.texture = e;
                }
                var i = L.mainContext;
                return this._mesh.useMesh(i), this.shaderValue.upload(), q.activeBlendFunction !== this._blendFn && (L.setBlend(i, !0), 
                this._blendFn(i), q.activeBlendFunction = this._blendFn), i.drawElements(i.TRIANGLES, this._numEle, i.UNSIGNED_SHORT, this._startIdx), 
                $.renderBatches++, $.trianglesFaces += this._numEle / 3, 1;
            }
        }, {
            key: "releaseRender",
            value: function() {
                xt.RENDERBASE != this && --this._ref < 1 && (i.POOL[i._poolSize++] = this, this.shaderValue.release(), 
                this.shaderValue = null, this._mesh = null, this._parent && (this._parent.releaseRender(), 
                this._parent = null));
            }
        } ], [ {
            key: "create",
            value: function(t, e, n) {
                var r = i._poolSize ? i.POOL[--i._poolSize] : new i();
                r._ref = 1, r._mesh = e, r._key.clear(), r._startIdx = e.indexNum * Xt.BYTES_PIDX, 
                r._numEle = 0;
                var a = t._nBlendType;
                r._blendFn = t._targets ? q.targetFns[a] : q.fns[a], r.shaderValue = n, r.shaderValue.setValue(t._shader2D);
                var s = t._shader2D.filters;
                return s && r.shaderValue.setFilters(s), r;
            }
        }, {
            key: "createShape",
            value: function(t, e, n, r) {
                var a = i._poolSize ? i.POOL[--i._poolSize] : new i();
                a._mesh = e, a._numEle = n, a._startIdx = 2 * e.indexNum, a._ref = 1, a.shaderValue = r, 
                a.shaderValue.setValue(t._shader2D);
                var s = t._nBlendType;
                return a._key.blendShader = s, a._blendFn = t._targets ? q.targetFns[s] : q.fns[s], 
                a;
            }
        } ]), i;
    }(xt);
    Ht._poolSize = 0, Ht.POOL = [];
    var zt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this, xt.TYPE_2D))._matrix = new k(), 
            t._matrix4 = Xt.defaultMatrix4.concat(), t.shaderValue = new it(0, 0), t;
        }
        return (0, s.default)(i, [ {
            key: "renderSubmit",
            value: function() {
                var t = z.worldAlpha, e = z.worldMatrix4, i = z.worldMatrix, n = z.worldFilters, r = z.worldShaderDefines, a = this.shaderValue, s = this._matrix, o = this._matrix4, l = k.TEMP;
                return k.mul(s, i, l), o[0] = l.a, o[1] = l.b, o[4] = l.c, o[5] = l.d, o[12] = l.tx, 
                o[13] = l.ty, z.worldMatrix = l.clone(), z.worldMatrix4 = o, z.worldAlpha = z.worldAlpha * a.alpha, 
                a.filters && a.filters.length && (z.worldFilters = a.filters, z.worldShaderDefines = a.defines), 
                this.canv.flushsubmit(), z.worldAlpha = t, z.worldMatrix4 = e, z.worldMatrix.destroy(), 
                z.worldMatrix = i, z.worldFilters = n, z.worldShaderDefines = r, 1;
            }
        }, {
            key: "releaseRender",
            value: function() {
                if (--this._ref < 1) {
                    var t = i.POOL;
                    this._mesh = null, t[t._length++] = this;
                }
            }
        }, {
            key: "getRenderType",
            value: function() {
                return xt.TYPE_CANVAS;
            }
        } ], [ {
            key: "create",
            value: function(t, e, n) {
                var r = i.POOL._length ? i.POOL[--i.POOL._length] : new i();
                r.canv = t, r._ref = 1, r._numEle = 0;
                var a = r.shaderValue;
                return a.alpha = e, a.defines.setValue(0), n && n.length && a.setFilters(n), r;
            }
        } ]), i;
    }(xt);
    zt.POOL = [], zt.POOL._length = 0;
    var Kt = function() {
        function t() {
            (0, o.default)(this, t), this.blendType = 0, this._ref = 1, this._key = new nt();
        }
        return (0, s.default)(t, [ {
            key: "renderSubmit",
            value: function() {
                var t = L.mainContext;
                this._mesh.useMesh(t);
                var e = this.srcRT;
                return e && (this.shaderValue.texture = e._getSource(), this.shaderValue.upload(), 
                this.blend(), $.renderBatches++, $.trianglesFaces += this._numEle / 3, t.drawElements(t.TRIANGLES, this._numEle, t.UNSIGNED_SHORT, this._startIdx)), 
                1;
            }
        }, {
            key: "blend",
            value: function() {
                if (q.activeBlendFunction !== q.fns[this.blendType]) {
                    var t = L.mainContext;
                    t.enable(t.BLEND), q.fns[this.blendType](t), q.activeBlendFunction = q.fns[this.blendType];
                }
            }
        }, {
            key: "getRenderType",
            value: function() {
                return 0;
            }
        }, {
            key: "releaseRender",
            value: function() {
                if (--this._ref < 1) {
                    var e = t.POOL;
                    e[e._length++] = this;
                }
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r) {
                var a = t.POOL._length ? t.POOL[--t.POOL._length] : new t();
                if (a._mesh = i, a.srcRT = r, a._startIdx = i.indexNum * Xt.BYTES_PIDX, a._ref = 1, 
                a._key.clear(), a._numEle = 0, a.blendType = e._nBlendType, a._key.blendShader = a.blendType, 
                a.shaderValue = n, a.shaderValue.setValue(e._shader2D), e._colorFiler) {
                    var s = e._colorFiler;
                    n.defines.add(s.type), n.colorMat = s._mat, n.colorAlpha = s._alpha;
                }
                return a;
            }
        } ]), t;
    }();
    Kt.POOL = [], Kt.POOL._length = 0;
    var jt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xt.TYPE_2D;
            return (0, o.default)(this, i), e.call(this, t);
        }
        return (0, s.default)(i, [ {
            key: "releaseRender",
            value: function() {
                --this._ref < 1 && (i.POOL[i._poolSize++] = this, this.shaderValue.release(), this._mesh = null, 
                this._parent && (this._parent.releaseRender(), this._parent = null));
            }
        }, {
            key: "renderSubmit",
            value: function() {
                if (0 === this._numEle) return 1;
                var t = this.shaderValue.textureHost;
                if (t) {
                    var e = t ? t._getSource() : null;
                    if (!e) return 1;
                }
                var i = L.mainContext;
                this._mesh.useMesh(i);
                var n = xt.preRender, r = xt.preRender._key;
                return 0 === this._key.blendShader && this._key.submitType === r.submitType && this._key.blendShader === r.blendShader && H.activeShader && xt.preRender.clipInfoID == this.clipInfoID && n.shaderValue.defines._value === this.shaderValue.defines._value && 0 == (this.shaderValue.defines._value & Q.NOOPTMASK) ? H.activeShader.uploadTexture2D(e) : (q.activeBlendFunction !== this._blendFn && (L.setBlend(i, !0), 
                this._blendFn(i), q.activeBlendFunction = this._blendFn), this.shaderValue.texture = e, 
                this.shaderValue.upload()), i.drawElements(i.TRIANGLES, this._numEle, i.UNSIGNED_SHORT, this._startIdx), 
                $.renderBatches++, $.trianglesFaces += this._numEle / 3, 1;
            }
        } ], [ {
            key: "create",
            value: function(t, e, n) {
                var r = i._poolSize ? i.POOL[--i._poolSize] : new i(xt.TYPE_TEXTURE);
                r._mesh = e, r._key.clear(), r._key.submitType = xt.KEY_DRAWTEXTURE, r._ref = 1, 
                r._startIdx = e.indexNum * Xt.BYTES_PIDX, r._numEle = 0;
                var a = t._nBlendType;
                if (r._key.blendShader = a, r._blendFn = t._targets ? q.targetFns[a] : q.fns[a], 
                r.shaderValue = n, t._colorFiler) {
                    var s = t._colorFiler;
                    n.defines.add(s.type), n.colorMat = s._mat, n.colorAlpha = s._alpha;
                }
                return r;
            }
        } ]), i;
    }(xt);
    jt._poolSize = 0, jt.POOL = [];
    var qt = function() {
        function t() {
            (0, o.default)(this, t), this._data = [], this._ndata = 0, this._clipid = -1, this._clipMatrix = new k(), 
            this._enable = !1;
        }
        return (0, s.default)(t, [ {
            key: "clear",
            value: function() {
                this._tex = null, this._imgId = -1, this._ndata = 0, this._enable = !1, this._colorFiler = null;
            }
        }, {
            key: "destroy",
            value: function() {
                this.clear(), this._data.length = 0, this._data = null;
            }
        }, {
            key: "add",
            value: function(t, e, i, n, r, a) {
                this._ndata > 0 && (this._tex != e || this._imgId != i || this._clipid >= 0 && this._clipid != t._clipInfoID) && this.submit(t), 
                this._clipid = t._clipInfoID, t._globalClipMatrix.copyTo(this._clipMatrix), this._tex = e, 
                this._imgId = i, this._colorFiler = t._colorFiler, this._data[this._ndata] = n, 
                this._data[this._ndata + 1] = r, this._data[this._ndata + 2] = a, this._ndata += 3;
            }
        }, {
            key: "getPos",
            value: function() {
                return 0 == t.__nPosPool ? new Array(8) : t.__posPool[--t.__nPosPool];
            }
        }, {
            key: "enable",
            value: function(t, e) {
                t !== this._enable && (this._enable = t, this._enable || this.submit(e));
            }
        }, {
            key: "submit",
            value: function(e) {
                var i = this._ndata;
                if (i) {
                    var n = e._mesh, r = e._colorFiler;
                    e._colorFiler = this._colorFiler;
                    var a = jt.create(e, n, it.create(Q.TEXTURE2D, 0));
                    e._submits[e._submits._length++] = e._curSubmit = a, a.shaderValue.textureHost = this._tex, 
                    a._key.other = this._imgId, e._colorFiler = r, e._copyClipInfo(a, this._clipMatrix), 
                    a.clipInfoID = this._clipid;
                    for (var s = 0; s < i; s += 3) n.addQuad(this._data[s], this._data[s + 1], this._data[s + 2], !0), 
                    t.__posPool[t.__nPosPool++] = this._data[s];
                    i /= 3, a._numEle += 6 * i, n.indexNum += 6 * i, n.vertNum += 4 * i, e._drawCount += i, 
                    this._ndata = 0, Mt.loopCount % 100 == 0 && (this._data.length = 0);
                }
            }
        } ]), t;
    }();
    qt.__posPool = [], qt.__nPosPool = 0;
    var Zt = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
            (0, o.default)(this, t), this.atlasID = 0, this._width = 0, this._height = 0, this._texCount = 0, 
            this._rowInfo = null, this._cells = null, this._used = 0, this._cells = null, this._rowInfo = null, 
            this.atlasID = n, this._init(e, i);
        }
        return (0, s.default)(t, [ {
            key: "addRect",
            value: function(t, e, i, n) {
                return !!this._get(e, i, n) && (this._fill(n.x, n.y, e, i, t), this._texCount++, 
                !0);
            }
        }, {
            key: "_release",
            value: function() {
                this._cells = null, this._rowInfo = null;
            }
        }, {
            key: "_init",
            value: function(t, e) {
                return this._width = t, this._height = e, this._release(), 0 != this._width && (this._cells = new Uint8Array(this._width * this._height * 3), 
                this._rowInfo = new Uint8Array(this._height), this._used = 0, this._clear(), !0);
            }
        }, {
            key: "_get",
            value: function(t, e, i) {
                if (t > this._width || e > this._height) return !1;
                for (var n = -1, r = -1, a = this._width, s = this._height, o = this._cells, l = 0; l < s; l++) if (!(this._rowInfo[l] < t)) for (var h = 0; h < a; ) {
                    var u = 3 * (l * a + h);
                    if (0 != o[u] || o[u + 1] < t || o[u + 2] < e) h += o[u + 1]; else {
                        n = h, r = l;
                        for (var c = 0; c < t; c++) if (o[3 * c + u + 2] < e) {
                            n = -1;
                            break;
                        }
                        if (!(n < 0)) return i.x = n, i.y = r, !0;
                        h += o[u + 1];
                    }
                }
                return !1;
            }
        }, {
            key: "_fill",
            value: function(t, e, i, n, r) {
                var a = this._width, s = this._height;
                this._check(t + i <= a && e + n <= s);
                for (var o = e; o < n + e; ++o) {
                    this._check(this._rowInfo[o] >= i), this._rowInfo[o] -= i;
                    for (var l = 0; l < i; l++) {
                        var h = 3 * (t + o * a + l);
                        this._check(0 == this._cells[h]), this._cells[h] = r, this._cells[h + 1] = i, this._cells[h + 2] = n;
                    }
                }
                if (t > 0) for (o = 0; o < n; ++o) {
                    var u = 0;
                    for (l = t - 1; l >= 0 && 0 == this._cells[3 * ((e + o) * a + l)]; --l, ++u) ;
                    for (l = u; l > 0; --l) this._cells[3 * ((e + o) * a + t - l) + 1] = l, this._check(l > 0);
                }
                if (e > 0) for (l = t; l < t + i; ++l) {
                    for (u = 0, o = e - 1; o >= 0 && 0 == this._cells[3 * (l + o * a)]; --o, u++) ;
                    for (o = u; o > 0; --o) this._cells[3 * (l + (e - o) * a) + 2] = o, this._check(o > 0);
                }
                this._used += i * n / (this._width * this._height);
            }
        }, {
            key: "_check",
            value: function(t) {
                0 == t && console.log("xtexMerger 错误啦");
            }
        }, {
            key: "_clear",
            value: function() {
                this._texCount = 0;
                for (var t = 0; t < this._height; t++) this._rowInfo[t] = this._width;
                for (var e = 0; e < this._height; e++) for (var i = 0; i < this._width; i++) {
                    var n = 3 * (e * this._width + i);
                    this._cells[n] = 0, this._cells[n + 1] = this._width - i, this._cells[n + 2] = this._width - e;
                }
            }
        } ]), t;
    }(), Qt = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t, n) {
            var r;
            return (0, o.default)(this, i), (r = e.call(this))._texW = 0, r._texH = 0, r.__destroyed = !1, 
            r._discardTm = 0, r.genID = 0, r.bitmap = {
                id: 0,
                _glTexture: null
            }, r.curUsedCovRate = 0, r.curUsedCovRateAtlas = 0, r.lastTouchTm = 0, r.ri = null, 
            r._texW = t || i.gTextRender.atlasWidth, r._texH = n || i.gTextRender.atlasWidth, 
            r.bitmap.id = r.id, r.lock = !0, r;
        }
        return (0, s.default)(i, [ {
            key: "recreateResource",
            value: function() {
                if (!this._source) {
                    var t = A.instance, e = this._source = t.createTexture();
                    this.bitmap._glTexture = e, L.bindTexture(t, t.TEXTURE_2D, e), t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, this._texW, this._texH, 0, t.RGBA, t.UNSIGNED_BYTE, null), 
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.LINEAR), 
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), 
                    i.gTextRender.debugUV && this.fillWhite();
                }
            }
        }, {
            key: "addChar",
            value: function(t, e, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                if (i.gTextRender.isWan1Wan) return this.addCharCanvas(t, e, n, r);
                !this._source && this.recreateResource();
                var a = A.instance;
                L.bindTexture(a, a.TEXTURE_2D, this._source), !u.Render.isConchApp && a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0);
                var s, o, l, h, c = t.data;
                return t.data instanceof Uint8ClampedArray && (c = new Uint8Array(c.buffer)), a.texSubImage2D(a.TEXTURE_2D, 0, e, n, t.width, t.height, a.RGBA, a.UNSIGNED_BYTE, c), 
                !u.Render.isConchApp && a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1), s = e / this._texW, 
                o = n / this._texH, l = (e + t.width) / this._texW, h = (n + t.height) / this._texH, 
                (r = r || new Array(8))[0] = s, r[1] = o, r[2] = l, r[3] = o, r[4] = l, r[5] = h, 
                r[6] = s, r[7] = h, r;
            }
        }, {
            key: "addCharCanvas",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                !this._source && this.recreateResource();
                var r, a, s, o, l = A.instance;
                return L.bindTexture(l, l.TEXTURE_2D, this._source), !u.Render.isConchApp && l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0), 
                l.texSubImage2D(l.TEXTURE_2D, 0, e, i, l.RGBA, l.UNSIGNED_BYTE, t), !u.Render.isConchApp && l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1), 
                u.Render.isConchApp ? (r = e / this._texW, a = i / this._texH, s = (e + t.width) / this._texW, 
                o = (i + t.height) / this._texH) : (r = (e + 1) / this._texW, a = (i + 1) / this._texH, 
                s = (e + t.width - 1) / this._texW, o = (i + t.height - 1) / this._texH), (n = n || new Array(8))[0] = r, 
                n[1] = a, n[2] = s, n[3] = a, n[4] = s, n[5] = o, n[6] = r, n[7] = o, n;
            }
        }, {
            key: "fillWhite",
            value: function() {
                !this._source && this.recreateResource();
                var t = A.instance, e = new Uint8Array(this._texW * this._texH * 4);
                e.fill(255), t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, this._texW, this._texH, t.RGBA, t.UNSIGNED_BYTE, e);
            }
        }, {
            key: "discard",
            value: function() {
                u.stage.setGlobalRepaint(), this.destroy();
            }
        }, {
            key: "destroy",
            value: function() {
                this.__destroyed = !0;
                var t = A.instance;
                this._source && t.deleteTexture(this._source), this._source = null;
            }
        }, {
            key: "touchRect",
            value: function(t, e) {
                this.lastTouchTm != e && (this.curUsedCovRate = 0, this.curUsedCovRateAtlas = 0, 
                this.lastTouchTm = e);
                var n = i.gTextRender.atlasWidth * i.gTextRender.atlasWidth, r = u.TextAtlas.atlasGridW * u.TextAtlas.atlasGridW;
                this.curUsedCovRate += t.bmpWidth * t.bmpHeight / n, this.curUsedCovRateAtlas += Math.ceil(t.bmpWidth / u.TextAtlas.atlasGridW) * Math.ceil(t.bmpHeight / u.TextAtlas.atlasGridW) / (n / r);
            }
        }, {
            key: "_getSource",
            value: function() {
                return this._source;
            }
        }, {
            key: "drawOnScreen",
            value: function(t, e) {}
        }, {
            key: "texture",
            get: function() {
                return this;
            }
        } ], [ {
            key: "getTextTexture",
            value: function(t, e) {
                return new i(t, e);
            }
        }, {
            key: "clean",
            value: function() {
                var t = Mt.loopStTm;
                if (0 === i.cleanTm && (i.cleanTm = t), t - i.cleanTm >= i.gTextRender.checkCleanTextureDt) {
                    for (var e = 0; e < i.poolLen; e++) {
                        var n = i.pool[e];
                        t - n._discardTm >= i.gTextRender.destroyUnusedTextureDt && (n.destroy(), i.pool[e] = i.pool[i.poolLen - 1], 
                        i.poolLen--, e--);
                    }
                    i.cleanTm = t;
                }
            }
        } ]), i;
    }(N);
    Qt.gTextRender = null, Qt.pool = new Array(10), Qt.poolLen = 0, Qt.cleanTm = 0;
    var $t = function() {
        function t() {
            (0, o.default)(this, t), this.texWidth = 1024, this.texHeight = 1024, this.texture = null, 
            this.charMaps = {}, this.texHeight = this.texWidth = u.TextRender.atlasWidth, this.texture = Qt.getTextTexture(this.texWidth, this.texHeight), 
            this.texWidth / t.atlasGridW > 256 && (t.atlasGridW = Math.ceil(this.texWidth / 256)), 
            this.atlasgrid = new Zt(this.texWidth / t.atlasGridW, this.texHeight / t.atlasGridW, this.texture.id);
        }
        return (0, s.default)(t, [ {
            key: "setProtecteDist",
            value: function(t) {}
        }, {
            key: "getAEmpty",
            value: function(e, i, n) {
                var r = this.atlasgrid.addRect(1, Math.ceil(e / t.atlasGridW), Math.ceil(i / t.atlasGridW), n);
                return r && (n.x *= t.atlasGridW, n.y *= t.atlasGridW), r;
            }
        }, {
            key: "destroy",
            value: function() {
                for (var t in this.charMaps) this.charMaps[t].deleted = !0;
                this.texture.discard();
            }
        }, {
            key: "printDebugInfo",
            value: function() {}
        }, {
            key: "usedRate",
            get: function() {
                return this.atlasgrid._used;
            }
        } ]), t;
    }();
    $t.atlasGridW = 16;
    var Jt = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "setTo",
            value: function(t, e, i) {
                return this.type = t, this.currentTarget = e, this.target = i, this;
            }
        }, {
            key: "stopPropagation",
            value: function() {
                this._stoped = !0;
            }
        }, {
            key: "touches",
            get: function() {
                if (!this.nativeEvent) return null;
                var t = this.nativeEvent.touches;
                if (t) for (var e = u.stage, i = 0, n = t.length; i < n; i++) {
                    var r = t[i], a = E.TEMP;
                    a.setTo(r.clientX, r.clientY), e._canvasTransform.invertTransformPoint(a), e.transform.invertTransformPoint(a), 
                    r.stageX = a.x, r.stageY = a.y;
                }
                return t;
            }
        }, {
            key: "altKey",
            get: function() {
                return this.nativeEvent.altKey;
            }
        }, {
            key: "ctrlKey",
            get: function() {
                return this.nativeEvent.ctrlKey;
            }
        }, {
            key: "shiftKey",
            get: function() {
                return this.nativeEvent.shiftKey;
            }
        }, {
            key: "charCode",
            get: function() {
                return this.nativeEvent.charCode;
            }
        }, {
            key: "keyLocation",
            get: function() {
                return this.nativeEvent.location || this.nativeEvent.keyLocation;
            }
        }, {
            key: "stageX",
            get: function() {
                return u.stage.mouseX;
            }
        }, {
            key: "stageY",
            get: function() {
                return u.stage.mouseY;
            }
        } ]), t;
    }();
    Jt.EMPTY = new Jt(), Jt.MOUSE_DOWN = "mousedown", Jt.MOUSE_UP = "mouseup", Jt.CLICK = "click", 
    Jt.RIGHT_MOUSE_DOWN = "rightmousedown", Jt.RIGHT_MOUSE_UP = "rightmouseup", Jt.RIGHT_CLICK = "rightclick", 
    Jt.MOUSE_MOVE = "mousemove", Jt.MOUSE_OVER = "mouseover", Jt.MOUSE_OUT = "mouseout", 
    Jt.MOUSE_WHEEL = "mousewheel", Jt.ROLL_OVER = "mouseover", Jt.ROLL_OUT = "mouseout", 
    Jt.DOUBLE_CLICK = "doubleclick", Jt.CHANGE = "change", Jt.CHANGED = "changed", Jt.RESIZE = "resize", 
    Jt.ADDED = "added", Jt.REMOVED = "removed", Jt.DISPLAY = "display", Jt.UNDISPLAY = "undisplay", 
    Jt.ERROR = "error", Jt.COMPLETE = "complete", Jt.LOADED = "loaded", Jt.READY = "ready", 
    Jt.PROGRESS = "progress", Jt.INPUT = "input", Jt.RENDER = "render", Jt.OPEN = "open", 
    Jt.MESSAGE = "message", Jt.CLOSE = "close", Jt.KEY_DOWN = "keydown", Jt.KEY_PRESS = "keypress", 
    Jt.KEY_UP = "keyup", Jt.FRAME = "enterframe", Jt.DRAG_START = "dragstart", Jt.DRAG_MOVE = "dragmove", 
    Jt.DRAG_END = "dragend", Jt.ENTER = "enter", Jt.SELECT = "select", Jt.BLUR = "blur", 
    Jt.FOCUS = "focus", Jt.VISIBILITY_CHANGE = "visibilitychange", Jt.FOCUS_CHANGE = "focuschange", 
    Jt.PLAYED = "played", Jt.PAUSED = "paused", Jt.STOPPED = "stopped", Jt.START = "start", 
    Jt.END = "end", Jt.COMPONENT_ADDED = "componentadded", Jt.COMPONENT_REMOVED = "componentremoved", 
    Jt.RELEASED = "released", Jt.LINK = "link", Jt.LABEL = "label", Jt.FULL_SCREEN_CHANGE = "fullscreenchange", 
    Jt.DEVICE_LOST = "devicelost", Jt.TRANSFORM_CHANGED = "transformchanged", Jt.ANIMATION_CHANGED = "animationchanged", 
    Jt.TRAIL_FILTER_CHANGE = "trailfilterchange", Jt.TRIGGER_ENTER = "triggerenter", 
    Jt.TRIGGER_STAY = "triggerstay", Jt.TRIGGER_EXIT = "triggerexit";
    var te = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            return (0, o.default)(this, i), (t = e.call(this)).uvrect = [ 0, 0, 1, 1 ], t._destroyed = !1, 
            t._referenceCount = 0, t.$_GID = 0, t.offsetX = 0, t.offsetY = 0, t._w = 0, t._h = 0, 
            t.sourceWidth = 0, t.sourceHeight = 0, t.url = null, t.scaleRate = 1, t.setTo(n, r, a, s), 
            t;
        }
        return (0, s.default)(i, [ {
            key: "_addReference",
            value: function() {
                this._bitmap && this._bitmap._addReference(), this._referenceCount++;
            }
        }, {
            key: "_removeReference",
            value: function() {
                this._bitmap && this._bitmap._removeReference(), this._referenceCount--;
            }
        }, {
            key: "_getSource",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                return this._destroyed || !this._bitmap ? null : (this.recoverBitmap(t), this._bitmap.destroyed ? null : this.bitmap._getSource());
            }
        }, {
            key: "_onLoaded",
            value: function(t, e) {
                if (e) if (e == this) ; else if (e instanceof i) {
                    var n = e;
                    i._create(e, 0, 0, n.width, n.height, 0, 0, n.sourceWidth, n.sourceHeight, this);
                } else this.bitmap = e, this.sourceWidth = this._w = e.width, this.sourceHeight = this._h = e.height;
                t && t.run(), this.event(Jt.READY, this);
            }
        }, {
            key: "getIsReady",
            value: function() {
                return !this._destroyed && !!this._bitmap;
            }
        }, {
            key: "setTo",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                this.bitmap = t, this.sourceWidth = n, this.sourceHeight = r, t && (this._w = t.width, 
                this._h = t.height, this.sourceWidth = this.sourceWidth || t.width, this.sourceHeight = this.sourceHeight || t.height), 
                this.uv = e || i.DEF_UV;
            }
        }, {
            key: "load",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                this._destroyed || u.loader.load(t, D.create(this, this._onLoaded, [ e ]), null, "htmlimage", 1, !0);
            }
        }, {
            key: "getTexturePixels",
            value: function(t, e, i, n) {
                var r, a, s, o = this.bitmap, l = this._w, h = this._h, c = this.sourceWidth, _ = this.sourceHeight, d = o.width, f = o.height, v = this.offsetX, p = this.offsetY, y = i, g = n;
                if (t + i > l + v && (y -= t + i - l - v), t + i > c && (i -= t + i - c), e + n > h + p && (g -= e + n - h - p), 
                e + n > _ && (n -= e + n - _), i <= 0 || n <= 0) return null;
                var m = v > t ? v - t : 0, T = p > e ? p - e : 0, x = t > v ? t - v : 0, k = e > p ? e - p : 0;
                y -= m, g -= T;
                var E = 4 * i, R = null;
                try {
                    R = o.getPixels();
                } catch (t) {}
                if (R) {
                    if (0 == t && 0 == e && i == d && n == f) return R;
                    var A = this._uv.slice(), C = Math.round(A[0] * d), b = Math.round(A[1] * f), S = new Uint8Array(i * n * 4);
                    for (r = 4 * C + 4 * x + (a = (b + k) * (E = 4 * d)), s = 0; s < g; s++) S.set(R.slice(r, r + 4 * y), 4 * i * (s + T) + 4 * m), 
                    r += E;
                    return S;
                }
                var w = new u.Context();
                w.size(i, n), w.asBitmap = !0;
                var M = null;
                if (0 != t || 0 != e || i != d || n != f) {
                    var I = (M = this._uv.slice())[0], P = M[1], L = (M[2] - I) / l, D = (M[7] - P) / h;
                    M = [ I + x * L, P + k * D, I + (x + y) * L, P + k * D, I + (x + y) * L, P + (k + g) * D, I + x * L, P + (k + g) * D ];
                }
                w._drawTextureM(this, m, T, y, g, null, 1, M), w._targets.start(), w.flush(), w._targets.end(), 
                w._targets.restore();
                var B = w._targets.getData(0, 0, i, n);
                for (w.destroy(), S = new Uint8Array(i * n * 4), r = 0, a = (n - 1) * E, s = n - 1; s >= 0; s--) S.set(B.slice(a, a + E), r), 
                r += E, a -= E;
                return S;
            }
        }, {
            key: "getPixels",
            value: function(t, e, i, n) {
                return window.conch ? this._nativeObj.getImageData(t, e, i, n) : this.getTexturePixels(t, e, i, n);
            }
        }, {
            key: "recoverBitmap",
            value: function() {
                var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i = this._bitmap.url;
                if (!this._destroyed && (!this._bitmap || this._bitmap.destroyed) && i) {
                    var n = u.Loader.loadedMap[i];
                    n ? (this.bitmap = n, e && e()) : u.loader.load(i, D.create(this, function(i) {
                        t.bitmap = i, e && e();
                    }), null, "htmlimage", 1, !0);
                }
            }
        }, {
            key: "disposeBitmap",
            value: function() {
                !this._destroyed && this._bitmap && this._bitmap.destroy();
            }
        }, {
            key: "destroy",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (!this._destroyed) {
                    this._destroyed = !0;
                    var e = this._bitmap;
                    e && (e._removeReference(this._referenceCount), (0 === e.referenceCount || t) && e.destroy(), 
                    e = null), this.url && this === u.loader.getRes(this.url) && u.Loader.clearRes(this.url);
                }
            }
        }, {
            key: "uv",
            get: function() {
                return this._uv;
            },
            set: function(t) {
                this.uvrect[0] = Math.min(t[0], t[2], t[4], t[6]), this.uvrect[1] = Math.min(t[1], t[3], t[5], t[7]), 
                this.uvrect[2] = Math.max(t[0], t[2], t[4], t[6]) - this.uvrect[0], this.uvrect[3] = Math.max(t[1], t[3], t[5], t[7]) - this.uvrect[1], 
                this._uv = t;
            }
        }, {
            key: "width",
            get: function() {
                return this._w ? this._w : this.bitmap ? this.uv && this.uv !== i.DEF_UV ? (this.uv[2] - this.uv[0]) * this.bitmap.width : this.bitmap.width : 0;
            },
            set: function(t) {
                this._w = t, this.sourceWidth || (this.sourceWidth = t);
            }
        }, {
            key: "height",
            get: function() {
                return this._h ? this._h : this.bitmap ? this.uv && this.uv !== i.DEF_UV ? (this.uv[5] - this.uv[1]) * this.bitmap.height : this.bitmap.height : 0;
            },
            set: function(t) {
                this._h = t, this.sourceHeight || (this.sourceHeight = t);
            }
        }, {
            key: "bitmap",
            get: function() {
                return this._bitmap;
            },
            set: function(t) {
                this._bitmap && this._bitmap._removeReference(this._referenceCount), this._bitmap = t, 
                t && t._addReference(this._referenceCount);
            }
        }, {
            key: "destroyed",
            get: function() {
                return this._destroyed;
            }
        } ], [ {
            key: "moveUV",
            value: function(t, e, i) {
                for (var n = 0; n < 8; n += 2) i[n] += t, i[n + 1] += e;
                return i;
            }
        }, {
            key: "create",
            value: function(t, e, n, r, a) {
                var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0, h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0;
                return i._create(t, e, n, r, a, s, o, l, h);
            }
        }, {
            key: "_create",
            value: function(t, e, n, r, a) {
                var s, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, h = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0, u = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null, _ = t instanceof i, d = _ ? t.uv : i.DEF_UV, f = _ ? t.bitmap : t;
                f.width && e + r > f.width && (r = f.width - e), f.height && n + a > f.height && (a = f.height - n), 
                c ? (s = c).setTo(f, null, h || r, u || a) : s = new i(f, null, h || r, u || a), 
                s.width = r, s.height = a, s.offsetX = o, s.offsetY = l;
                var v = 1 / f.width, p = 1 / f.height;
                e *= v, n *= p, r *= v, a *= p;
                var y = s.uv[0], g = s.uv[1], m = s.uv[4], T = s.uv[5], x = m - y, k = T - g, E = i.moveUV(d[0], d[1], [ e, n, e + r, n, e + r, n + a, e, n + a ]);
                s.uv = new Float32Array([ y + E[0] * x, g + E[1] * k, m - (1 - E[2]) * x, g + E[3] * k, m - (1 - E[4]) * x, T - (1 - E[5]) * k, y + E[6] * x, T - (1 - E[7]) * k ]);
                var R = f.scaleRate;
                return R && 1 != R ? (s.sourceWidth /= R, s.sourceHeight /= R, s.width /= R, s.height /= R, 
                s.scaleRate = R) : s.scaleRate = 1, s;
            }
        }, {
            key: "createFromTexture",
            value: function(t, e, n, r, a) {
                var s = t.scaleRate;
                1 != s && (e *= s, n *= s, r *= s, a *= s);
                var o = R.TEMP.setTo(e - t.offsetX, n - t.offsetY, r, a), l = o.intersection(i._rect1.setTo(0, 0, t.width, t.height), i._rect2);
                return l ? i.create(t, l.x, l.y, l.width, l.height, l.x - o.x, l.y - o.y, r, a) : null;
            }
        } ]), i;
    }(B);
    te.DEF_UV = new Float32Array([ 0, 0, 1, 0, 1, 1, 0, 1 ]), te.NO_UV = new Float32Array([ 0, 0, 0, 0, 0, 0, 0, 0 ]), 
    te.INV_UV = new Float32Array([ 0, 1, 1, 1, 1, 0, 0, 0 ]), te._rect1 = new R(), te._rect2 = new R();
    var ee = function() {
        function t(e) {
            (0, o.default)(this, t), this._font = "14px Arial", this._family = "Arial", this._size = 14, 
            this._italic = !1, this._bold = !1, this._id = t._gfontID++, this.setFont(e || this._font);
        }
        return (0, s.default)(t, [ {
            key: "setFont",
            value: function(t) {
                this._font = t;
                var e = t.split(" "), i = e.length;
                if (i < 2) 1 == i && e[0].indexOf("px") > 0 && (this._size = parseInt(e[0])); else {
                    for (var n = -1, r = 0; r < i; r++) if (e[r].indexOf("px") > 0 || e[r].indexOf("pt") > 0) {
                        n = r, this._size = parseInt(e[r]), this._size <= 0 && (console.error("font parse error:" + t), 
                        this._size = 14);
                        break;
                    }
                    var a = n + 1, s = e[a];
                    for (a++; a < i; a++) s += " " + e[a];
                    this._family = s.split(",")[0], this._italic = e.indexOf("italic") >= 0, this._bold = e.indexOf("bold") >= 0;
                }
            }
        } ], [ {
            key: "Parse",
            value: function(e) {
                if (e === t._lastFont) return t._lastFontInfo;
                var i = t._cache[e];
                return i || (i = t._cache[e] = new t(e)), t._lastFont = e, t._lastFontInfo = i, 
                i;
            }
        } ]), t;
    }();
    ee.EMPTY = new ee(null), ee._cache = {}, ee._gfontID = 0, ee._lastFont = "";
    var ie = function() {
        function t() {
            (0, o.default)(this, t), this.save = [], this.toUpperCase = null, this.width = -1, 
            this.pageChars = [], this.startID = 0, this.startIDStroke = 0, this.lastGCCnt = 0, 
            this.splitRender = !1, this.scalex = 1, this.scaley = 1;
        }
        return (0, s.default)(t, [ {
            key: "setText",
            value: function(t) {
                this.changed = !0, this._text = t, this.width = -1, this.cleanCache();
            }
        }, {
            key: "toString",
            value: function() {
                return this._text;
            }
        }, {
            key: "charCodeAt",
            value: function(t) {
                return this._text ? this._text.charCodeAt(t) : NaN;
            }
        }, {
            key: "charAt",
            value: function(t) {
                return this._text ? this._text.charAt(t) : null;
            }
        }, {
            key: "cleanCache",
            value: function() {
                var t = this.pageChars;
                for (var e in t) {
                    var i = t[e], n = i.tex;
                    1 == i.words.length && n && n.ri && n.destroy();
                }
                this.pageChars = [], this.startID = 0, this.scalex = 1, this.scaley = 1;
            }
        }, {
            key: "length",
            get: function() {
                return this._text ? this._text.length : 0;
            }
        } ]), t;
    }(), ne = function() {
        function t() {
            (0, o.default)(this, t), this.char = "", this.deleted = !1, this.uv = new Array(8), 
            this.pos = 0, this.orix = 0, this.oriy = 0, this.touchTick = 0, this.isSpace = !1;
        }
        return (0, s.default)(t, [ {
            key: "touch",
            value: function() {
                var t = Mt.loopCount;
                this.touchTick != t && this.tex.touchRect(this, t), this.touchTick = t;
            }
        } ]), t;
    }(), re = function() {
        function t() {
            (0, o.default)(this, t), this.fontsz = 16;
        }
        return (0, s.default)(t, [ {
            key: "getWidth",
            value: function(t, e) {
                return 0;
            }
        }, {
            key: "scale",
            value: function(t, e) {}
        }, {
            key: "getCharBmp",
            value: function(t, e, i, n, r, a, s, o, l, h) {
                return null;
            }
        }, {
            key: "canvasWidth",
            get: function() {
                return 0;
            },
            set: function(t) {}
        } ]), t;
    }(), ae = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                var e = window.Laya || u.Laya;
                if (t._window) return t._window;
                var i = t._window = window, n = t._document = i.document, r = t.userAgent = i.navigator.userAgent, a = i.navigator.maxTouchPoints || 0, s = i.navigator.platform;
                "my" in t.window && (r.indexOf("TB/") > -1 || r.indexOf("Taobao/") > -1 || r.indexOf("TM/") > -1 ? (window.tbMiniGame(e, e), 
                e.TBMiniAdapter ? e.TBMiniAdapter.enable() : console.error("请先添加淘宝适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-6-0")) : r.indexOf("AlipayMiniGame") > -1 && (window.aliPayMiniGame(e, e), 
                e.ALIMiniAdapter ? e.ALIMiniAdapter.enable() : console.error("请先添加阿里小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-6-0"))), 
                -1 == r.indexOf("OPPO") && r.indexOf("MiniGame") > -1 && "wx" in t.window && ("tt" in t.window ? (window.ttMiniGame(e, e), 
                e.TTMiniAdapter ? e.TTMiniAdapter.enable() : console.error("请引入字节跳动小游戏的适配库")) : "bl" in t.window ? (window.biliMiniGame(e, e), 
                e.BLMiniAdapter ? e.BLMiniAdapter.enable() : console.error("请引入bilibili小游戏的适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-7-0")) : "qq" in t.window ? (window.qqMiniGame(e, e), 
                e.QQMiniAdapter ? e.QQMiniAdapter.enable() : console.error("请引入手机QQ小游戏的适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-0-0")) : (window.wxMiniGame(e, e), 
                e.MiniAdpter ? e.MiniAdpter.enable() : console.error("请先添加小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?nav=zh-ts-5-0-0"))), 
                "hbs" in t.window && (window.hwMiniGame(e, e), e.HWMiniAdapter ? e.HWMiniAdapter.enable() : console.error("请先添加小游戏适配库!")), 
                r.indexOf("SwanGame") > -1 && (window.bdMiniGame(e, e), e.BMiniAdapter ? e.BMiniAdapter.enable() : console.error("请先添加百度小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-1-0")), 
                r.indexOf("QuickGame") > -1 && (window.miMiniGame(e, e), e.KGMiniAdapter ? e.KGMiniAdapter.enable() : console.error("请先添加小米小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-2-0")), 
                r.indexOf("OPPO") > -1 && r.indexOf("MiniGame") > -1 && (window.qgMiniGame(e, e), 
                e.QGMiniAdapter ? e.QGMiniAdapter.enable() : console.error("请先添加OPPO小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-3-0")), 
                r.indexOf("VVGame") > -1 && (window.vvMiniGame(e, e), e.VVMiniAdapter ? e.VVMiniAdapter.enable() : console.error("请先添加VIVO小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?language=zh&nav=zh-ts-5-4-0")), 
                i.trace = console.log, i.requestAnimationFrame = i.requestAnimationFrame || i.webkitRequestAnimationFrame || i.mozRequestAnimationFrame || i.oRequestAnimationFrame || i.msRequestAnimationFrame || function(t) {
                    return i.setTimeout(t, 1e3 / 60);
                };
                var o = n.body.style;
                o.margin = 0, o.overflow = "hidden", o["-webkit-user-select"] = "none", o["-webkit-tap-highlight-color"] = "rgba(200,200,200,0)";
                for (var l = n.getElementsByTagName("meta"), h = 0, c = !1, _ = "width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"; h < l.length; ) {
                    var d = l[h];
                    if ("viewport" == d.name) {
                        d.content = _, c = !0;
                        break;
                    }
                    h++;
                }
                return c || ((d = n.createElement("meta")).name = "viewport", d.content = _, n.getElementsByTagName("head")[0].appendChild(d)), 
                t.onMobile = !!window.conch || r.indexOf("Mobile") > -1, t.onIOS = !!r.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), 
                t.onIPhone = r.indexOf("iPhone") > -1, t.onMac = r.indexOf("Mac OS X") > -1, t.onIPad = r.indexOf("iPad") > -1 || "MacIntel" === s && a > 1, 
                t.onAndroid = r.indexOf("Android") > -1 || r.indexOf("Adr") > -1, t.onWP = r.indexOf("Windows Phone") > -1, 
                t.onQQBrowser = r.indexOf("QQBrowser") > -1, t.onMQQBrowser = r.indexOf("MQQBrowser") > -1 || r.indexOf("Mobile") > -1 && r.indexOf("QQ") > -1, 
                t.onIE = !!i.ActiveXObject || "ActiveXObject" in i, t.onWeiXin = r.indexOf("MicroMessenger") > -1, 
                t.onSafari = r.indexOf("Safari") > -1, t.onPC = !t.onMobile, t.onMiniGame = r.indexOf("MiniGame") > -1, 
                t.onBDMiniGame = r.indexOf("SwanGame") > -1, t.onLayaRuntime = !!window.conch, r.indexOf("OPPO") > -1 && r.indexOf("MiniGame") > -1 ? (t.onQGMiniGame = !0, 
                t.onMiniGame = !1) : "qq" in t.window && r.indexOf("MiniGame") > -1 ? (t.onQQMiniGame = !0, 
                t.onMiniGame = !1) : "bl" in t.window && r.indexOf("MiniGame") > -1 ? (t.onBLMiniGame = !0, 
                t.onMiniGame = !1) : "tt" in t.window && r.indexOf("MiniGame") > -1 && (t.onTTMiniGame = !0, 
                t.onMiniGame = !1), t.onHWMiniGame = "hbs" in t.window, t.onVVMiniGame = r.indexOf("VVGame") > -1, 
                t.onKGMiniGame = r.indexOf("QuickGame") > -1, r.indexOf("AlipayMiniGame") > -1 && (t.onAlipayMiniGame = !0, 
                t.onMiniGame = !1), (r.indexOf("TB/") > -1 || r.indexOf("Taobao/") > -1 || r.indexOf("TM/") > -1) && (t.onTBMiniGame = !0), 
                i;
            }
        }, {
            key: "createElement",
            value: function(e) {
                return t.__init__(), t._document.createElement(e);
            }
        }, {
            key: "getElementById",
            value: function(e) {
                return t.__init__(), t._document.getElementById(e);
            }
        }, {
            key: "removeElement",
            value: function(t) {
                t && t.parentNode && t.parentNode.removeChild(t);
            }
        }, {
            key: "now",
            value: function() {
                return Date.now();
            }
        }, {
            key: "_isMiniGame",
            get: function() {
                return t.onMiniGame || t.onBDMiniGame || t.onQGMiniGame || t.onKGMiniGame || t.onVVMiniGame || t.onAlipayMiniGame || t.onQQMiniGame || t.onBLMiniGame || t.onTTMiniGame || t.onHWMiniGame || t.onTBMiniGame;
            }
        }, {
            key: "clientWidth",
            get: function() {
                return t.__init__(), t._window.innerWidth || t._document.body.clientWidth;
            }
        }, {
            key: "clientHeight",
            get: function() {
                return t.__init__(), t._window.innerHeight || t._document.body.clientHeight || t._document.documentElement.clientHeight;
            }
        }, {
            key: "width",
            get: function() {
                return t.__init__(), (u.stage && u.stage.canvasRotation ? t.clientHeight : t.clientWidth) * t.pixelRatio;
            }
        }, {
            key: "height",
            get: function() {
                return t.__init__(), (u.stage && u.stage.canvasRotation ? t.clientWidth : t.clientHeight) * t.pixelRatio;
            }
        }, {
            key: "pixelRatio",
            get: function() {
                return t._pixelRatio < 0 && (t.__init__(), t.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)") > -1 ? t._pixelRatio = 2 : (t._pixelRatio = t._window.devicePixelRatio || 1, 
                t._pixelRatio < 1 && (t._pixelRatio = 1))), t._pixelRatio;
            }
        }, {
            key: "container",
            get: function() {
                return t._container || (t.__init__(), t._container = t.createElement("div"), t._container.id = "layaContainer", 
                t._document.body.appendChild(t._container)), t._container;
            },
            set: function(e) {
                t._container = e;
            }
        }, {
            key: "window",
            get: function() {
                return t._window || t.__init__();
            }
        }, {
            key: "document",
            get: function() {
                return t.__init__(), t._document;
            }
        } ]), t;
    }();
    ae._pixelRatio = -1, ae.mainCanvas = null, ae.hanzi = new RegExp("^[一-龥]$"), ae.fontMap = {}, 
    ae.measureText = function(t, e) {
        var i = ae.hanzi.test(t);
        if (i && ae.fontMap[e]) return ae.fontMap[e];
        var n = ae.context;
        n.font = e;
        var r = n.measureText(t);
        return i && (ae.fontMap[e] = r), r;
    };
    var se = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t, n) {
            var r, a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], l = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            return (0, o.default)(this, i), (r = e.call(this)).ctx = null, r.lastScaleX = 1, 
            r.lastScaleY = 1, r.maxTexW = 0, r.maxTexH = 0, r.scaleFontSize = !0, r.showDbgInfo = !1, 
            r.supportImageData = !0, r.maxTexW = t, r.maxTexH = n, r.scaleFontSize = a, r.supportImageData = s, 
            r.showDbgInfo = l, i.canvas || (i.canvas = ae.createElement("canvas"), i.canvas.width = 1024, 
            i.canvas.height = 512, i.canvas.style.left = "-10000px", i.canvas.style.position = "absolute", 
            document.body.appendChild(i.canvas), r.ctx = i.canvas.getContext("2d")), r;
        }
        return (0, s.default)(i, [ {
            key: "getWidth",
            value: function(t, e) {
                return this.ctx ? (this.ctx._lastFont != t && (this.ctx.font = t, this.ctx._lastFont = t), 
                this.ctx.measureText(e).width) : 0;
            }
        }, {
            key: "scale",
            value: function(t, e) {
                if (!this.supportImageData) return this.lastScaleX = t, void (this.lastScaleY = e);
                this.lastScaleX == t && this.lastScaleY == e || (this.ctx.setTransform(t, 0, 0, e, 0, 0), 
                this.lastScaleX = t, this.lastScaleY = e);
            }
        }, {
            key: "getCharBmp",
            value: function(t, e, n, r, a, s, o, l, h, u) {
                var c = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : null;
                if (!this.supportImageData) return this.getCharCanvas(t, e, n, r, a, s, o, l, h, u);
                var _ = this.ctx, d = this.fontsz;
                _.font != e && (_.font = e, _._lastFont = e), s.width = _.measureText(t).width;
                var f = s.width * this.lastScaleX, v = s.height * this.lastScaleY;
                f += (o + h) * this.lastScaleX, v += (l + u) * this.lastScaleY, f = Math.ceil(f), 
                v = Math.ceil(v);
                var p = (f = Math.min(f, i.canvas.width)) + 2 * n + 1, y = (v = Math.min(v, i.canvas.height)) + 2 * n + 1;
                c && (p = Math.max(p, c[0] + c[2] + 1), y = Math.max(y, c[1] + c[3] + 1)), _.clearRect(0, 0, p / this.lastScaleX + 1, y / this.lastScaleY + 1), 
                _.save(), _.textBaseline = "middle", n > 0 && (_.strokeStyle = a, _.lineWidth = n, 
                _.strokeText(t, o, l + d / 2)), r && (_.fillStyle = r, _.fillText(t, o, l + d / 2)), 
                this.showDbgInfo && (_.strokeStyle = "#ff0000", _.strokeRect(1, 1, f - 2, v - 2), 
                _.strokeStyle = "#00ff00", _.strokeRect(o, l, s.width, s.height)), c && (-1 == c[2] && (c[2] = Math.ceil((s.width + 2 * n) * this.lastScaleX)), 
                c[2] <= 0 && (c[2] = 1));
                var g = c ? _.getImageData(c[0], c[1], c[2], c[3] + 1) : _.getImageData(0, 0, f, v + 1);
                return _.restore(), s.bmpWidth = g.width, s.bmpHeight = g.height, g;
            }
        }, {
            key: "getCharCanvas",
            value: function(t, e, n, r, a, s, o, l, h, u) {
                var c = this.ctx;
                c.font != e && (c.font = e, c._lastFont = e), s.width = c.measureText(t).width;
                var _ = s.width * this.lastScaleX, d = s.height * this.lastScaleY;
                _ += (o + h) * this.lastScaleX, d += (l + u) * this.lastScaleY + 1, _ = Math.min(_, this.maxTexW), 
                d = Math.min(d, this.maxTexH), i.canvas.width = Math.min(_ + 1, this.maxTexW), i.canvas.height = Math.min(d + 1, this.maxTexH), 
                c.font = e, c.clearRect(0, 0, _ + 1 + n, d + 1 + n), c.setTransform(1, 0, 0, 1, 0, 0), 
                c.save(), this.scaleFontSize && c.scale(this.lastScaleX, this.lastScaleY), c.translate(o, l), 
                c.textAlign = "left";
                var f = this.fontsz;
                return c.textBaseline = "middle", n > 0 ? (c.strokeStyle = a, c.fillStyle = r, c.lineWidth = n, 
                c.fillAndStrokeText ? c.fillAndStrokeText(t, 0, f / 2) : (c.strokeText(t, 0, f / 2), 
                c.fillText(t, 0, f / 2))) : r && (c.fillStyle = r, c.fillText(t, 0, f / 2)), this.showDbgInfo && (c.strokeStyle = "#ff0000", 
                c.strokeRect(0, 0, _, d), c.strokeStyle = "#00ff00", c.strokeRect(0, 0, s.width, s.height)), 
                c.restore(), s.bmpWidth = i.canvas.width, s.bmpHeight = i.canvas.height, i.canvas;
            }
        }, {
            key: "canvasWidth",
            get: function() {
                return i.canvas.width;
            },
            set: function(t) {
                i.canvas.width != t && (i.canvas.width = t, t > 2048 && console.warn("画文字设置的宽度太大，超过2048了"), 
                this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.scale(this.lastScaleX, this.lastScaleY));
            }
        } ]), i;
    }(re);
    se.canvas = null;
    var oe = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this)).lastFont = "", t.lastScaleX = 1, 
            t.lastScaleY = 1, t;
        }
        return (0, s.default)(i, [ {
            key: "getWidth",
            value: function(t, e) {
                return window.conchTextCanvas ? (window.conchTextCanvas.font = t, this.lastFont = t, 
                window.conchTextCanvas.measureText(e).width) : 0;
            }
        }, {
            key: "scale",
            value: function(t, e) {
                this.lastScaleX = t, this.lastScaleY = e;
            }
        }, {
            key: "getCharBmp",
            value: function(t, e, i, n, r, a, s, o, l, h) {
                if (!window.conchTextCanvas) return null;
                window.conchTextCanvas.font = e, this.lastFont = e, a.width = window.conchTextCanvas.measureText(t).width, 
                a.height, window.conchTextCanvas.scale && window.conchTextCanvas.scale(this.lastScaleX, this.lastScaleY);
                var u = ot.create(r).numColor, c = ot.create(n).numColor, _ = window.conchTextCanvas.getTextBitmapData(t, c, i > 2 ? 2 : i, u);
                return a.bmpWidth = _.width, a.bmpHeight = _.height, _;
            }
        } ]), i;
    }(re), le = function() {
        function t() {
            (0, o.default)(this, t), this.fontSizeInfo = {}, this.mapFont = {}, this.fontID = 0, 
            this.fontScaleX = 1, this.fontScaleY = 1, this._curStrPos = 0, this.textAtlases = [], 
            this.isoTextures = [], this.lastFont = null, this.fontSizeW = 0, this.fontSizeH = 0, 
            this.fontSizeOffX = 0, this.fontSizeOffY = 0, this.renderPerChar = !0, this.tmpAtlasPos = new E(), 
            this.textureMem = 0, u.TextAtlas = $t;
            var e = !1, i = u.Laya.MiniAdpter;
            i && i.systemInfo && i.systemInfo.system && (e = "ios 10.1.1" === i.systemInfo.system.toLowerCase()), 
            (u.Browser.onMiniGame || u.Browser.onTTMiniGame || u.Browser.onBLMiniGame || u.Browser.onAlipayMiniGame || u.Browser.onTBMiniGame) && !e && (t.isWan1Wan = !0), 
            this.charRender = u.Render.isConchApp ? new oe() : new se(2048, 2048, t.scaleFontWithCtx, !t.isWan1Wan, !1), 
            t.textRenderInst = this, u.Laya.textRender = this, t.atlasWidth2 = t.atlasWidth * t.atlasWidth;
        }
        return (0, s.default)(t, [ {
            key: "setFont",
            value: function(e) {
                if (this.lastFont != e) {
                    this.lastFont = e;
                    var i = this.getFontSizeInfo(e._family), n = i >> 24, r = i >> 16 & 255, a = i >> 8 & 255, s = 255 & i, o = e._size / t.standardFontSize;
                    this.fontSizeOffX = Math.ceil(n * o), this.fontSizeOffY = Math.ceil(r * o), this.fontSizeW = Math.ceil(a * o), 
                    this.fontSizeH = Math.ceil(s * o), e._font.indexOf("italic") >= 0 ? this.fontStr = e._font.replace("italic", "") : this.fontStr = e._font;
                }
            }
        }, {
            key: "getNextChar",
            value: function(t) {
                var e = t.length, i = this._curStrPos;
                if (!t.substring) return null;
                if (i >= e) return null;
                for (var n = i, r = 0; n < e; n++) {
                    var a = t.charCodeAt(n);
                    if (a >>> 11 == 27) {
                        if (1 == r) break;
                        r = 1, n++;
                    } else if (65038 === a || 65039 === a) ; else if (8205 == a) r = 2; else if (0 == r) r = 1; else if (1 == r) break;
                }
                return this._curStrPos = n, t.substring(i, n);
            }
        }, {
            key: "filltext",
            value: function(t, e, i, n, r, a, s, o, l) {
                var h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0;
                if (!(e.length <= 0)) {
                    var c = ee.Parse(r), _ = 0;
                    switch (l) {
                      case "center":
                        _ = u.Context.ENUM_TEXTALIGN_CENTER;
                        break;

                      case "right":
                        _ = u.Context.ENUM_TEXTALIGN_RIGHT;
                    }
                    this._fast_filltext(t, e, null, i, n, c, a, s, o, _, h);
                }
            }
        }, {
            key: "fillWords",
            value: function(t, e, i, n, r, a, s, o) {
                if (e && !(e.length <= 0)) {
                    var l = "string" == typeof r ? ee.Parse(r) : r;
                    this._fast_filltext(t, null, e, i, n, l, a, s, o, 0, 0);
                }
            }
        }, {
            key: "_fast_filltext",
            value: function(e, i, n, r, a, s, o, l, h, c) {
                if ((!i || i.length >= 1) && !(n && n.length < 1)) {
                    if (h < 0 && (h = 0), this.setFont(s), this.fontScaleX = this.fontScaleY = 1, t.scaleFontWithCtx) {
                        var _ = 1, d = 1;
                        if (u.Render.isConchApp && !window.conchTextCanvas.scale || (_ = e.getMatScaleX(), 
                        d = e.getMatScaleY()), _ < 1e-4 || d < .1) return;
                        _ > 1 && (this.fontScaleX = _), d > 1 && (this.fontScaleY = d);
                    }
                    s._italic && (e._italicDeg = 13);
                    var f = i, v = !n && i instanceof ie, p = i && i.toString(), y = !!n, g = v ? f.pageChars : [], m = 0;
                    switch (v ? (p = f._text, (m = f.width) < 0 && (m = f.width = this.charRender.getWidth(this.fontStr, p))) : m = p ? this.charRender.getWidth(this.fontStr, p) : 0, 
                    c) {
                      case u.Context.ENUM_TEXTALIGN_CENTER:
                        r -= m / 2;
                        break;

                      case u.Context.ENUM_TEXTALIGN_RIGHT:
                        r -= m;
                    }
                    f && g && this.hasFreedText(g) && (g = f.pageChars = []);
                    var T = null, x = this.renderPerChar = !v || t.forceSplitRender || y || v && f.splitRender;
                    if (!g || g.length < 1) if (v && (f.scalex = this.fontScaleX, f.scaley = this.fontScaleY), 
                    x) {
                        var k, E = 0, R = 0;
                        for (this._curStrPos = 0; ;) {
                            if (n) {
                                var A = n[this._curStrPos++];
                                A ? (k = A.char, E = A.x, R = A.y) : k = null;
                            } else k = this.getNextChar(p);
                            if (!k) break;
                            if (!(T = this.getCharRenderInfo(k, s, o, l, h, !1))) break;
                            if (T.isSpace) ; else {
                                var C = g[T.tex.id];
                                if (C) C = C.words; else {
                                    var b = {
                                        texgen: T.tex.genID,
                                        tex: T.tex,
                                        words: new Array()
                                    };
                                    g[T.tex.id] = b, C = b.words;
                                }
                                C.push({
                                    ri: T,
                                    x: E,
                                    y: R,
                                    w: T.bmpWidth / this.fontScaleX,
                                    h: T.bmpHeight / this.fontScaleY
                                }), E += T.width;
                            }
                        }
                    } else {
                        var S = u.Render.isConchApp ? 0 : s._size / 3 | 0, w = t.noAtlas || (m + S + S) * this.fontScaleX > t.atlasWidth;
                        T = this.getCharRenderInfo(p, s, o, l, h, w), g[0] = {
                            texgen: T.tex.genID,
                            tex: T.tex,
                            words: [ {
                                ri: T,
                                x: 0,
                                y: 0,
                                w: T.bmpWidth / this.fontScaleX,
                                h: T.bmpHeight / this.fontScaleY
                            } ]
                        };
                    }
                    this._drawResortedWords(e, r, a, g), e._italicDeg = 0;
                }
            }
        }, {
            key: "_drawResortedWords",
            value: function(t, e, i, n) {
                var r = !!t._charSubmitCache && t._charSubmitCache._enable, a = t._curMat;
                for (var s in n) {
                    var o = n[s];
                    if (o) {
                        var l = o.words, h = l.length;
                        if (!(h <= 0)) for (var c = n[s].tex, _ = 0; _ < h; _++) {
                            var d = l[_], f = d.ri;
                            if (!f.isSpace) {
                                if (f.touch(), t.drawTexAlign = !0, u.Render.isConchApp) t._drawTextureM(c.texture, e + d.x - f.orix, i + d.y - f.oriy, d.w, d.h, null, 1, f.uv); else {
                                    var v = c;
                                    t._inner_drawTexture(v.texture, v.id, e + d.x - f.orix, i + d.y - f.oriy, d.w, d.h, a, f.uv, 1, r);
                                }
                                t.touches && t.touches.push(f);
                            }
                        }
                    }
                }
            }
        }, {
            key: "hasFreedText",
            value: function(t) {
                for (var e in t) {
                    var i = t[e];
                    if (i) {
                        var n = i.tex;
                        if (n.__destroyed || n.genID != i.texgen) return !0;
                    }
                }
                return !1;
            }
        }, {
            key: "getCharRenderInfo",
            value: function(e, i, n, r, a) {
                var s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], o = this.mapFont[i._family];
                null == o && (this.mapFont[i._family] = o = this.fontID++);
                var l = e + "_" + o + "_" + i._size + "_" + n;
                a > 0 && (l += "_" + r + a), i._bold && (l += "P"), 1 == this.fontScaleX && 1 == this.fontScaleY || (l += (20 * this.fontScaleX | 0) + "_" + (20 * this.fontScaleY | 0));
                var h, c, _ = 0, d = this.textAtlases.length;
                if (!s) for (_ = 0; _ < d; _++) if (h = (c = this.textAtlases[_]).charMaps[l]) return h.touch(), 
                h;
                h = new ne(), this.charRender.scale(this.fontScaleX, this.fontScaleY), h.char = e, 
                h.height = i._size;
                var f = u.Render.isConchApp ? 0 : i._size / 3 | 0, v = null;
                a || (a = 0);
                var p = Math.ceil((this.charRender.getWidth(this.fontStr, e) + 2 * a) * this.fontScaleX);
                if (p > this.charRender.canvasWidth && (this.charRender.canvasWidth = Math.min(2048, p + 2 * f)), 
                s) {
                    if (this.charRender.fontsz = i._size, v = this.charRender.getCharBmp(e, this.fontStr, a, n, r, h, f, f, f, f, null)) {
                        var y = Qt.getTextTexture(v.width, v.height);
                        y.addChar(v, 0, 0, h.uv), h.tex = y, h.orix = f, h.oriy = f, y.ri = h, this.isoTextures.push(y);
                    }
                } else {
                    var g = e.length, m = 1 * a, T = Math.ceil((this.fontSizeW + 2 * m) * this.fontScaleX), x = Math.ceil((this.fontSizeH + 2 * m) * this.fontScaleY);
                    t.imgdtRect[0] = (f - this.fontSizeOffX - m) * this.fontScaleX | 0, t.imgdtRect[1] = (f - this.fontSizeOffY - m) * this.fontScaleY | 0, 
                    this.renderPerChar || 1 == g ? (t.imgdtRect[2] = Math.max(p, T), t.imgdtRect[3] = Math.max(p, x)) : (t.imgdtRect[2] = -1, 
                    t.imgdtRect[3] = x), this.charRender.fontsz = i._size, (v = this.charRender.getCharBmp(e, this.fontStr, a, n, r, h, f, f, f, f, t.imgdtRect)) && (c = this.addBmpData(v, h), 
                    t.isWan1Wan ? (h.orix = f, h.oriy = f) : (h.orix = this.fontSizeOffX + m, h.oriy = this.fontSizeOffY + m), 
                    c.charMaps[l] = h);
                }
                return h;
            }
        }, {
            key: "addBmpData",
            value: function(t, e) {
                for (var i, n = t.width, r = t.height, a = this.textAtlases.length, s = !1, o = 0; o < a && !(s = (i = this.textAtlases[o]).getAEmpty(n, r, this.tmpAtlasPos)); o++) ;
                if (!s) {
                    if (i = new $t(), this.textAtlases.push(i), !(s = i.getAEmpty(n, r, this.tmpAtlasPos))) throw "err1";
                    this.cleanAtlases();
                }
                return s && (i.texture.addChar(t, this.tmpAtlasPos.x, this.tmpAtlasPos.y, e.uv), 
                e.tex = i.texture), i;
            }
        }, {
            key: "GC",
            value: function() {
                for (var e = 0, i = this.textAtlases.length, n = t.destroyAtlasDt, r = 0, a = Mt.loopCount, s = -1, o = 0, l = null, h = null; e < i; e++) {
                    if (l = (h = this.textAtlases[e]).texture) {
                        l.curUsedCovRate, r += l.curUsedCovRateAtlas;
                        var u = h.usedRate - l.curUsedCovRateAtlas;
                        o < u && (o = u, s = e);
                    }
                    a - h.texture.lastTouchTm > n && (t.showLog && console.log(h.texture.id), h.destroy(), 
                    this.textAtlases[e] = this.textAtlases[i - 1], i--, e--, s = -1);
                }
                for (this.textAtlases.length = i, i = this.isoTextures.length, e = 0; e < i; e++) a - (l = this.isoTextures[e]).lastTouchTm > t.destroyUnusedTextureDt && (l.ri.deleted = !0, 
                l.ri.tex = null, l.destroy(), this.isoTextures[e] = this.isoTextures[i - 1], i--, 
                e--);
                this.isoTextures.length = i;
                var c = this.textAtlases.length > 1 && this.textAtlases.length - r >= 2;
                (t.atlasWidth * t.atlasWidth * 4 * this.textAtlases.length > t.cleanMem || c || t.simClean) && (t.simClean = !1, 
                t.showLog && console.log("清理使用率低的贴图。总使用率:", r, ":", this.textAtlases.length, "最差贴图:" + s), 
                s >= 0 && ((h = this.textAtlases[s]).destroy(), this.textAtlases[s] = this.textAtlases[this.textAtlases.length - 1], 
                this.textAtlases.length = this.textAtlases.length - 1)), Qt.clean();
            }
        }, {
            key: "cleanAtlases",
            value: function() {}
        }, {
            key: "getCharBmp",
            value: function(t) {}
        }, {
            key: "checkBmpLine",
            value: function(t, e, i, n) {
                this.bmpData32.buffer != t.data.buffer && (this.bmpData32 = new Uint32Array(t.data.buffer));
                for (var r = t.width * e + i, a = i; a < n; a++) if (0 != this.bmpData32[r++]) return !0;
                return !1;
            }
        }, {
            key: "updateBbx",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = t.width, r = t.height, a = 0, s = e[1], o = 0, l = s;
                if (this.checkBmpLine(t, s, 0, n)) for (;;) {
                    if (1 + (l = (s + o) / 2 | 0) >= s) {
                        e[1] = l;
                        break;
                    }
                    this.checkBmpLine(t, l, 0, n) ? s = l : o = l;
                }
                if (e[3] > r) e[3] = r; else if (l = s = e[3], o = r, this.checkBmpLine(t, s, 0, n)) for (;;) {
                    if ((l = (s + o) / 2 | 0) - 1 <= s) {
                        e[3] = l;
                        break;
                    }
                    this.checkBmpLine(t, l, 0, n) ? s = l : o = l;
                }
                if (!i) {
                    var h = e[0], u = n * e[1];
                    for (l = e[1]; l < e[3]; l++) {
                        for (a = 0; a < h; a++) if (0 != this.bmpData32[u + a]) {
                            h = a;
                            break;
                        }
                        u += n;
                    }
                    e[0] = h;
                    var c = e[2];
                    for (u = n * e[1], l = e[1]; l < e[3]; l++) {
                        for (a = c; a < n; a++) if (0 != this.bmpData32[u + a]) {
                            c = a;
                            break;
                        }
                        u += n;
                    }
                    e[2] = c;
                }
            }
        }, {
            key: "getFontSizeInfo",
            value: function(e) {
                var i = this.fontSizeInfo[e];
                if (null != i) return i;
                var n = "bold " + t.standardFontSize + "px " + e;
                if (t.isWan1Wan) {
                    this.fontSizeW = 1.5 * this.charRender.getWidth(n, "有"), this.fontSizeH = 1.5 * t.standardFontSize;
                    var r = this.fontSizeW << 8 | this.fontSizeH;
                    return this.fontSizeInfo[e] = r, r;
                }
                t.pixelBBX[0] = t.standardFontSize / 2, t.pixelBBX[1] = t.standardFontSize / 2, 
                t.pixelBBX[2] = t.standardFontSize, t.pixelBBX[3] = t.standardFontSize;
                var a = 16, s = 16;
                this.charRender.scale(1, 1), t.tmpRI.height = t.standardFontSize, this.charRender.fontsz = t.standardFontSize;
                var o = this.charRender.getCharBmp("g", n, 0, "red", null, t.tmpRI, a, s, 16, 16);
                u.Render.isConchApp && (o.data = new Uint8ClampedArray(o.data)), this.bmpData32 = new Uint32Array(o.data.buffer), 
                this.updateBbx(o, t.pixelBBX, !1), o = this.charRender.getCharBmp("有", n, 0, "red", null, t.tmpRI, s, s, 16, 16), 
                u.Render.isConchApp && (o.data = new Uint8ClampedArray(o.data)), this.bmpData32 = new Uint32Array(o.data.buffer), 
                t.pixelBBX[2] < a + t.tmpRI.width && (t.pixelBBX[2] = a + t.tmpRI.width), this.updateBbx(o, t.pixelBBX, !1), 
                u.Render.isConchApp && (a = 0, s = 0);
                var l = Math.max(a - t.pixelBBX[0], 0) << 24 | Math.max(s - t.pixelBBX[1], 0) << 16 | t.pixelBBX[2] - t.pixelBBX[0] << 8 | t.pixelBBX[3] - t.pixelBBX[1];
                return this.fontSizeInfo[e] = l, l;
            }
        }, {
            key: "printDbgInfo",
            value: function() {
                for (var e in console.log("图集个数:" + this.textAtlases.length + ",每个图集大小:" + t.atlasWidth + "x" + t.atlasWidth, " 用canvas:", t.isWan1Wan), 
                console.log("图集占用空间:" + t.atlasWidth * t.atlasWidth * 4 / 1024 / 1024 * this.textAtlases.length + "M"), 
                console.log("缓存用到的字体:"), this.mapFont) {
                    var i = this.getFontSizeInfo(e), n = i >> 24, r = i >> 16 & 255, a = i >> 8 & 255, s = 255 & i;
                    console.log("    " + e, " off:", n, r, " size:", a, s);
                }
                var o = 0;
                console.log("缓存数据:");
                var l = 0, h = 0;
                this.textAtlases.forEach(function(e) {
                    var i = e.texture.id, n = Mt.loopCount - e.texture.lastTouchTm, r = n > 0 ? n + "帧以前" : "当前帧";
                    for (var a in l += e.texture.curUsedCovRate, h += e.texture.curUsedCovRateAtlas, 
                    console.log("--图集(id:" + i + ",当前使用率:" + (1e3 * e.texture.curUsedCovRate | 0) + "‰", "当前图集使用率:", (100 * e.texture.curUsedCovRateAtlas | 0) + "%", "图集使用率:", 100 * e.usedRate | 0, "%, 使用于:" + r + ")--:"), 
                    e.charMaps) {
                        var s = e.charMaps[a];
                        console.log("     off:", s.orix, s.oriy, " bmp宽高:", s.bmpWidth, s.bmpHeight, "无效:", s.deleted, "touchdt:", Mt.loopCount - s.touchTick, "位置:", s.uv[0] * t.atlasWidth | 0, s.uv[1] * t.atlasWidth | 0, "字符:", s.char, "key:", a), 
                        o++;
                    }
                }), console.log("独立贴图文字(" + this.isoTextures.length + "个):"), this.isoTextures.forEach(function(t) {
                    console.log("    size:", t._texW, t._texH, "touch间隔:", Mt.loopCount - t.lastTouchTm, "char:", t.ri.char);
                }), console.log("总缓存:", o, "总使用率:", l, "总当前图集使用率:", h);
            }
        }, {
            key: "showAtlas",
            value: function(e, i, n, r, a, s) {
                if (!this.textAtlases[e]) return console.log("没有这个图集"), null;
                var o = new u.Sprite(), l = this.textAtlases[e].texture, h = {
                    width: t.atlasWidth,
                    height: t.atlasWidth,
                    sourceWidth: t.atlasWidth,
                    sourceHeight: t.atlasWidth,
                    offsetX: 0,
                    offsetY: 0,
                    getIsReady: function() {
                        return !0;
                    },
                    _addReference: function() {},
                    _removeReference: function() {},
                    _getSource: function() {
                        return l._getSource();
                    },
                    bitmap: {
                        id: l.id
                    },
                    _uv: te.DEF_UV
                };
                return o.size = function(t, e) {
                    return this.width = t, this.height = e, o.graphics.clear(), o.graphics.drawRect(0, 0, o.width, o.height, i), 
                    o.graphics.drawTexture(h, 0, 0, o.width, o.height), this;
                }, o.graphics.drawRect(0, 0, a, s, i), o.graphics.drawTexture(h, 0, 0, a, s), o.pos(n, r), 
                u.stage.addChild(o), o;
            }
        }, {
            key: "filltext_native",
            value: function(t, e, i, n, r, a, s, o, l, h) {
                var c = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 0;
                if (!(e && e.length <= 0 || i && i.length < 1)) {
                    var _ = ee.Parse(a), d = 0;
                    switch (h) {
                      case "center":
                        d = u.Context.ENUM_TEXTALIGN_CENTER;
                        break;

                      case "right":
                        d = u.Context.ENUM_TEXTALIGN_RIGHT;
                    }
                    return this._fast_filltext(t, e, i, n, r, _, s, o, l, d, c);
                }
            }
        } ]), t;
    }();
    le.useOldCharBook = !1, le.atlasWidth = 1024, le.noAtlas = !1, le.forceSplitRender = !1, 
    le.forceWholeRender = !1, le.scaleFontWithCtx = !0, le.standardFontSize = 32, le.destroyAtlasDt = 10, 
    le.checkCleanTextureDt = 2e3, le.destroyUnusedTextureDt = 3e3, le.cleanMem = 104857600, 
    le.isWan1Wan = !1, le.showLog = !1, le.debugUV = !1, le.tmpRI = new ne(), le.pixelBBX = [ 0, 0, 0, 0 ], 
    le.imgdtRect = [ 0, 0, 0, 0 ], le.simClean = !1, Qt.gTextRender = le;
    var he = function() {
        function e() {
            if ((0, o.default)(this, e), this._tmpMatrix = new k(), this._drawTexToDrawTri_Vert = new Float32Array(8), 
            this._drawTexToDrawTri_Index = new Uint16Array([ 0, 1, 2, 0, 2, 3 ]), this._tempUV = new Float32Array(8), 
            this._drawTriUseAbsMatrix = !1, this._id = ++e._COUNT, this._other = null, this._renderNextSubmitIndex = 0, 
            this._path = null, this._drawCount = 1, this._width = e._MAXSIZE, this._height = e._MAXSIZE, 
            this._renderCount = 0, this._submits = null, this._curSubmit = null, this._submitKey = new nt(), 
            this._pathMesh = null, this._triangleMesh = null, this.meshlist = [], this._transedPoints = new Array(8), 
            this._temp4Points = new Array(8), this._clipRect = e.MAXCLIPRECT, this._globalClipMatrix = new k(e._MAXSIZE, 0, 0, e._MAXSIZE, 0, 0), 
            this._clipInCache = !1, this._clipInfoID = 0, this._clipID_Gen = 0, this._lastMatScaleX = 1, 
            this._lastMatScaleY = 1, this._lastMat_a = 1, this._lastMat_b = 0, this._lastMat_c = 0, 
            this._lastMat_d = 1, this._nBlendType = 0, this._save = null, this._targets = null, 
            this._charSubmitCache = null, this._saveMark = null, this._shader2D = new Ut(), 
            this.sprite = null, this._italicDeg = 0, this._lastTex = null, this._fillColor = 0, 
            this._flushCnt = 0, this.defTexture = null, this._colorFiler = null, this.drawTexAlign = !1, 
            this._incache = !1, this.isMain = !1, e._contextcount++, e._textRender = e._textRender || new le(), 
            !this.defTexture) {
                var t = new X(2, 2);
                t.setPixels(new Uint8Array(16)), t.lock = !0, this.defTexture = new te(t);
            }
            this._lastTex = this.defTexture, this.clear();
        }
        return (0, s.default)(e, [ {
            key: "drawImage",
            value: function() {}
        }, {
            key: "getImageData",
            value: function() {}
        }, {
            key: "measureText",
            value: function(t) {
                return null;
            }
        }, {
            key: "setTransform",
            value: function() {}
        }, {
            key: "$transform",
            value: function(t, e, i, n, r, a) {}
        }, {
            key: "clearRect",
            value: function(t, e, i, n) {}
        }, {
            key: "_drawRect",
            value: function(t, e, i, n, r) {
                $.renderBatches++, r && (this.fillStyle = r), this.fillRect(t, e, i, n, null);
            }
        }, {
            key: "drawTexture2",
            value: function(t, e, i, n, r, a) {}
        }, {
            key: "transformByMatrix",
            value: function(t, e, i) {
                this.transform(t.a, t.b, t.c, t.d, t.tx + e, t.ty + i);
            }
        }, {
            key: "saveTransform",
            value: function(t) {
                this.save();
            }
        }, {
            key: "restoreTransform",
            value: function(t) {
                this.restore();
            }
        }, {
            key: "drawRect",
            value: function(t, e, i, n, r, a, s) {
                null != r && (this.fillStyle = r, this.fillRect(t, e, i, n)), null != a && (this.strokeStyle = a, 
                this.lineWidth = s, this.strokeRect(t, e, i, n));
            }
        }, {
            key: "alpha",
            value: function(t) {
                this.globalAlpha *= t;
            }
        }, {
            key: "_transform",
            value: function(t, e, i) {
                this.translate(e, i), this.transform(t.a, t.b, t.c, t.d, t.tx, t.ty), this.translate(-e, -i);
            }
        }, {
            key: "_rotate",
            value: function(t, e, i) {
                this.translate(e, i), this.rotate(t), this.translate(-e, -i);
            }
        }, {
            key: "_scale",
            value: function(t, e, i, n) {
                this.translate(i, n), this.scale(t, e), this.translate(-i, -n);
            }
        }, {
            key: "_drawLine",
            value: function(t, e, i, n, r, a, s, o, l) {
                this.beginPath(), this.strokeStyle = s, this.lineWidth = o, this.moveTo(t + i, e + n), 
                this.lineTo(t + r, e + a), this.stroke();
            }
        }, {
            key: "_drawLines",
            value: function(t, e, i, n, r, a) {
                this.beginPath(), this.strokeStyle = n, this.lineWidth = r, this.addPath(i.slice(), !1, !1, t, e), 
                this.stroke();
            }
        }, {
            key: "drawCurves",
            value: function(t, e, i, n, r) {
                this.beginPath(), this.strokeStyle = n, this.lineWidth = r, this.moveTo(t + i[0], e + i[1]);
                for (var a = 2, s = i.length; a < s; ) this.quadraticCurveTo(t + i[a++], e + i[a++], t + i[a++], e + i[a++]);
                this.stroke();
            }
        }, {
            key: "_fillAndStroke",
            value: function(t, e, i) {
                null != t && (this.fillStyle = t, this.fill()), null != e && i > 0 && (this.strokeStyle = e, 
                this.lineWidth = i, this.stroke());
            }
        }, {
            key: "_drawCircle",
            value: function(t, i, n, r, a, s, o) {
                $.renderBatches++, this.beginPath(!0), this.arc(t, i, n, 0, e.PI2), this.closePath(), 
                this._fillAndStroke(r, a, s);
            }
        }, {
            key: "_drawPie",
            value: function(t, e, i, n, r, a, s, o, l) {
                this.beginPath(), this.moveTo(t, e), this.arc(t, e, i, n, r), this.closePath(), 
                this._fillAndStroke(a, s, o);
            }
        }, {
            key: "_drawPoly",
            value: function(t, e, i, n, r, a, s, o) {
                this.beginPath(), this.addPath(i.slice(), !0, s, t, e), this.closePath(), this._fillAndStroke(n, r, a, s);
            }
        }, {
            key: "_drawPath",
            value: function(t, e, i, n, r) {
                this.beginPath();
                for (var a = 0, s = i.length; a < s; a++) {
                    var o = i[a];
                    switch (o[0]) {
                      case "moveTo":
                        this.moveTo(t + o[1], e + o[2]);
                        break;

                      case "lineTo":
                        this.lineTo(t + o[1], e + o[2]);
                        break;

                      case "arcTo":
                        this.arcTo(t + o[1], e + o[2], t + o[3], e + o[4], o[5]);
                        break;

                      case "closePath":
                        this.closePath();
                    }
                }
                null != n && (this.fillStyle = n.fillStyle, this.fill()), null != r && (this.strokeStyle = r.strokeStyle, 
                this.lineWidth = r.lineWidth || 1, this.lineJoin = r.lineJoin, this.lineCap = r.lineCap, 
                this.miterLimit = r.miterLimit, this.stroke());
            }
        }, {
            key: "clearBG",
            value: function(t, e, i, n) {
                var r = L.mainContext;
                r.clearColor(t, e, i, n), r.clear(r.COLOR_BUFFER_BIT);
            }
        }, {
            key: "_getSubmits",
            value: function() {
                return this._submits;
            }
        }, {
            key: "_releaseMem",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (this._submits) {
                    this._curMat && this._curMat.destroy(), this._curMat = null, this._shader2D.destroy(), 
                    this._shader2D = null, this._charSubmitCache.clear();
                    for (var e = 0, i = this._submits._length; e < i; e++) this._submits[e].releaseRender();
                    var n;
                    for (this._submits.length = 0, this._submits._length = 0, this._submits = null, 
                    this._curSubmit = null, this._path = null, this._save = null, e = 0, n = this.meshlist.length; e < n; e++) this.meshlist[e].destroy();
                    this.meshlist.length = 0, this.sprite = null, t || (this._targets && this._targets.destroy(), 
                    this._targets = null);
                }
            }
        }, {
            key: "destroy",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                --e._contextcount, this.sprite = null, this._releaseMem(t), this._charSubmitCache && this._charSubmitCache.destroy(), 
                this._mesh.destroy(), t || (this._targets && this._targets.destroy(), this._targets = null);
            }
        }, {
            key: "clear",
            value: function() {
                this._submits || (this._other = ue.DEFAULT, this._curMat = k.create(), this._charSubmitCache = new qt(), 
                this._mesh = Bt.getAMesh(this.isMain), this.meshlist.push(this._mesh), this._pathMesh = Ot.getAMesh(this.isMain), 
                this.meshlist.push(this._pathMesh), this._triangleMesh = Ft.getAMesh(this.isMain), 
                this.meshlist.push(this._triangleMesh), this._submits = [], this._save = [ Rt.Create(this) ], 
                this._save.length = 10, this._shader2D = new Ut()), this._submitKey.clear(), this._mesh.clearVB(), 
                this._drawCount = 1, this._other = ue.DEFAULT, this._other.lineWidth = this._shader2D.ALPHA = 1, 
                this._nBlendType = 0, this._clipRect = e.MAXCLIPRECT, this._curSubmit = xt.RENDERBASE, 
                xt.RENDERBASE._ref = 16777215, xt.RENDERBASE._numEle = 0, this._shader2D.fillStyle = this._shader2D.strokeStyle = gt.DEFAULT;
                for (var t = 0, i = this._submits._length; t < i; t++) this._submits[t].releaseRender();
                this._submits._length = 0, this._curMat.identity(), this._other.clear(), this._saveMark = this._save[0], 
                this._save._length = 1;
            }
        }, {
            key: "size",
            value: function(e, i) {
                this._width == e && this._height == i || (this._width = e, this._height = i, this._targets && (this._targets.destroy(), 
                this._targets = new K(e, i, t.RenderTextureFormat.R8G8B8A8, -1)), this.isMain && (L.mainContext.viewport(0, 0, e, i), 
                z.width = e, z.height = i)), 0 === e && 0 === i && this._releaseMem();
            }
        }, {
            key: "getMatScaleX",
            value: function() {
                return this._lastMat_a == this._curMat.a && this._lastMat_b == this._curMat.b || (this._lastMatScaleX = this._curMat.getScaleX(), 
                this._lastMat_a = this._curMat.a, this._lastMat_b = this._curMat.b), this._lastMatScaleX;
            }
        }, {
            key: "getMatScaleY",
            value: function() {
                return this._lastMat_c == this._curMat.c && this._lastMat_d == this._curMat.d || (this._lastMatScaleY = this._curMat.getScaleY(), 
                this._lastMat_c = this._curMat.c, this._lastMat_d = this._curMat.d), this._lastMatScaleY;
            }
        }, {
            key: "setFillColor",
            value: function(t) {
                this._fillColor = t;
            }
        }, {
            key: "getFillColor",
            value: function() {
                return this._fillColor;
            }
        }, {
            key: "translate",
            value: function(t, e) {
                0 === t && 0 === e || (Ct.save(this), this._curMat._bTransform ? (At.save(this), 
                this._curMat.tx += t * this._curMat.a + e * this._curMat.c, this._curMat.ty += t * this._curMat.b + e * this._curMat.d) : (this._curMat.tx = t, 
                this._curMat.ty = e));
            }
        }, {
            key: "save",
            value: function() {
                this._save[this._save._length++] = Rt.Create(this);
            }
        }, {
            key: "restore",
            value: function() {
                var t = this._save._length, e = this._nBlendType;
                if (!(t < 1)) {
                    for (var i = t - 1; i >= 0; i--) {
                        var n = this._save[i];
                        if (n.restore(this), n.isSaveMark()) return void (this._save._length = i);
                    }
                    e != this._nBlendType && (this._curSubmit = xt.RENDERBASE);
                }
            }
        }, {
            key: "fillText",
            value: function(t, i, n, r, a, s) {
                var o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "";
                e._textRender.filltext(this, t, i, n, r, a, l, o, s);
            }
        }, {
            key: "drawText",
            value: function(t, i, n, r, a, s) {
                e._textRender.filltext(this, t, i, n, r, a, null, 0, s);
            }
        }, {
            key: "fillWords",
            value: function(t, i, n, r, a) {
                e._textRender.fillWords(this, t, i, n, r, a, null, 0);
            }
        }, {
            key: "strokeWord",
            value: function(t, i, n, r, a, s, o) {
                e._textRender.filltext(this, t, i, n, r, null, a, s, o);
            }
        }, {
            key: "fillBorderText",
            value: function(t, i, n, r, a, s, o, l) {
                e._textRender.filltext(this, t, i, n, r, a, s, o, l);
            }
        }, {
            key: "fillBorderWords",
            value: function(t, i, n, r, a, s, o) {
                e._textRender.fillWords(this, t, i, n, r, a, s, o);
            }
        }, {
            key: "_fast_filltext",
            value: function(t, i, n, r, a, s, o, l) {
                var h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0;
                e._textRender._fast_filltext(this, t, null, i, n, r, a, s, o, l, h);
            }
        }, {
            key: "_fillRect",
            value: function(t, i, n, r, a) {
                var s = this._curSubmit, o = s && s._key.submitType === xt.KEY_DRAWTEXTURE && s._key.blendShader === this._nBlendType;
                this._mesh.vertNum + 4 > e._MAXVERTNUM && (this._mesh = Bt.getAMesh(this.isMain), 
                this.meshlist.push(this._mesh), o = !1), o && (o = o && this.isSameClipInfo(s)), 
                this.transformQuad(t, i, n, r, 0, this._curMat, this._transedPoints), this.clipedOff(this._transedPoints) || (this._mesh.addQuad(this._transedPoints, te.NO_UV, a, !1), 
                o || (s = this._curSubmit = jt.create(this, this._mesh, it.create(Q.TEXTURE2D, 0)), 
                this._submits[this._submits._length++] = s, this._copyClipInfo(s, this._globalClipMatrix), 
                s.shaderValue.textureHost = this._lastTex, s._key.other = this._lastTex && this._lastTex.bitmap ? this._lastTex.bitmap.id : -1, 
                s._renderType = xt.TYPE_TEXTURE), this._curSubmit._numEle += 6, this._mesh.indexNum += 6, 
                this._mesh.vertNum += 4);
            }
        }, {
            key: "fillRect",
            value: function(t, e, i, n, r) {
                var a = r ? gt.create(r) : this._shader2D.fillStyle, s = this.mixRGBandAlpha(a.toInt());
                this._fillRect(t, e, i, n, s);
            }
        }, {
            key: "fillTexture",
            value: function(t, e, i, n, r, a, s, o) {
                t._getSource() ? this._fillTexture(t, t.width, t.height, t.uvrect, e, i, n, r, a, s.x, s.y) : this.sprite && u.systemTimer.callLater(this, this._repaintSprite);
            }
        }, {
            key: "_fillTexture",
            value: function(t, i, n, r, a, s, o, l, h, u, c) {
                var _ = this._curSubmit;
                this._mesh.vertNum + 4 > e._MAXVERTNUM && (this._mesh = Bt.getAMesh(this.isMain), 
                this.meshlist.push(this._mesh));
                var d = !0, f = !0;
                switch (h) {
                  case "repeat":
                    break;

                  case "repeat-x":
                    f = !1;
                    break;

                  case "repeat-y":
                    d = !1;
                    break;

                  case "no-repeat":
                    d = f = !1;
                }
                var v = this._temp4Points, p = 0, y = 0, g = 0, m = 0, T = 0, x = 0;
                if (u < 0 ? (g = a, p = -u % i / i) : g = a + u, c < 0 ? (m = s, y = -c % n / n) : m = s + c, 
                T = a + o, x = s + l, !d && (T = Math.min(T, a + u + i)), !f && (x = Math.min(x, s + c + n)), 
                !(T < a || x < s || g > T || m > x)) {
                    var k = (T - a - u) / i, E = (x - s - c) / n;
                    if (this.transformQuad(g, m, T - g, x - m, 0, this._curMat, this._transedPoints), 
                    v[0] = p, v[1] = y, v[2] = k, v[3] = y, v[4] = k, v[5] = E, v[6] = p, v[7] = E, 
                    !this.clipedOff(this._transedPoints)) {
                        var R = this._mixRGBandAlpha(4294967295, this._shader2D.ALPHA);
                        this._mesh.addQuad(this._transedPoints, v, R, !0);
                        var A = it.create(Q.TEXTURE2D, 0);
                        A.defines.add(Q.FILLTEXTURE), A.u_TexRange = r.concat(), _ = this._curSubmit = jt.create(this, this._mesh, A), 
                        this._submits[this._submits._length++] = _, this._copyClipInfo(_, this._globalClipMatrix), 
                        _.shaderValue.textureHost = t, _._renderType = xt.TYPE_TEXTURE, this._curSubmit._numEle += 6, 
                        this._mesh.indexNum += 6, this._mesh.vertNum += 4;
                    }
                    this.breakNextMerge();
                }
            }
        }, {
            key: "setColorFilter",
            value: function(t) {
                kt.save(this, kt.TYPE_COLORFILTER, this, !0), this._colorFiler = t, this._curSubmit = xt.RENDERBASE;
            }
        }, {
            key: "drawTexture",
            value: function(t, e, i, n, r) {
                this._drawTextureM(t, e, i, n, r, null, 1, null);
            }
        }, {
            key: "drawTextures",
            value: function(t, e, i, n) {
                if (t._getSource()) for (var r = e.length / 2, a = 0, s = t.bitmap.id, o = 0; o < r; o++) this._inner_drawTexture(t, s, e[a++] + i, e[a++] + n, 0, 0, null, null, 1, !1); else this.sprite && u.systemTimer.callLater(this, this._repaintSprite);
            }
        }, {
            key: "_drawTextureAddSubmit",
            value: function(t, e) {
                var i = null;
                i = jt.create(this, this._mesh, it.create(Q.TEXTURE2D, 0)), this._submits[this._submits._length++] = i, 
                i.shaderValue.textureHost = e, i._key.other = t, i._renderType = xt.TYPE_TEXTURE, 
                this._curSubmit = i;
            }
        }, {
            key: "_drawTextureM",
            value: function(t, e, i, n, r, a, s, o) {
                var l = this.sprite;
                return !!t._getSource(function() {
                    l && l.repaint();
                }) && this._inner_drawTexture(t, t.bitmap.id, e, i, n, r, a, o, s, !1);
            }
        }, {
            key: "_drawRenderTexture",
            value: function(t, e, i, n, r, a, s, o) {
                return this._inner_drawTexture(t, -1, e, i, n, r, a, o, 1, !1);
            }
        }, {
            key: "submitDebugger",
            value: function() {
                this._submits[this._submits._length++] = rt.create([], function() {}, this);
            }
        }, {
            key: "_copyClipInfo",
            value: function(t, e) {
                var i = t.shaderValue.clipMatDir;
                i[0] = e.a, i[1] = e.b, i[2] = e.c, i[3] = e.d;
                var n = t.shaderValue.clipMatPos;
                n[0] = e.tx, n[1] = e.ty, t.clipInfoID = this._clipInfoID, this._clipInCache && (t.shaderValue.clipOff[0] = 1);
            }
        }, {
            key: "isSameClipInfo",
            value: function(t) {
                return t.clipInfoID === this._clipInfoID;
            }
        }, {
            key: "_useNewTex2DSubmit",
            value: function(t, i) {
                this._mesh.vertNum + i > e._MAXVERTNUM && (this._mesh = Bt.getAMesh(this.isMain), 
                this.meshlist.push(this._mesh));
                var n = jt.create(this, this._mesh, it.create(Q.TEXTURE2D, 0));
                this._submits[this._submits._length++] = this._curSubmit = n, n.shaderValue.textureHost = t, 
                this._copyClipInfo(n, this._globalClipMatrix);
            }
        }, {
            key: "_drawTexRect",
            value: function(t, e, i, n, r) {
                this.transformQuad(t, e, i, n, this._italicDeg, this._curMat, this._transedPoints);
                var a = this._transedPoints;
                a[0] = a[0] + .5 | 0, a[1] = a[1] + .5 | 0, a[2] = a[2] + .5 | 0, a[3] = a[3] + .5 | 0, 
                a[4] = a[4] + .5 | 0, a[5] = a[5] + .5 | 0, a[6] = a[6] + .5 | 0, a[7] = a[7] + .5 | 0, 
                this.clipedOff(this._transedPoints) || (this._mesh.addQuad(this._transedPoints, r, this._fillColor, !0), 
                this._curSubmit._numEle += 6, this._mesh.indexNum += 6, this._mesh.vertNum += 4);
            }
        }, {
            key: "drawCallOptimize",
            value: function(t) {
                return this._charSubmitCache.enable(t, this), t;
            }
        }, {
            key: "_inner_drawTexture",
            value: function(t, i, n, r, a, s, o, l, h, u) {
                if (a <= 0 || s <= 0) return !1;
                var c = this._curSubmit._key;
                if (l = l || t._uv, c.submitType === xt.KEY_TRIANGLES && c.other === i) {
                    var _ = this._drawTexToDrawTri_Vert;
                    _[0] = n, _[1] = r, _[2] = n + a, _[3] = r, _[4] = n + a, _[5] = r + s, _[6] = n, 
                    _[7] = r + s, this._drawTriUseAbsMatrix = !0;
                    var d = this._tempUV;
                    return d[0] = l[0], d[1] = l[1], d[2] = l[2], d[3] = l[3], d[4] = l[4], d[5] = l[5], 
                    d[6] = l[6], d[7] = l[7], this.drawTriangles(t, 0, 0, _, d, this._drawTexToDrawTri_Index, o, h, null, null), 
                    this._drawTriUseAbsMatrix = !1, !0;
                }
                var f = this._mesh, v = this._curSubmit, p = u ? this._charSubmitCache.getPos() : this._transedPoints;
                if (this.transformQuad(n, r, a || t.width, s || t.height, this._italicDeg, o || this._curMat, p), 
                this.drawTexAlign) {
                    var y = Math.round;
                    p[0] = y(p[0]), p[1] = y(p[1]), p[2] = y(p[2]), p[3] = y(p[3]), p[4] = y(p[4]), 
                    p[5] = y(p[5]), p[6] = y(p[6]), p[7] = y(p[7]), this.drawTexAlign = !1;
                }
                var g = this._mixRGBandAlpha(4294967295, this._shader2D.ALPHA * h);
                if (u) return this._charSubmitCache.add(this, t, i, p, l, g), !0;
                this._drawCount++;
                var m = i >= 0 && c.submitType === xt.KEY_DRAWTEXTURE && c.other === i;
                return m && (m = m && this.isSameClipInfo(v)), this._lastTex = t, f.vertNum + 4 > e._MAXVERTNUM && (f = this._mesh = Bt.getAMesh(this.isMain), 
                this.meshlist.push(f), m = !1), f.addQuad(p, l, g, !0), m || (this._submits[this._submits._length++] = this._curSubmit = v = jt.create(this, f, it.create(Q.TEXTURE2D, 0)), 
                v.shaderValue.textureHost = t, v._key.other = i, this._copyClipInfo(v, this._globalClipMatrix)), 
                v._numEle += 6, f.indexNum += 6, f.vertNum += 4, !0;
            }
        }, {
            key: "transform4Points",
            value: function(t, e, i) {
                var n = e.tx, r = e.ty, a = e.a, s = e.b, o = e.c, l = e.d, h = t[0], u = t[1], c = t[2], _ = t[3], d = t[4], f = t[5], v = t[6], p = t[7];
                e._bTransform ? (i[0] = h * a + u * o + n, i[1] = h * s + u * l + r, i[2] = c * a + _ * o + n, 
                i[3] = c * s + _ * l + r, i[4] = d * a + f * o + n, i[5] = d * s + f * l + r, i[6] = v * a + p * o + n, 
                i[7] = v * s + p * l + r) : (i[0] = h + n, i[1] = u + r, i[2] = c + n, i[3] = _ + r, 
                i[4] = d + n, i[5] = f + r, i[6] = v + n, i[7] = p + r);
            }
        }, {
            key: "clipedOff",
            value: function(t) {
                return this._clipRect.width <= 0 || this._clipRect.height <= 0;
            }
        }, {
            key: "transformQuad",
            value: function(t, e, i, n, r, a, s) {
                var o = 0;
                0 != r && (o = Math.tan(r * Math.PI / 180) * n);
                var l = t + i, h = e + n, u = a.tx, c = a.ty, _ = a.a, d = a.b, f = a.c, v = a.d, p = t + o, y = e, g = l + o, m = e, T = l, x = h, k = t, E = h;
                a._bTransform ? (s[0] = p * _ + y * f + u, s[1] = p * d + y * v + c, s[2] = g * _ + m * f + u, 
                s[3] = g * d + m * v + c, s[4] = T * _ + x * f + u, s[5] = T * d + x * v + c, s[6] = k * _ + E * f + u, 
                s[7] = k * d + E * v + c) : (s[0] = p + u, s[1] = y + c, s[2] = g + u, s[3] = m + c, 
                s[4] = T + u, s[5] = x + c, s[6] = k + u, s[7] = E + c);
            }
        }, {
            key: "pushRT",
            value: function() {
                this.addRenderObject(rt.create(null, K.pushRT, this));
            }
        }, {
            key: "popRT",
            value: function() {
                this.addRenderObject(rt.create(null, K.popRT, this)), this.breakNextMerge();
            }
        }, {
            key: "useRT",
            value: function(t) {
                this.addRenderObject(rt.create([ t ], function(t) {
                    if (!t) throw "error useRT";
                    t.start(), t.clear(0, 0, 0, 0);
                }, this)), this.breakNextMerge();
            }
        }, {
            key: "RTRestore",
            value: function(t) {
                this.addRenderObject(rt.create([ t ], function(t) {
                    t.restore();
                }, this)), this.breakNextMerge();
            }
        }, {
            key: "breakNextMerge",
            value: function() {
                this._curSubmit = xt.RENDERBASE;
            }
        }, {
            key: "_repaintSprite",
            value: function() {
                this.sprite && this.sprite.repaint();
            }
        }, {
            key: "drawTextureWithTransform",
            value: function(t, e, i, n, r, a, s, o, l, h) {
                var u, c = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : null, _ = arguments.length > 11 ? arguments[11] : void 0, d = this._curMat;
                h && (u = this.globalCompositeOperation, this.globalCompositeOperation = h);
                var f = this._colorFiler;
                if (c && this.setColorFilter(c), !a) return this._drawTextureM(t, e + s, i + o, n, r, d, l, _), 
                h && (this.globalCompositeOperation = u), void (c && this.setColorFilter(f));
                var v = this._tmpMatrix;
                v.a = a.a, v.b = a.b, v.c = a.c, v.d = a.d, v.tx = a.tx + s, v.ty = a.ty + o, v._bTransform = a._bTransform, 
                a && d._bTransform ? (k.mul(v, d, v), (a = v)._bTransform = !0) : (v.tx += d.tx, 
                v.ty += d.ty, a = v), this._drawTextureM(t, e, i, n, r, a, l, _), h && (this.globalCompositeOperation = u), 
                c && this.setColorFilter(f);
            }
        }, {
            key: "_flushToTarget",
            value: function(t, e) {
                z.worldScissorTest = !1;
                var i = A.instance;
                i.disable(i.SCISSOR_TEST);
                var n = z.worldAlpha, r = z.worldMatrix4, a = z.worldMatrix;
                z.worldMatrix = k.EMPTY, z.restoreTempArray(), z.worldMatrix4 = z.TEMPMAT4_ARRAY, 
                z.worldAlpha = 1, H.activeShader = null, e.start(), t._submits._length > 0 && e.clear(0, 0, 0, 0), 
                t._curSubmit = xt.RENDERBASE, t.flush(), t.clear(), e.restore(), t._curSubmit = xt.RENDERBASE, 
                H.activeShader = null, z.worldAlpha = n, z.worldMatrix4 = r, z.worldMatrix = a;
            }
        }, {
            key: "drawCanvas",
            value: function(t, e, i, n, r) {
                if (t) {
                    var a, s = t.context;
                    if (s._targets) s._submits._length > 0 && (a = rt.create([ s, s._targets ], this._flushToTarget, this), 
                    this._submits[this._submits._length++] = a), this._drawRenderTexture(s._targets, e, i, n, r, null, 1, K.flipyuv), 
                    this._curSubmit = xt.RENDERBASE; else {
                        var o = t;
                        o.touches && o.touches.forEach(function(t) {
                            t.touch();
                        }), a = zt.create(t, this._shader2D.ALPHA, this._shader2D.filters), this._submits[this._submits._length++] = a, 
                        a._key.clear();
                        var l = a._matrix;
                        this._curMat.copyTo(l);
                        var h = l.tx, u = l.ty;
                        l.tx = l.ty = 0, l.transformPoint(E.TEMP.setTo(e, i)), l.translate(E.TEMP.x + h, E.TEMP.y + u), 
                        k.mul(o.invMat, l, l), this._curSubmit = xt.RENDERBASE;
                    }
                }
            }
        }, {
            key: "drawTarget",
            value: function(t, i, n, r, a, s, o) {
                var l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : -1;
                if (this._drawCount++, this._mesh.vertNum + 4 > e._MAXVERTNUM && (this._mesh = Bt.getAMesh(this.isMain), 
                this.meshlist.push(this._mesh)), this.transformQuad(i, n, r, a, 0, s || this._curMat, this._transedPoints), 
                !this.clipedOff(this._transedPoints)) {
                    this._mesh.addQuad(this._transedPoints, l || te.DEF_UV, 4294967295, !0);
                    var u = this._curSubmit = Kt.create(this, this._mesh, o, t);
                    return u.blendType = -1 == h ? this._nBlendType : h, this._copyClipInfo(u, this._globalClipMatrix), 
                    u._numEle = 6, this._mesh.indexNum += 6, this._mesh.vertNum += 4, this._submits[this._submits._length++] = u, 
                    this._curSubmit = xt.RENDERBASE, !0;
                }
                return this._curSubmit = xt.RENDERBASE, !1;
            }
        }, {
            key: "drawTriangles",
            value: function(t, i, n, r, a, s, o, l, h, c) {
                var _ = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 4294967295;
                if (t._getSource()) {
                    var d = null;
                    c && (d = this.globalCompositeOperation, this.globalCompositeOperation = c), this._drawCount++;
                    var f = this._tmpMatrix, v = this._triangleMesh, p = null, y = !1;
                    h && (p = this._colorFiler, this._colorFiler = h, this._curSubmit = xt.RENDERBASE, 
                    y = p != h);
                    var g = t.bitmap, m = this._curSubmit._key, T = m.submitType === xt.KEY_TRIANGLES && m.other === g.id && m.blendShader == this._nBlendType;
                    if (v.vertNum + r.length / 2 > e._MAXVERTNUM && (v = this._triangleMesh = Ft.getAMesh(this.isMain), 
                    this.meshlist.push(v), T = !1), !T) {
                        var x = this._curSubmit = jt.create(this, v, it.create(Q.TEXTURE2D, 0));
                        x.shaderValue.textureHost = t, x._renderType = xt.TYPE_TEXTURE, x._key.submitType = xt.KEY_TRIANGLES, 
                        x._key.other = g.id, this._copyClipInfo(x, this._globalClipMatrix), this._submits[this._submits._length++] = x;
                    }
                    var E = this._mixRGBandAlpha(_, this._shader2D.ALPHA * l);
                    this._drawTriUseAbsMatrix ? v.addData(r, a, s, o, E) : (o ? (f.a = o.a, f.b = o.b, 
                    f.c = o.c, f.d = o.d, f.tx = o.tx + i, f.ty = o.ty + n) : (f.a = 1, f.b = 0, f.c = 0, 
                    f.d = 1, f.tx = i, f.ty = n), k.mul(f, this._curMat, f), v.addData(r, a, s, f || this._curMat, E)), 
                    this._curSubmit._numEle += s.length, y && (this._colorFiler = p, this._curSubmit = xt.RENDERBASE), 
                    c && (this.globalCompositeOperation = d);
                } else this.sprite && u.systemTimer.callLater(this, this._repaintSprite);
            }
        }, {
            key: "transform",
            value: function(t, e, i, n, r, a) {
                At.save(this), k.mul(k.TEMP.setTo(t, e, i, n, r, a), this._curMat, this._curMat), 
                this._curMat._checkTransform();
            }
        }, {
            key: "_transformByMatrix",
            value: function(t, e, i) {
                t.setTranslate(e, i), k.mul(t, this._curMat, this._curMat), t.setTranslate(0, 0), 
                this._curMat._bTransform = !0;
            }
        }, {
            key: "setTransformByMatrix",
            value: function(t) {
                t.copyTo(this._curMat);
            }
        }, {
            key: "rotate",
            value: function(t) {
                At.save(this), this._curMat.rotateEx(t);
            }
        }, {
            key: "scale",
            value: function(t, e) {
                At.save(this), this._curMat.scaleEx(t, e);
            }
        }, {
            key: "clipRect",
            value: function(t, i, n, r) {
                Et.save(this), this._clipRect == e.MAXCLIPRECT ? this._clipRect = new R(t, i, n, r) : (this._clipRect.width = n, 
                this._clipRect.height = r, this._clipRect.x = t, this._clipRect.y = i), this._clipID_Gen++, 
                this._clipID_Gen %= 1e4, this._clipInfoID = this._clipID_Gen;
                var a = this._globalClipMatrix, s = a.tx, o = a.ty, l = s + a.a, h = o + a.d;
                if (this._clipRect.width >= e._MAXSIZE ? (a.a = a.d = e._MAXSIZE, a.b = a.c = a.tx = a.ty = 0) : (this._curMat._bTransform ? (a.tx = this._clipRect.x * this._curMat.a + this._clipRect.y * this._curMat.c + this._curMat.tx, 
                a.ty = this._clipRect.x * this._curMat.b + this._clipRect.y * this._curMat.d + this._curMat.ty, 
                a.a = this._clipRect.width * this._curMat.a, a.b = this._clipRect.width * this._curMat.b, 
                a.c = this._clipRect.height * this._curMat.c, a.d = this._clipRect.height * this._curMat.d) : (a.tx = this._clipRect.x + this._curMat.tx, 
                a.ty = this._clipRect.y + this._curMat.ty, a.a = this._clipRect.width, a.b = a.c = 0, 
                a.d = this._clipRect.height), this._incache && (this._clipInCache = !0)), a.a > 0 && a.d > 0) {
                    var u = a.tx + a.a, c = a.ty + a.d;
                    u <= s || c <= o || a.tx >= l || a.ty >= h ? (a.a = -.1, a.d = -.1) : (a.tx < s && (a.a -= s - a.tx, 
                    a.tx = s), u > l && (a.a -= u - l), a.ty < o && (a.d -= o - a.ty, a.ty = o), c > h && (a.d -= c - h), 
                    a.a <= 0 && (a.a = -.1), a.d <= 0 && (a.d = -.1));
                }
            }
        }, {
            key: "drawMesh",
            value: function(t, e, i, n, r, a, s, o) {}
        }, {
            key: "addRenderObject",
            value: function(t) {
                this._submits[this._submits._length++] = t;
            }
        }, {
            key: "submitElement",
            value: function(t, e) {
                this.isMain;
                var i = this._submits, n = i._length;
                e < 0 && (e = i._length);
                for (var r = xt.RENDERBASE; t < e; ) this._renderNextSubmitIndex = t + 1, i[t] !== xt.RENDERBASE ? (xt.preRender = r, 
                t += (r = i[t]).renderSubmit()) : t++;
                return n;
            }
        }, {
            key: "flush",
            value: function() {
                this._clipID_Gen = 0;
                var t = this.submitElement(0, this._submits._length);
                this._path && this._path.reset(), Gt.instance && Gt.getInstance().reset(), this._curSubmit = xt.RENDERBASE;
                for (var e = 0, i = this.meshlist.length; e < i; e++) {
                    var n = this.meshlist[e];
                    n.canReuse ? n.releaseMesh() : n.destroy();
                }
                return this.meshlist.length = 0, this._mesh = Bt.getAMesh(this.isMain), this._pathMesh = Ot.getAMesh(this.isMain), 
                this._triangleMesh = Ft.getAMesh(this.isMain), this.meshlist.push(this._mesh, this._pathMesh, this._triangleMesh), 
                this._flushCnt++, this._flushCnt % 60 == 0 && this.isMain && le.textRenderInst && le.textRenderInst.GC(), 
                t;
            }
        }, {
            key: "beginPath",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                this._getPath().beginPath(t);
            }
        }, {
            key: "closePath",
            value: function() {
                this._path.closePath();
            }
        }, {
            key: "addPath",
            value: function(t, e, i, n, r) {
                for (var a = 0, s = 0, o = t.length / 2; s < o; s++) {
                    var l = t[a] + n, h = t[a + 1] + r;
                    t[a] = l, t[a + 1] = h, a += 2;
                }
                this._getPath().push(t, i);
            }
        }, {
            key: "fill",
            value: function() {
                var t = this._curMat, i = this._getPath(), n = this._curSubmit, r = n._key.submitType === xt.KEY_VG && n._key.blendShader === this._nBlendType;
                r && (r = r && this.isSameClipInfo(n)), r || (this._curSubmit = this.addVGSubmit(this._pathMesh));
                for (var a, s = this.mixRGBandAlpha(this.fillStyle.toInt()), o = 0, l = 0, h = i.paths.length; l < h; l++) {
                    var u = i.paths[l], c = u.path.length / 2;
                    if (!(c < 3 || 3 == c && !u.convex)) {
                        var _, d, f, v, p = u.path.concat(), y = 0;
                        if (t._bTransform) for (y = 0; y < c; y++) d = 1 + (_ = y << 1), f = p[_], v = p[d], 
                        p[_] = t.a * f + t.c * v + t.tx, p[d] = t.b * f + t.d * v + t.ty; else for (y = 0; y < c; y++) d = 1 + (_ = y << 1), 
                        f = p[_], v = p[d], p[_] = f + t.tx, p[d] = v + t.ty;
                        this._pathMesh.vertNum + c > e._MAXVERTNUM && (this._curSubmit._numEle += o, o = 0, 
                        this._pathMesh = Ot.getAMesh(this.isMain), this._curSubmit = this.addVGSubmit(this._pathMesh));
                        var g = this._pathMesh.vertNum;
                        if (u.convex) {
                            var m = c - 2;
                            a = new Array(3 * m);
                            for (var T = 0, x = 0; x < m; x++) a[T++] = g, a[T++] = x + 1 + g, a[T++] = x + 2 + g;
                        } else if (a = Vt.earcut(p, null, 2), g > 0) for (var k = 0; k < a.length; k++) a[k] += g;
                        this._pathMesh.addVertAndIBToMesh(this, p, s, a), o += a.length;
                    }
                }
                this._curSubmit._numEle += o;
            }
        }, {
            key: "addVGSubmit",
            value: function(t) {
                var e = Ht.createShape(this, t, 0, it.create(Q.PRIMITIVE, 0));
                return e._key.submitType = xt.KEY_VG, this._submits[this._submits._length++] = e, 
                this._copyClipInfo(e, this._globalClipMatrix), e;
            }
        }, {
            key: "stroke",
            value: function() {
                if (this.lineWidth > 0) {
                    var t = this.mixRGBandAlpha(this.strokeStyle._color.numColor), i = this._getPath(), n = this._curSubmit, r = n._key.submitType === xt.KEY_VG && n._key.blendShader === this._nBlendType;
                    r && (r = r && this.isSameClipInfo(n)), r || (this._curSubmit = this.addVGSubmit(this._pathMesh));
                    for (var a = 0, s = 0, o = i.paths.length; s < o; s++) {
                        var l = i.paths[s];
                        if (!(l.path.length <= 0)) {
                            var h = [], u = [], c = 2 * l.path.length;
                            if (!(c < 2)) {
                                this._pathMesh.vertNum + c > e._MAXVERTNUM && (this._curSubmit._numEle += a, a = 0, 
                                this._pathMesh = Ot.getAMesh(this.isMain), this.meshlist.push(this._pathMesh), this._curSubmit = this.addVGSubmit(this._pathMesh)), 
                                Wt.createLine2(l.path, h, this.lineWidth, this._pathMesh.vertNum, u, l.loop);
                                var _, d, f, v, p = u.length / 2, y = this._curMat, g = 0;
                                if (y._bTransform) for (g = 0; g < p; g++) d = 1 + (_ = g << 1), f = u[_], v = u[d], 
                                u[_] = y.a * f + y.c * v + y.tx, u[d] = y.b * f + y.d * v + y.ty; else for (g = 0; g < p; g++) d = 1 + (_ = g << 1), 
                                f = u[_], v = u[d], u[_] = f + y.tx, u[d] = v + y.ty;
                                this._pathMesh.addVertAndIBToMesh(this, u, t, h), a += h.length;
                            }
                        }
                    }
                    this._curSubmit._numEle += a;
                }
            }
        }, {
            key: "moveTo",
            value: function(t, e) {
                var i = this._getPath();
                i.newPath(), i._lastOriX = t, i._lastOriY = e, i.addPoint(t, e);
            }
        }, {
            key: "lineTo",
            value: function(t, e) {
                var i = this._getPath();
                Math.abs(t - i._lastOriX) < .001 && Math.abs(e - i._lastOriY) < .001 || (i._lastOriX = t, 
                i._lastOriY = e, i.addPoint(t, e));
            }
        }, {
            key: "arcTo",
            value: function(t, i, n, r, a) {
                var s = 0, o = 0, l = 0, h = this._path._lastOriX - t, u = this._path._lastOriY - i, c = Math.sqrt(h * h + u * u);
                if (!(c <= 1e-6)) {
                    var _ = h / c, d = u / c, f = n - t, v = r - i, p = f * f + v * v, y = Math.sqrt(p);
                    if (!(y <= 1e-6)) {
                        var g = f / y, m = v / y, T = _ + g, x = d + m, k = Math.sqrt(T * T + x * x);
                        if (!(k <= 1e-6)) {
                            var E = T / k, R = x / k, A = Math.acos(E * _ + R * d), C = Math.PI / 2 - A, b = (c = a / Math.tan(C)) * _ + t, S = c * d + i, w = Math.sqrt(c * c + a * a), M = t + E * w, I = i + R * w, P = 0, L = 0;
                            if (_ * m - d * g >= 0) {
                                var D = 2 * C / e.SEGNUM;
                                P = Math.sin(D), L = Math.cos(D);
                            } else D = 2 * -C / e.SEGNUM, P = Math.sin(D), L = Math.cos(D);
                            var B = this._path._lastOriX, F = this._path._lastOriY, O = b, N = S;
                            (Math.abs(O - this._path._lastOriX) > .1 || Math.abs(N - this._path._lastOriY) > .1) && (o = O, 
                            l = N, B = O, F = N, this._path._lastOriX = o, this._path._lastOriY = l, this._path.addPoint(o, l));
                            var U = b - M, G = S - I;
                            for (s = 0; s < e.SEGNUM; s++) {
                                var W = U * L + G * P, Y = -U * P + G * L;
                                o = W + M, l = Y + I, (Math.abs(B - o) > .1 || Math.abs(F - l) > .1) && (this._path._lastOriX = o, 
                                this._path._lastOriY = l, this._path.addPoint(o, l), B = o, F = l), U = W, G = Y;
                            }
                        }
                    }
                }
            }
        }, {
            key: "arc",
            value: function(t, e, i, n, r) {
                var a, s, o = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], l = 0, h = 0, u = 0, c = 0, _ = 0;
                if (h = r - n, o) if (Math.abs(h) >= 2 * Math.PI) h = 2 * -Math.PI; else for (;h > 0; ) h -= 2 * Math.PI; else if (Math.abs(h) >= 2 * Math.PI) h = 2 * Math.PI; else for (;h < 0; ) h += 2 * Math.PI;
                var d = this.getMatScaleX(), f = this.getMatScaleY(), v = i * (d > f ? d : f), p = 2 * Math.PI * v;
                s = 0 | Math.max(p / 10, 10);
                var y = this._getPath();
                for (a = 0; a <= s; a++) l = n + h * (a / s), u = Math.cos(l), _ = e + Math.sin(l) * i, 
                (c = t + u * i) == this._path._lastOriX && _ == this._path._lastOriY || y.addPoint(c, _);
                u = Math.cos(r), _ = e + Math.sin(r) * i, (c = t + u * i) == this._path._lastOriX && _ == this._path._lastOriY || y.addPoint(c, _);
            }
        }, {
            key: "quadraticCurveTo",
            value: function(t, e, i, n) {
                for (var r = pt.I.getBezierPoints([ this._path._lastOriX, this._path._lastOriY, t, e, i, n ], 30, 2), a = 0, s = r.length / 2; a < s; a++) this.lineTo(r[2 * a], r[2 * a + 1]);
                this.lineTo(i, n);
            }
        }, {
            key: "mixRGBandAlpha",
            value: function(t) {
                return this._mixRGBandAlpha(t, this._shader2D.ALPHA);
            }
        }, {
            key: "_mixRGBandAlpha",
            value: function(t, e) {
                if (e >= 1) return t;
                var i = (4278190080 & t) >>> 24;
                return 0 != i ? i *= e : i = 255 * e, 16777215 & t | i << 24;
            }
        }, {
            key: "strokeRect",
            value: function(t, e, i, n, r) {
                if (this.lineWidth > 0) {
                    var a = this.mixRGBandAlpha(this.strokeStyle._color.numColor), s = this.lineWidth / 2;
                    this._fillRect(t - s, e - s, i + this.lineWidth, this.lineWidth, a), this._fillRect(t - s, e - s + n, i + this.lineWidth, this.lineWidth, a), 
                    this._fillRect(t - s, e + s, this.lineWidth, n - this.lineWidth, a), this._fillRect(t - s + i, e + s, this.lineWidth, n - this.lineWidth, a);
                }
            }
        }, {
            key: "clip",
            value: function() {}
        }, {
            key: "drawParticle",
            value: function(t, e, i) {
                i.x = t, i.y = e, this._submits[this._submits._length++] = i;
            }
        }, {
            key: "_getPath",
            value: function() {
                return this._path || (this._path = new mt());
            }
        }, {
            key: "_fillTexture_h",
            value: function(t, i, n, r, a, s, o, l) {
                r <= 0 && console.error("_fillTexture_h error: oriw must>0");
                for (var h = s, u = Math.floor(l / r), c = l % r, _ = 0; _ < u; _++) this._inner_drawTexture(t, i, h, o, r, a, this._curMat, n, 1, !1), 
                h += r;
                if (c > 0) {
                    var d = n[2] - n[0], f = n[0] + d * (c / r), v = e.tmpuv1;
                    v[0] = n[0], v[1] = n[1], v[2] = f, v[3] = n[3], v[4] = f, v[5] = n[5], v[6] = n[6], 
                    v[7] = n[7], this._inner_drawTexture(t, i, h, o, c, a, this._curMat, v, 1, !1);
                }
            }
        }, {
            key: "_fillTexture_v",
            value: function(t, i, n, r, a, s, o, l) {
                a <= 0 && console.error("_fillTexture_v error: orih must>0");
                for (var h = o, u = Math.floor(l / a), c = l % a, _ = 0; _ < u; _++) this._inner_drawTexture(t, i, s, h, r, a, this._curMat, n, 1, !1), 
                h += a;
                if (c > 0) {
                    var d = n[7] - n[1], f = n[1] + d * (c / a), v = e.tmpuv1;
                    v[0] = n[0], v[1] = n[1], v[2] = n[2], v[3] = n[3], v[4] = n[4], v[5] = f, v[6] = n[6], 
                    v[7] = f, this._inner_drawTexture(t, i, s, h, r, c, this._curMat, v, 1, !1);
                }
            }
        }, {
            key: "drawTextureWithSizeGrid",
            value: function(t, i, n, r, a, s, o, l) {
                if (t._getSource()) {
                    i += o, n += l;
                    var h = t.uv, u = t.bitmap.width, c = t.bitmap.height, _ = s[0], d = s[3], f = s[1], v = s[2], p = s[4], y = !1;
                    r == u && (d = f = 0), a == c && (_ = v = 0);
                    var g = _ / c, m = d / u, T = f / u, x = v / c;
                    if (d + f > r) {
                        var k = r;
                        y = !0, r = d + f, this.save(), this.clipRect(0 + i, 0 + n, k, a);
                    }
                    var E = t.bitmap.id, R = this._curMat, A = this._tempUV, C = h[0], b = h[1], S = h[4], w = h[5], M = C, I = b, P = S, L = w;
                    if (d && _ && (P = C + m, L = b + g, A[0] = C, A[1] = b, A[2] = P, A[3] = b, A[4] = P, 
                    A[5] = L, A[6] = C, A[7] = L, this._inner_drawTexture(t, E, i, n, d, _, R, A, 1, !1)), 
                    f && _ && (M = S - T, I = b, P = S, L = b + g, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, this._inner_drawTexture(t, E, r - f + i, 0 + n, f, _, R, A, 1, !1)), 
                    d && v && (M = C, I = w - x, P = C + m, L = w, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, this._inner_drawTexture(t, E, 0 + i, a - v + n, d, v, R, A, 1, !1)), 
                    f && v && (M = S - T, I = w - x, P = S, L = w, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, this._inner_drawTexture(t, E, r - f + i, a - v + n, f, v, R, A, 1, !1)), 
                    _ && (M = C + m, I = b, P = S - T, L = b + g, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, p ? this._fillTexture_h(t, E, A, t.width - d - f, _, d + i, n, r - d - f) : this._inner_drawTexture(t, E, d + i, n, r - d - f, _, R, A, 1, !1)), 
                    v && (M = C + m, I = w - x, P = S - T, L = w, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, p ? this._fillTexture_h(t, E, A, t.width - d - f, v, d + i, a - v + n, r - d - f) : this._inner_drawTexture(t, E, d + i, a - v + n, r - d - f, v, R, A, 1, !1)), 
                    d && (M = C, I = b + g, P = C + m, L = w - x, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, p ? this._fillTexture_v(t, E, A, d, t.height - _ - v, i, _ + n, a - _ - v) : this._inner_drawTexture(t, E, i, _ + n, d, a - _ - v, R, A, 1, !1)), 
                    f && (M = S - T, I = b + g, P = S, L = w - x, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, p ? this._fillTexture_v(t, E, A, f, t.height - _ - v, r - f + i, _ + n, a - _ - v) : this._inner_drawTexture(t, E, r - f + i, _ + n, f, a - _ - v, R, A, 1, !1)), 
                    M = C + m, I = b + g, P = S - T, L = w - x, A[0] = M, A[1] = I, A[2] = P, A[3] = I, 
                    A[4] = P, A[5] = L, A[6] = M, A[7] = L, p) {
                        var D = e.tmpUVRect;
                        D[0] = M, D[1] = I, D[2] = P - M, D[3] = L - I, this._fillTexture(t, t.width - d - f, t.height - _ - v, D, d + i, _ + n, r - d - f, a - _ - v, "repeat", 0, 0);
                    } else this._inner_drawTexture(t, E, d + i, _ + n, r - d - f, a - _ - v, R, A, 1, !1);
                    y && this.restore();
                }
            }
        }, {
            key: "lineJoin",
            get: function() {
                return "";
            },
            set: function(t) {}
        }, {
            key: "lineCap",
            get: function() {
                return "";
            },
            set: function(t) {}
        }, {
            key: "miterLimit",
            get: function() {
                return "";
            },
            set: function(t) {}
        }, {
            key: "asBitmap",
            set: function(e) {
                if (e) {
                    var i = this._targets;
                    if (!this._width || !this._height) throw Error("asBitmap no size!");
                    i && i.width == this._width && i.height == this._height || (i && i.destroy(), this._targets = new K(this._width, this._height, t.RenderTextureFormat.R8G8B8A8, -1));
                } else this._targets && this._targets.destroy(), this._targets = null;
            }
        }, {
            key: "fillStyle",
            set: function(t) {
                this._shader2D.fillStyle.equal(t) || (kt.save(this, kt.TYPE_FILESTYLE, this._shader2D, !1), 
                this._shader2D.fillStyle = gt.create(t), this._submitKey.other = -this._shader2D.fillStyle.toInt());
            },
            get: function() {
                return this._shader2D.fillStyle;
            }
        }, {
            key: "globalAlpha",
            set: function(t) {
                (t = Math.floor(1e3 * t) / 1e3) != this._shader2D.ALPHA && (kt.save(this, kt.TYPE_ALPHA, this._shader2D, !1), 
                this._shader2D.ALPHA = t);
            },
            get: function() {
                return this._shader2D.ALPHA;
            }
        }, {
            key: "textAlign",
            set: function(t) {
                this._other.textAlign === t || (this._other = this._other.make(), kt.save(this, kt.TYPE_TEXTALIGN, this._other, !1), 
                this._other.textAlign = t);
            },
            get: function() {
                return this._other.textAlign;
            }
        }, {
            key: "textBaseline",
            set: function(t) {
                this._other.textBaseline === t || (this._other = this._other.make(), kt.save(this, kt.TYPE_TEXTBASELINE, this._other, !1), 
                this._other.textBaseline = t);
            },
            get: function() {
                return this._other.textBaseline;
            }
        }, {
            key: "globalCompositeOperation",
            set: function(t) {
                var e = q.TOINT[t];
                null == e || this._nBlendType === e || (kt.save(this, kt.TYPE_GLOBALCOMPOSITEOPERATION, this, !0), 
                this._curSubmit = xt.RENDERBASE, this._nBlendType = e);
            },
            get: function() {
                return q.NAMES[this._nBlendType];
            }
        }, {
            key: "strokeStyle",
            set: function(t) {
                this._shader2D.strokeStyle.equal(t) || (kt.save(this, kt.TYPE_STROKESTYLE, this._shader2D, !1), 
                this._shader2D.strokeStyle = gt.create(t), this._submitKey.other = -this._shader2D.strokeStyle.toInt());
            },
            get: function() {
                return this._shader2D.strokeStyle;
            }
        }, {
            key: "lineWidth",
            set: function(t) {
                this._other.lineWidth === t || (this._other = this._other.make(), kt.save(this, kt.TYPE_LINEWIDTH, this._other, !1), 
                this._other.lineWidth = t);
            },
            get: function() {
                return this._other.lineWidth;
            }
        }, {
            key: "font",
            set: function(t) {
                this._other = this._other.make(), kt.save(this, kt.TYPE_FONT, this._other, !1);
            }
        }, {
            key: "canvas",
            get: function() {
                return this._canvas;
            }
        } ], [ {
            key: "__init__",
            value: function() {
                e.MAXCLIPRECT = new R(0, 0, e._MAXSIZE, e._MAXSIZE), ue.DEFAULT = new ue();
            }
        }, {
            key: "set2DRenderConfig",
            value: function() {
                var t = A.instance;
                L.setBlend(t, !0), L.setBlendEquation(t, t.FUNC_ADD), q.activeBlendFunction = null, 
                L.setBlendFunc(t, t.ONE, t.ONE_MINUS_SRC_ALPHA), L.setDepthTest(t, !1), L.setCullFace(t, !1), 
                L.setDepthMask(t, !0), L.setFrontFace(t, t.CCW), t.viewport(0, 0, z.width, z.height);
            }
        } ]), e;
    }();
    he.ENUM_TEXTALIGN_DEFAULT = 0, he.ENUM_TEXTALIGN_CENTER = 1, he.ENUM_TEXTALIGN_RIGHT = 2, 
    he._SUBMITVBSIZE = 32e3, he._MAXSIZE = 99999999, he._MAXVERTNUM = 65535, he.MAXCLIPRECT = null, 
    he._COUNT = 0, he.SEGNUM = 32, he._contextcount = 0, he.PI2 = 2 * Math.PI, he._textRender = null, 
    he.tmpuv1 = [ 0, 0, 0, 0, 0, 0, 0, 0 ], he.tmpUV = [ 0, 0, 0, 0, 0, 0, 0, 0 ], he.tmpUVRect = [ 0, 0, 0, 0 ];
    var ue = function() {
        function t() {
            (0, o.default)(this, t), this.lineWidth = 1;
        }
        return (0, s.default)(t, [ {
            key: "clear",
            value: function() {
                this.lineWidth = 1, this.textAlign = this.textBaseline = null;
            }
        }, {
            key: "make",
            value: function() {
                return this === t.DEFAULT ? new t() : this;
            }
        } ]), t;
    }(), ce = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "_uint8ArraySlice",
            value: function() {
                for (var t = this.length, e = new Uint8Array(this.length), i = 0; i < t; i++) e[i] = this[i];
                return e;
            }
        }, {
            key: "_float32ArraySlice",
            value: function() {
                for (var t = this.length, e = new Float32Array(this.length), i = 0; i < t; i++) e[i] = this[i];
                return e;
            }
        }, {
            key: "_uint16ArraySlice",
            value: function() {
                var t, e, i;
                if (0 === arguments.length) for (t = this.length, e = new Uint16Array(t), i = 0; i < t; i++) e[i] = this[i]; else if (2 === arguments.length) {
                    var n = arguments.length <= 0 ? void 0 : arguments[0], r = arguments.length <= 1 ? void 0 : arguments[1];
                    if (r > n) for (t = r - n, e = new Uint16Array(t), i = n; i < r; i++) e[i - n] = this[i]; else e = new Uint16Array(0);
                }
                return e;
            }
        }, {
            key: "_nativeRender_enable",
            value: function() {}
        }, {
            key: "enable",
            value: function() {
                return !0;
            }
        }, {
            key: "inner_enable",
            value: function() {
                return Float32Array.prototype.slice || (Float32Array.prototype.slice = t._float32ArraySlice), 
                Uint16Array.prototype.slice || (Uint16Array.prototype.slice = t._uint16ArraySlice), 
                Uint8Array.prototype.slice || (Uint8Array.prototype.slice = t._uint8ArraySlice), 
                !0;
            }
        }, {
            key: "onStageResize",
            value: function(t, e) {
                null != L.mainContext && (L.mainContext.viewport(0, 0, t, e), z.width = t, z.height = e);
            }
        } ]), t;
    }();
    ce._isWebGL2 = !1, ce.isNativeRender_enable = !1, function() {
        var t = {};
        function e(e, i) {
            var n;
            t[e] = !0, void 0 !== i && (n = i, window.console && window.console.error && window.console.error(n));
        }
        var i = function t(e) {
            var i = e.gl;
            this.ext = e, this.isAlive = !0, this.hasBeenBound = !1, this.elementArrayBuffer = null, 
            this.attribs = new Array(e.maxVertexAttribs);
            for (var n = 0; n < this.attribs.length; n++) {
                var r = new t.VertexAttrib(i);
                this.attribs[n] = r;
            }
            this.maxAttrib = 0;
        };
        (i.VertexAttrib = function(t) {
            this.enabled = !1, this.buffer = null, this.size = 4, this.type = t.FLOAT, this.normalized = !1, 
            this.stride = 16, this.offset = 0, this.cached = "", this.recache();
        }).prototype.recache = function() {
            this.cached = [ this.size, this.type, this.normalized, this.stride, this.offset ].join(":");
        };
        var n = function(e) {
            var i = this;
            this.gl = e, function(e) {
                var i = e.getError;
                e.getError = function() {
                    var n;
                    do {
                        (n = i.apply(e)) != e.NO_ERROR && (t[n] = !0);
                    } while (n != e.NO_ERROR);
                    for (var r in t) if (t[r]) return delete t[r], parseInt(r);
                    return e.NO_ERROR;
                };
            }(e);
            var n = this.original = {
                getParameter: e.getParameter,
                enableVertexAttribArray: e.enableVertexAttribArray,
                disableVertexAttribArray: e.disableVertexAttribArray,
                bindBuffer: e.bindBuffer,
                getVertexAttrib: e.getVertexAttrib,
                vertexAttribPointer: e.vertexAttribPointer
            };
            e.getParameter = function(t) {
                return t == i.VERTEX_ARRAY_BINDING_OES ? i.currentVertexArrayObject == i.defaultVertexArrayObject ? null : i.currentVertexArrayObject : n.getParameter.apply(this, arguments);
            }, e.enableVertexAttribArray = function(t) {
                var e = i.currentVertexArrayObject;
                e.maxAttrib = Math.max(e.maxAttrib, t);
                var r = e.attribs[t];
                return r.enabled = !0, n.enableVertexAttribArray.apply(this, arguments);
            }, e.disableVertexAttribArray = function(t) {
                var e = i.currentVertexArrayObject;
                e.maxAttrib = Math.max(e.maxAttrib, t);
                var r = e.attribs[t];
                return r.enabled = !1, n.disableVertexAttribArray.apply(this, arguments);
            }, e.bindBuffer = function(t, r) {
                switch (t) {
                  case e.ARRAY_BUFFER:
                    i.currentArrayBuffer = r;
                    break;

                  case e.ELEMENT_ARRAY_BUFFER:
                    i.currentVertexArrayObject.elementArrayBuffer = r;
                }
                return n.bindBuffer.apply(this, arguments);
            }, e.getVertexAttrib = function(t, r) {
                var a = i.currentVertexArrayObject, s = a.attribs[t];
                switch (r) {
                  case e.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:
                    return s.buffer;

                  case e.VERTEX_ATTRIB_ARRAY_ENABLED:
                    return s.enabled;

                  case e.VERTEX_ATTRIB_ARRAY_SIZE:
                    return s.size;

                  case e.VERTEX_ATTRIB_ARRAY_STRIDE:
                    return s.stride;

                  case e.VERTEX_ATTRIB_ARRAY_TYPE:
                    return s.type;

                  case e.VERTEX_ATTRIB_ARRAY_NORMALIZED:
                    return s.normalized;

                  default:
                    return n.getVertexAttrib.apply(this, arguments);
                }
            }, e.vertexAttribPointer = function(t, e, r, a, s, o) {
                var l = i.currentVertexArrayObject;
                l.maxAttrib = Math.max(l.maxAttrib, t);
                var h = l.attribs[t];
                return h.buffer = i.currentArrayBuffer, h.size = e, h.type = r, h.normalized = a, 
                h.stride = s, h.offset = o, h.recache(), n.vertexAttribPointer.apply(this, arguments);
            }, e.instrumentExtension && e.instrumentExtension(this, "OES_vertex_array_object"), 
            e.canvas.addEventListener("webglcontextrestored", function() {
                window.console && window.console.log && window.console.log("OESVertexArrayObject emulation library context restored"), 
                i.reset_();
            }, !0), this.reset_();
        };
        n.prototype.VERTEX_ARRAY_BINDING_OES = 34229, n.prototype.reset_ = function() {
            if (void 0 !== this.vertexArrayObjects) for (var t = 0; t < this.vertexArrayObjects.length; ++t) this.vertexArrayObjects.isAlive = !1;
            var e = this.gl;
            this.maxVertexAttribs = e.getParameter(e.MAX_VERTEX_ATTRIBS), this.defaultVertexArrayObject = new i(this), 
            this.currentVertexArrayObject = null, this.currentArrayBuffer = null, this.vertexArrayObjects = [ this.defaultVertexArrayObject ], 
            this.bindVertexArrayOES(null);
        }, n.prototype.createVertexArrayOES = function() {
            var t = new i(this);
            return this.vertexArrayObjects.push(t), t;
        }, n.prototype.deleteVertexArrayOES = function(t) {
            t.isAlive = !1, this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(t), 1), 
            this.currentVertexArrayObject == t && this.bindVertexArrayOES(null);
        }, n.prototype.isVertexArrayOES = function(t) {
            return !!(t && t instanceof i && t.hasBeenBound && t.ext == this);
        }, n.prototype.bindVertexArrayOES = function(t) {
            var i = this.gl;
            if (!t || t.isAlive) {
                var n = this.original, r = this.currentVertexArrayObject;
                this.currentVertexArrayObject = t || this.defaultVertexArrayObject, this.currentVertexArrayObject.hasBeenBound = !0;
                var a = this.currentVertexArrayObject;
                if (r != a) {
                    r && a.elementArrayBuffer == r.elementArrayBuffer || n.bindBuffer.call(i, i.ELEMENT_ARRAY_BUFFER, a.elementArrayBuffer);
                    for (var s = this.currentArrayBuffer, o = Math.max(r ? r.maxAttrib : 0, a.maxAttrib), l = 0; l <= o; l++) {
                        var h = a.attribs[l], u = r ? r.attribs[l] : null;
                        if (r && h.enabled == u.enabled || (h.enabled ? n.enableVertexAttribArray.call(i, l) : n.disableVertexAttribArray.call(i, l)), 
                        h.enabled) {
                            var c = !1;
                            r && h.buffer == u.buffer || (s != h.buffer && (n.bindBuffer.call(i, i.ARRAY_BUFFER, h.buffer), 
                            s = h.buffer), c = !0), (c || h.cached != u.cached) && n.vertexAttribPointer.call(i, l, h.size, h.type, h.normalized, h.stride, h.offset);
                        }
                    }
                    this.currentArrayBuffer != s && n.bindBuffer.call(i, i.ARRAY_BUFFER, this.currentArrayBuffer);
                }
            } else e(i.INVALID_OPERATION, "bindVertexArrayOES: attempt to bind deleted arrayObject");
        }, window._setupVertexArrayObject = function(t) {
            var e = t.getSupportedExtensions;
            t.getSupportedExtensions = function() {
                var t = e.call(this) || [];
                return t.indexOf("OES_vertex_array_object") < 0 && t.push("OES_vertex_array_object"), 
                t;
            };
            var i = t.getExtension;
            t.getExtension = function(t) {
                return i.call(this, t) || ("OES_vertex_array_object" !== t ? null : (this.__OESVertexArrayObject || (console.log("Setup OES_vertex_array_object polyfill"), 
                this.__OESVertexArrayObject = new n(this)), this.__OESVertexArrayObject));
            };
        };
    }();
    var _e = function() {
        function t(e, i) {
            (0, o.default)(this, t), this._gl = null, this._vaoExt = null, this._angleInstancedArrays = null, 
            this._isWebGL2 = !1, this._oesTextureHalfFloat = null, this._oes_element_index_uint = null, 
            this._oesTextureHalfFloatLinear = null, this._oesTextureFloat = null, this._extShaderTextureLod = null, 
            this._extTextureFilterAnisotropic = null, this._compressedTextureS3tc = null, this._compressedTexturePvrtc = null, 
            this._compressedTextureEtc1 = null, this._compressedTextureETC = null, this._compressedTextureASTC = null, 
            this._webgl_depth_texture = null, this._extColorBufferFloat = null, this._gl = e, 
            this._isWebGL2 = i;
            var n = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS), r = e.getParameter(e.MAX_TEXTURE_SIZE);
            i ? (this._extColorBufferFloat = this._getExtension("EXT_color_buffer_float"), Y._shaderCapailityLevel = 35) : (u.Render.isConchApp || window._setupVertexArrayObject && window._setupVertexArrayObject(e), 
            this._vaoExt = this._getExtension("OES_vertex_array_object"), this._angleInstancedArrays = this._getExtension("ANGLE_instanced_arrays"), 
            this._oesTextureHalfFloat = this._getExtension("OES_texture_half_float"), this._oesTextureHalfFloatLinear = this._getExtension("OES_texture_half_float_linear"), 
            this._oesTextureFloat = this._getExtension("OES_texture_float"), this._oes_element_index_uint = this._getExtension("OES_element_index_uint"), 
            this._extShaderTextureLod = this._getExtension("EXT_shader_texture_lod"), this._webgl_depth_texture = this._getExtension("WEBGL_depth_texture"), 
            Y._shaderCapailityLevel = 30), this._extTextureFilterAnisotropic = this._getExtension("EXT_texture_filter_anisotropic"), 
            this._compressedTextureS3tc = this._getExtension("WEBGL_compressed_texture_s3tc"), 
            this._compressedTexturePvrtc = this._getExtension("WEBGL_compressed_texture_pvrtc"), 
            this._compressedTextureEtc1 = this._getExtension("WEBGL_compressed_texture_etc1"), 
            this._compressedTextureETC = this._getExtension("WEBGL_compressed_texture_etc"), 
            this._compressedTextureASTC = this._getExtension("WEBGL_compressed_texture_astc"), 
            Y._maxTextureCount = n, Y._maxTextureSize = r;
        }
        return (0, s.default)(t, [ {
            key: "_getExtension",
            value: function(e) {
                var i = t._extentionVendorPrefixes;
                for (var n in i) {
                    var r = this._gl.getExtension(i[n] + e);
                    if (r) return r;
                }
                return null;
            }
        }, {
            key: "createVertexArray",
            value: function() {
                return this._isWebGL2 ? this._gl.createVertexArray() : this._vaoExt.createVertexArrayOES();
            }
        }, {
            key: "bindVertexArray",
            value: function(t) {
                this._isWebGL2 ? this._gl.bindVertexArray(t) : this._vaoExt.bindVertexArrayOES(t);
            }
        }, {
            key: "deleteVertexArray",
            value: function(t) {
                this._isWebGL2 ? this._gl.deleteVertexArray(t) : this._vaoExt.deleteVertexArrayOES(t);
            }
        }, {
            key: "isVertexArray",
            value: function(t) {
                this._isWebGL2 ? this._gl.isVertexArray(t) : this._vaoExt.isVertexArrayOES(t);
            }
        }, {
            key: "drawElementsInstanced",
            value: function(t, e, i, n, r) {
                this._isWebGL2 ? this._gl.drawElementsInstanced(t, e, i, n, r) : this._angleInstancedArrays.drawElementsInstancedANGLE(t, e, i, n, r);
            }
        }, {
            key: "drawArraysInstanced",
            value: function(t, e, i, n) {
                this._isWebGL2 ? this._gl.drawArraysInstanced(t, e, i, n) : this._angleInstancedArrays.drawArraysInstancedANGLE(t, e, i, n);
            }
        }, {
            key: "vertexAttribDivisor",
            value: function(t, e) {
                this._isWebGL2 ? this._gl.vertexAttribDivisor(t, e) : this._angleInstancedArrays.vertexAttribDivisorANGLE(t, e);
            }
        }, {
            key: "supportInstance",
            value: function() {
                return !(!this._isWebGL2 && !this._angleInstancedArrays || !h.allowGPUInstanceDynamicBatch);
            }
        }, {
            key: "supportElementIndexUint32",
            value: function() {
                return !(!this._isWebGL2 && !this._oes_element_index_uint);
            }
        } ]), t;
    }();
    _e._extentionVendorPrefixes = [ "", "WEBKIT_", "MOZ_" ];
    var de = function() {
        function t(e, i, n) {
            (0, o.default)(this, t), this._timeId = 0, t._mainCanvas = n;
            var r = t._mainCanvas.source;
            r.id = "layaCanvas", r.width = e, r.height = i, t.isConchApp && document.body.appendChild(r), 
            this.initRender(t._mainCanvas, e, i), window.requestAnimationFrame(function t(e) {
                u.stage._loop(), window.requestAnimationFrame(t);
            }), u.stage.on("visibilitychange", this, this._onVisibilitychange);
        }
        return (0, s.default)(t, [ {
            key: "_onVisibilitychange",
            value: function() {
                u.stage.isVisibility ? 0 != this._timeId && window.clearInterval(this._timeId) : this._timeId = window.setInterval(this._enterFrame, 1e3);
            }
        }, {
            key: "initRender",
            value: function(e, i, n) {
                var r = A.instance = L.mainContext = function(t) {
                    var e, i = [ "webgl2", "webgl", "experimental-webgl", "webkit-3d", "moz-webgl" ];
                    h.useWebGL2 && !ae.onBDMiniGame || i.shift();
                    for (var n = 0; n < i.length; n++) {
                        try {
                            e = t.getContext(i[n], {
                                stencil: h.isStencil,
                                alpha: h.isAlpha,
                                antialias: h.isAntialias,
                                premultipliedAlpha: h.premultipliedAlpha,
                                preserveDrawingBuffer: h.preserveDrawingBuffer
                            });
                        } catch (t) {}
                        if (e) return "webgl2" === i[n] && (ce._isWebGL2 = !0), e;
                    }
                    return null;
                }(t._mainCanvas.source);
                if (h.printWebglOrder && this._replaceWebglcall(r), !r) return !1;
                A.instance = r, A.layaGPUInstance = new _e(r, ce._isWebGL2), e.size(i, n), he.__init__(), 
                xt.__init__();
                var a = new he();
                return a.isMain = !0, t._context = a, e._setContext(a), Q.__init__(), it.__init__(), 
                Ut.__init__(), It.__int__(r), q._init_(r), !0;
            }
        }, {
            key: "_replaceWebglcall",
            value: function(t) {
                var e = {}, i = function(i) {
                    "function" == typeof t[i] && "getError" != i && "__SPECTOR_Origin_getError" != i && "__proto__" != i && (e[i] = t[i], 
                    t[i] = function() {
                        for (var n = [], r = 0; r < arguments.length; r++) n.push(arguments[r]);
                        var a = e[i].apply(t, n);
                        console.log(Mt.loopCount + ":gl." + i + ":" + n);
                        var s = t.getError();
                        return s && console.log(s), a;
                    });
                };
                for (var n in t) i(n);
            }
        }, {
            key: "_enterFrame",
            value: function() {
                u.stage._loop();
            }
        } ], [ {
            key: "context",
            get: function() {
                return t._context;
            }
        }, {
            key: "canvas",
            get: function() {
                return t._mainCanvas.source;
            }
        } ]), t;
    }();
    de.supportWebGLPlusAnimation = !1, de.supportWebGLPlusRendering = !1, de.isConchApp = !1, 
    de.isConchApp = null != window.conch, (de.isConchApp || null != window.qq && null != window.qq.webglPlus) && (de.supportWebGLPlusRendering = !1);
    var fe = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture = null, this.vertices = null, this.uvs = null, this.indices = null, 
                this.matrix = null, c.recover("DrawTrianglesCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.drawTriangles(this.texture, this.x + e, this.y + i, this.vertices, this.uvs, this.indices, this.matrix, this.alpha, this.color, this.blendMode, this.colorNum);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l, h, u, _) {
                var d = c.getItemByClass("DrawTrianglesCmd", t);
                if (d.texture = e, d.x = i, d.y = n, d.vertices = r, d.uvs = a, d.indices = s, d.matrix = o, 
                d.alpha = l, h) {
                    d.color = new lt();
                    var f = ot.create(h).arrColor;
                    d.color.color(255 * f[0], 255 * f[1], 255 * f[2], 255 * f[3]);
                }
                return d.blendMode = u, d.colorNum = _, d;
            }
        } ]), t;
    }();
    fe.ID = "DrawTriangles";
    var ve = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture._removeReference(), c.recover("Draw9GridTexture", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.drawTextureWithSizeGrid(this.texture, this.x, this.y, this.width, this.height, this.sizeGrid, e, i);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s) {
                var o = c.getItemByClass("Draw9GridTexture", t);
                return o.texture = e, e._addReference(), o.x = i, o.y = n, o.width = r, o.height = a, 
                o.sizeGrid = s, o;
            }
        } ]), t;
    }();
    ve.ID = "Draw9GridTexture";
    var pe = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("SaveCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.save();
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("SaveCmd", t);
            }
        } ]), t;
    }();
    pe.ID = "Save";
    var ye = function() {
        function t() {
            (0, o.default)(this, t), this._cacheBoundsType = !1;
        }
        return (0, s.default)(t, [ {
            key: "destroy",
            value: function() {
                this._graphics = null, this._cacheBoundsType = !1, this._temp && (this._temp.length = 0), 
                this._rstBoundPoints && (this._rstBoundPoints.length = 0), this._bounds && this._bounds.recover(), 
                this._bounds = null, c.recover("GraphicsBounds", this);
            }
        }, {
            key: "reset",
            value: function() {
                this._temp && (this._temp.length = 0);
            }
        }, {
            key: "getBounds",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return (!this._bounds || !this._temp || this._temp.length < 1 || t != this._cacheBoundsType) && (this._bounds = R._getWrapRec(this.getBoundPoints(t), this._bounds)), 
                this._cacheBoundsType = t, this._bounds;
            }
        }, {
            key: "getBoundPoints",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return (!this._temp || this._temp.length < 1 || t != this._cacheBoundsType) && (this._temp = this._getCmdPoints(t)), 
                this._cacheBoundsType = t, this._rstBoundPoints = st.copyArray(this._rstBoundPoints, this._temp);
            }
        }, {
            key: "_getCmdPoints",
            value: function() {
                var e, i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], n = this._graphics.cmds;
                if ((e = this._temp || (this._temp = [])).length = 0, n || null == this._graphics._one || (t._tempCmds.length = 0, 
                t._tempCmds.push(this._graphics._one), n = t._tempCmds), !n) return e;
                var r = t._tempMatrixArrays;
                r.length = 0;
                var a = t._initMatrix;
                a.identity();
                for (var s, o, l = t._tempMatrix, h = 0, u = n.length; h < u; h++) switch ((s = n[h]).cmdID) {
                  case _.ID:
                  case pe.ID:
                    r.push(a), a = a.clone();
                    break;

                  case ct.ID:
                    a = r.pop();
                    break;

                  case dt.ID:
                    l.identity(), l.translate(-s.pivotX, -s.pivotY), l.scale(s.scaleX, s.scaleY), l.translate(s.pivotX, s.pivotY), 
                    this._switchMatrix(a, l);
                    break;

                  case _t.ID:
                    l.identity(), l.translate(-s.pivotX, -s.pivotY), l.rotate(s.angle), l.translate(s.pivotX, s.pivotY), 
                    this._switchMatrix(a, l);
                    break;

                  case vt.ID:
                    l.identity(), l.translate(s.tx, s.ty), this._switchMatrix(a, l);
                    break;

                  case ft.ID:
                    l.identity(), l.translate(-s.pivotX, -s.pivotY), l.concat(s.matrix), l.translate(s.pivotX, s.pivotY), 
                    this._switchMatrix(a, l);
                    break;

                  case v.ID:
                  case ut.ID:
                    t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), a);
                    break;

                  case ht.ID:
                    a.copyTo(l), s.matrix && l.concat(s.matrix), t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), l);
                    break;

                  case v.ID:
                    if (o = s.texture, i) s.width && s.height ? t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), a) : t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, o.width, o.height), a); else {
                        var c = (s.width || o.sourceWidth) / o.width, k = (s.height || o.sourceHeight) / o.height, E = c * o.sourceWidth, A = k * o.sourceHeight, C = o.offsetX > 0 ? o.offsetX : 0, b = o.offsetY > 0 ? o.offsetY : 0;
                        C *= c, b *= k, t._addPointArrToRst(e, R._getBoundPointS(s.x - C, s.y - b, E, A), a);
                    }
                    break;

                  case ut.ID:
                    s.width && s.height ? t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), a) : (o = s.texture, 
                    t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, o.width, o.height), a));
                    break;

                  case ht.ID:
                    var S;
                    s.matrix ? (a.copyTo(l), l.concat(s.matrix), S = l) : S = a, i ? s.width && s.height ? t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), S) : (o = s.texture, 
                    t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, o.width, o.height), S)) : (o = s.texture, 
                    c = (s.width || o.sourceWidth) / o.width, k = (s.height || o.sourceHeight) / o.height, 
                    E = c * o.sourceWidth, A = k * o.sourceHeight, C = o.offsetX > 0 ? o.offsetX : 0, 
                    b = o.offsetY > 0 ? o.offsetY : 0, C *= c, b *= k, t._addPointArrToRst(e, R._getBoundPointS(s.x - C, s.y - b, E, A), S));
                    break;

                  case x.ID:
                    t._addPointArrToRst(e, R._getBoundPointS(s.x, s.y, s.width, s.height), a);
                    break;

                  case d.ID:
                    t._addPointArrToRst(e, R._getBoundPointS(s.x - s.radius, s.y - s.radius, s.radius + s.radius, s.radius + s.radius), a);
                    break;

                  case p.ID:
                    var w;
                    t._tempPoints.length = 0, w = .5 * s.lineWidth, s.fromX == s.toX ? t._tempPoints.push(s.fromX + w, s.fromY, s.toX + w, s.toY, s.fromX - w, s.fromY, s.toX - w, s.toY) : s.fromY == s.toY ? t._tempPoints.push(s.fromX, s.fromY + w, s.toX, s.toY + w, s.fromX, s.fromY - w, s.toX, s.toY - w) : t._tempPoints.push(s.fromX, s.fromY, s.toX, s.toY), 
                    t._addPointArrToRst(e, t._tempPoints, a);
                    break;

                  case f.ID:
                    t._addPointArrToRst(e, pt.I.getBezierPoints(s.points), a, s.x, s.y);
                    break;

                  case y.ID:
                  case T.ID:
                    t._addPointArrToRst(e, s.points, a, s.x, s.y);
                    break;

                  case g.ID:
                    t._addPointArrToRst(e, this._getPathPoints(s.paths), a, s.x, s.y);
                    break;

                  case m.ID:
                    t._addPointArrToRst(e, this._getPiePoints(s.x, s.y, s.radius, s.startAngle, s.endAngle), a);
                    break;

                  case fe.ID:
                    t._addPointArrToRst(e, this._getTriAngBBXPoints(s.vertices), a);
                    break;

                  case ve.ID:
                    t._addPointArrToRst(e, this._getDraw9GridBBXPoints(s), a);
                }
                return e.length > 200 ? e = st.copyArray(e, R._getWrapRec(e)._getBoundPoints()) : e.length > 8 && (e = yt.scanPList(e)), 
                e;
            }
        }, {
            key: "_switchMatrix",
            value: function(t, e) {
                e.concat(t), e.copyTo(t);
            }
        }, {
            key: "_getPiePoints",
            value: function(e, i, n, r, a) {
                var s = t._tempPoints;
                t._tempPoints.length = 0;
                var o = Math.PI / 180, l = a - r;
                if (l >= 360 || l <= -360) return s.push(e - n, i - n), s.push(e + n, i - n), s.push(e + n, i + n), 
                s.push(e - n, i + n), s;
                s.push(e, i);
                var h = l % 360;
                h < 0 && (h += 360);
                var u = r + h, c = r * o, _ = u * o;
                s.push(e + n * Math.cos(c), i + n * Math.sin(c)), s.push(e + n * Math.cos(_), i + n * Math.sin(_));
                for (var d = 90 * Math.ceil(r / 90), f = 90 * Math.floor(u / 90), v = d; v <= f; v += 90) {
                    var p = v * o;
                    s.push(e + n * Math.cos(p), i + n * Math.sin(p));
                }
                return s;
            }
        }, {
            key: "_getTriAngBBXPoints",
            value: function(t) {
                var e = t.length;
                if (e < 2) return [];
                for (var i = t[0], n = t[1], r = i, a = n, s = 2; s < e; ) {
                    var o = t[s++], l = t[s++];
                    i > o && (i = o), n > l && (n = l), r < o && (r = o), a < l && (a = l);
                }
                return [ i, n, r, n, r, a, i, a ];
            }
        }, {
            key: "_getDraw9GridBBXPoints",
            value: function(t) {
                var e = t.width, i = t.height;
                return [ 0, 0, e, 0, e, i, 0, i ];
            }
        }, {
            key: "_getPathPoints",
            value: function(e) {
                var i, n, r, a = t._tempPoints;
                for (a.length = 0, n = e.length, i = 0; i < n; i++) (r = e[i]).length > 1 && (a.push(r[1], r[2]), 
                r.length > 3 && a.push(r[3], r[4]));
                return a;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("GraphicsBounds", t);
            }
        }, {
            key: "_addPointArrToRst",
            value: function(e, i, n) {
                var r, a, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                for (a = i.length, r = 0; r < a; r += 2) t._addPointToRst(e, i[r] + s, i[r + 1] + o, n);
            }
        }, {
            key: "_addPointToRst",
            value: function(t, e, i, n) {
                var r = E.TEMP;
                r.setTo(e || 0, i || 0), n.transformPoint(r), t.push(r.x, r.y);
            }
        } ]), t;
    }();
    ye._tempMatrix = new k(), ye._initMatrix = new k(), ye._tempPoints = [], ye._tempMatrixArrays = [], 
    ye._tempCmds = [];
    var ge = function t() {
        (0, o.default)(this, t);
    };
    ge.ALPHA = 1, ge.TRANSFORM = 2, ge.BLEND = 4, ge.CANVAS = 8, ge.FILTERS = 16, ge.MASK = 32, 
    ge.CLIP = 64, ge.STYLE = 128, ge.TEXTURE = 256, ge.GRAPHICS = 512, ge.LAYAGL3D = 1024, 
    ge.CUSTOM = 2048, ge.ONECHILD = 4096, ge.CHILDS = 8192, ge.REPAINT_NONE = 0, ge.REPAINT_NODE = 1, 
    ge.REPAINT_CACHE = 2, ge.REPAINT_ALL = 3;
    var me = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("ClipRectCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.clipRect(this.x + e, this.y + i, this.width, this.height);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r) {
                var a = c.getItemByClass("ClipRectCmd", t);
                return a.x = e, a.y = i, a.width = n, a.height = r, a;
            }
        } ]), t;
    }();
    me.ID = "ClipRect";
    var Te = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this.texture._removeReference(), this.texture = null, this.pos = null, c.recover("DrawTexturesCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.drawTextures(this.texture, this.pos, e, i);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e, i) {
                var n = c.getItemByClass("DrawTexturesCmd", t);
                return n.texture = e, e._addReference(), n.pos = i, n;
            }
        } ]), t;
    }();
    Te.ID = "DrawTextures";
    var xe = function() {
        function t() {
            (0, o.default)(this, t), this._textIsWorldText = !1, this._fontColor = 4294967295, 
            this._strokeColor = 0, this._fontObj = t._defFontObj, this._nTexAlign = 0;
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                c.recover("FillTextCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                u.stage.isGlobalRepaint() && this._textIsWorldText && this._text.cleanCache(), this._words ? he._textRender.fillWords(t, this._words, this.x + e, this.y + i, this._fontObj, this._color, this._borderColor, this._lineWidth) : this._textIsWorldText ? t._fast_filltext(this._text, this.x + e, this.y + i, this._fontObj, this._color, this._borderColor, this._lineWidth, this._nTexAlign, 0) : he._textRender.filltext(t, this._text, this.x + e, this.y + i, this.font, this.color, this._borderColor, this._lineWidth, this._textAlign);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        }, {
            key: "text",
            get: function() {
                return this._text;
            },
            set: function(t) {
                this._text = t, this._textIsWorldText = t instanceof ie, this._textIsWorldText && this._text.cleanCache();
            }
        }, {
            key: "font",
            get: function() {
                return this._font;
            },
            set: function(t) {
                this._font = t, this._fontObj = ee.Parse(t), this._textIsWorldText && this._text.cleanCache();
            }
        }, {
            key: "color",
            get: function() {
                return this._color;
            },
            set: function(t) {
                this._color = t, this._fontColor = ot.create(t).numColor, this._textIsWorldText && this._text.cleanCache();
            }
        }, {
            key: "textAlign",
            get: function() {
                return this._textAlign;
            },
            set: function(t) {
                switch (this._textAlign = t, t) {
                  case "center":
                    this._nTexAlign = u.Context.ENUM_TEXTALIGN_CENTER;
                    break;

                  case "right":
                    this._nTexAlign = u.Context.ENUM_TEXTALIGN_RIGHT;
                    break;

                  default:
                    this._nTexAlign = u.Context.ENUM_TEXTALIGN_DEFAULT;
                }
                this._textIsWorldText && this._text.cleanCache();
            }
        } ], [ {
            key: "create",
            value: function(e, i, n, r, a, s, o, l, h) {
                var u = c.getItemByClass("FillTextCmd", t);
                return u.text = e, u._textIsWorldText = e instanceof ie, u._words = i, u.x = n, 
                u.y = r, u.font = a, u.color = s, u.textAlign = o, u._lineWidth = l, u._borderColor = h, 
                u;
            }
        } ]), t;
    }();
    xe.ID = "FillText", xe._defFontObj = new ee(null);
    var ke = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "regCacheByFunction",
            value: function(e, i) {
                var n;
                t.unRegCacheByFunction(e, i), n = {
                    tryDispose: e,
                    getCacheList: i
                }, t._cacheList.push(n);
            }
        }, {
            key: "unRegCacheByFunction",
            value: function(e, i) {
                var n, r;
                for (r = t._cacheList.length, n = 0; n < r; n++) if (t._cacheList[n].tryDispose == e && t._cacheList[n].getCacheList == i) return void t._cacheList.splice(n, 1);
            }
        }, {
            key: "forceDispose",
            value: function() {
                var e, i = t._cacheList.length;
                for (e = 0; e < i; e++) t._cacheList[e].tryDispose(!0);
            }
        }, {
            key: "beginCheck",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 15e3;
                u.systemTimer.loop(e, null, t._checkLoop);
            }
        }, {
            key: "stopCheck",
            value: function() {
                u.systemTimer.clear(null, t._checkLoop);
            }
        }, {
            key: "_checkLoop",
            value: function() {
                var e = t._cacheList;
                if (!(e.length < 1)) {
                    var i, n, r = u.Browser.now();
                    for (n = i = e.length; i > 0 && (t._index++, t._index = t._index % n, e[t._index].tryDispose(!1), 
                    !(u.Browser.now() - r > t.loopTimeLimit)); ) i--;
                }
            }
        } ]), t;
    }();
    ke.loopTimeLimit = 2, ke._cacheList = [], ke._index = 0;
    var Ee = function() {
        function t() {
            (0, o.default)(this, t), this.useDic = {}, this.shapeDic = {}, this.shapeLineDic = {}, 
            this._id = 0, this._checkKey = !1, this._freeIdArray = [], ke.regCacheByFunction(this.startDispose.bind(this), this.getCacheList.bind(this));
        }
        return (0, s.default)(t, [ {
            key: "getId",
            value: function() {
                return this._id++;
            }
        }, {
            key: "addShape",
            value: function(t, e) {
                this.shapeDic[t] = e, this.useDic[t] || (this.useDic[t] = !0);
            }
        }, {
            key: "addLine",
            value: function(t, e) {
                this.shapeLineDic[t] = e, this.shapeLineDic[t] || (this.shapeLineDic[t] = !0);
            }
        }, {
            key: "getShape",
            value: function(t) {
                this._checkKey && null != this.useDic[t] && (this.useDic[t] = !0);
            }
        }, {
            key: "deleteShape",
            value: function(t) {
                this.shapeDic[t] && (this.shapeDic[t] = null, delete this.shapeDic[t]), this.shapeLineDic[t] && (this.shapeLineDic[t] = null, 
                delete this.shapeLineDic[t]), null != this.useDic[t] && delete this.useDic[t];
            }
        }, {
            key: "getCacheList",
            value: function() {
                var t, e = [];
                for (t in this.shapeDic) e.push(this.shapeDic[t]);
                for (t in this.shapeLineDic) e.push(this.shapeLineDic[t]);
                return e;
            }
        }, {
            key: "startDispose",
            value: function(t) {
                var e;
                for (e in this.useDic) this.useDic[e] = !1;
                this._checkKey = !0;
            }
        }, {
            key: "endDispose",
            value: function() {
                if (this._checkKey) {
                    var t;
                    for (t in this.useDic) this.useDic[t] || this.deleteShape(t);
                    this._checkKey = !1;
                }
            }
        } ], [ {
            key: "getInstance",
            value: function() {
                return t.instance = t.instance || new t();
            }
        } ]), t;
    }(), Re = function() {
        function t() {
            (0, o.default)(this, t), this._sp = null, this._one = null, this._render = this._renderEmpty, 
            this._cmds = null, this._vectorgraphArray = null, this._graphicBounds = null, this.autoDestroy = !1, 
            this._createData();
        }
        return (0, s.default)(t, [ {
            key: "_createData",
            value: function() {}
        }, {
            key: "_clearData",
            value: function() {}
        }, {
            key: "_destroyData",
            value: function() {}
        }, {
            key: "destroy",
            value: function() {
                this.clear(!0), this._graphicBounds && this._graphicBounds.destroy(), this._graphicBounds = null, 
                this._vectorgraphArray = null, this._sp && (this._sp._renderType = 0, this._sp._setRenderType(0), 
                this._sp = null), this._destroyData();
            }
        }, {
            key: "clear",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                if (t) {
                    var e = this._one;
                    if (this._cmds) {
                        var i, n = this._cmds.length;
                        for (i = 0; i < n; i++) (e = this._cmds[i]).recover();
                        this._cmds.length = 0;
                    } else e && e.recover();
                } else this._cmds = null;
                if (this._one = null, this._render = this._renderEmpty, this._clearData(), this._sp && (this._sp._renderType &= ~ge.GRAPHICS, 
                this._sp._setRenderType(this._sp._renderType)), this._repaint(), this._vectorgraphArray) {
                    for (i = 0, n = this._vectorgraphArray.length; i < n; i++) Ee.getInstance().deleteShape(this._vectorgraphArray[i]);
                    this._vectorgraphArray.length = 0;
                }
            }
        }, {
            key: "_clearBoundsCache",
            value: function() {
                this._graphicBounds && this._graphicBounds.reset();
            }
        }, {
            key: "_initGraphicBounds",
            value: function() {
                this._graphicBounds || (this._graphicBounds = ye.create(), this._graphicBounds._graphics = this);
            }
        }, {
            key: "_repaint",
            value: function() {
                this._clearBoundsCache(), this._sp && this._sp.repaint();
            }
        }, {
            key: "_isOnlyOne",
            value: function() {
                return !this._cmds || 0 === this._cmds.length;
            }
        }, {
            key: "getBounds",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return this._initGraphicBounds(), this._graphicBounds.getBounds(t);
            }
        }, {
            key: "getBoundPoints",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return this._initGraphicBounds(), this._graphicBounds.getBoundPoints(t);
            }
        }, {
            key: "drawImage",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                if (!t) return null;
                if (n || (n = t.sourceWidth), r || (r = t.sourceHeight), t.getIsReady()) {
                    var a = n / t.sourceWidth, s = r / t.sourceHeight;
                    if (n = t.width * a, r = t.height * s, n <= 0 || r <= 0) return null;
                    e += t.offsetX * a, i += t.offsetY * s;
                }
                this._sp && (this._sp._renderType |= ge.GRAPHICS, this._sp._setRenderType(this._sp._renderType));
                var o = v.create.call(this, t, e, i, n, r);
                return null == this._one ? (this._one = o, this._render = this._renderOneImg) : this._saveToCmd(null, o), 
                this._repaint(), o;
            }
        }, {
            key: "drawTexture",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h = arguments.length > 9 ? arguments[9] : void 0;
                if (!t || s < .01) return null;
                if (!t.getIsReady()) return null;
                if (n || (n = t.sourceWidth), r || (r = t.sourceHeight), t.getIsReady()) {
                    var u = n / t.sourceWidth, c = r / t.sourceHeight;
                    if (n = t.width * u, r = t.height * c, n <= 0 || r <= 0) return null;
                    e += t.offsetX * u, i += t.offsetY * c;
                }
                this._sp && (this._sp._renderType |= ge.GRAPHICS, this._sp._setRenderType(this._sp._renderType));
                var _ = ht.create.call(this, t, e, i, n, r, a, s, o, l, h);
                return this._repaint(), this._saveToCmd(null, _);
            }
        }, {
            key: "drawTextures",
            value: function(t, e) {
                return t ? this._saveToCmd(de._context.drawTextures, Te.create.call(this, t, e)) : null;
            }
        }, {
            key: "drawTriangles",
            value: function(t, e, i, n, r, a) {
                var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null, u = arguments.length > 10 && void 0 !== arguments[10] ? arguments[10] : 4294967295;
                return this._saveToCmd(de._context.drawTriangles, fe.create.call(this, t, e, i, n, r, a, s, o, l, h, u));
            }
        }, {
            key: "fillTexture",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "repeat", s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
                return t && t.getIsReady() ? this._saveToCmd(de._context._fillTexture, ut.create.call(this, t, e, i, n, r, a, s || E.EMPTY, {})) : null;
            }
        }, {
            key: "_saveToCmd",
            value: function(t, e) {
                return this._sp && (this._sp._renderType |= ge.GRAPHICS, this._sp._setRenderType(this._sp._renderType)), 
                null == this._one ? (this._one = e, this._render = this._renderOne) : (this._render = this._renderAll, 
                0 === (this._cmds || (this._cmds = [])).length && this._cmds.push(this._one), this._cmds.push(e)), 
                this._repaint(), e;
            }
        }, {
            key: "clipRect",
            value: function(t, e, i, n) {
                return this._saveToCmd(de._context.clipRect, me.create.call(this, t, e, i, n));
            }
        }, {
            key: "fillText",
            value: function(t, e, i, n, r, a) {
                return this._saveToCmd(de._context.fillText, xe.create.call(this, t, null, e, i, n || u.Text.defaultFontStr(), r, a, 0, ""));
            }
        }, {
            key: "fillBorderText",
            value: function(t, e, i, n, r, a, s, o) {
                return this._saveToCmd(de._context.fillText, xe.create.call(this, t, null, e, i, n || u.Text.defaultFontStr(), r, a, s, o));
            }
        }, {
            key: "fillWords",
            value: function(t, e, i, n, r) {
                return this._saveToCmd(de._context.fillText, xe.create.call(this, null, t, e, i, n || u.Text.defaultFontStr(), r, "", 0, null));
            }
        }, {
            key: "fillBorderWords",
            value: function(t, e, i, n, r, a, s) {
                return this._saveToCmd(de._context.fillText, xe.create.call(this, null, t, e, i, n || u.Text.defaultFontStr(), r, "", s, a));
            }
        }, {
            key: "strokeText",
            value: function(t, e, i, n, r, a, s) {
                return this._saveToCmd(de._context.fillText, xe.create.call(this, t, null, e, i, n || u.Text.defaultFontStr(), null, s, a, r));
            }
        }, {
            key: "alpha",
            value: function(t) {
                return this._saveToCmd(de._context.alpha, _.create.call(this, t));
            }
        }, {
            key: "transform",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return this._saveToCmd(de._context._transform, ft.create.call(this, t, e, i));
            }
        }, {
            key: "rotate",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return this._saveToCmd(de._context._rotate, _t.create.call(this, t, e, i));
            }
        }, {
            key: "scale",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                return this._saveToCmd(de._context._scale, dt.create.call(this, t, e, i, n));
            }
        }, {
            key: "translate",
            value: function(t, e) {
                return this._saveToCmd(de._context.translate, vt.create.call(this, t, e));
            }
        }, {
            key: "save",
            value: function() {
                return this._saveToCmd(de._context._save, pe.create.call(this));
            }
        }, {
            key: "restore",
            value: function() {
                return this._saveToCmd(de._context.restore, ct.create.call(this));
            }
        }, {
            key: "replaceText",
            value: function(t) {
                this._repaint();
                var e = this._cmds;
                if (e) {
                    for (var i = e.length - 1; i > -1; i--) if (this._isTextCmd(e[i])) return e[i].text = t, 
                    !0;
                } else if (this._one && this._isTextCmd(this._one)) return this._one.text = t, !0;
                return !1;
            }
        }, {
            key: "_isTextCmd",
            value: function(t) {
                return t.cmdID == xe.ID;
            }
        }, {
            key: "replaceTextColor",
            value: function(t) {
                this._repaint();
                var e = this._cmds;
                if (e) for (var i = e.length - 1; i > -1; i--) this._isTextCmd(e[i]) && this._setTextCmdColor(e[i], t); else this._one && this._isTextCmd(this._one) && this._setTextCmdColor(this._one, t);
            }
        }, {
            key: "_setTextCmdColor",
            value: function(t, e) {
                switch (t.cmdID) {
                  case xe.ID:
                    t.color = e;
                }
            }
        }, {
            key: "loadImage",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, s = u.Loader.getRes(t);
                s ? s.getIsReady() ? this.drawImage(s, e, i, n, r) : s.once(Jt.READY, this, this.drawImage, [ s, e, i, n, r ]) : ((s = new te()).load(t), 
                u.Loader.cacheTexture(t, s), s.once(Jt.READY, this, this.drawImage, [ s, e, i, n, r ])), 
                null != a && (s.getIsReady() ? a.call(this._sp) : s.on(Jt.READY, this._sp, a));
            }
        }, {
            key: "_renderEmpty",
            value: function(t, e, i, n) {}
        }, {
            key: "_renderAll",
            value: function(t, e, i, n) {
                for (var r = this._cmds, a = 0, s = r.length; a < s; a++) r[a].run(e, i, n);
            }
        }, {
            key: "_renderOne",
            value: function(t, e, i, n) {
                e.sprite = t, this._one.run(e, i, n);
            }
        }, {
            key: "_renderOneImg",
            value: function(t, e, i, n) {
                e.sprite = t, this._one.run(e, i, n);
            }
        }, {
            key: "drawLine",
            value: function(t, e, i, n, r) {
                var a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1, s = a < 1 || a % 2 == 0 ? 0 : .5;
                return this._saveToCmd(de._context._drawLine, p.create.call(this, t + s, e + s, i + s, n + s, r, a, 0));
            }
        }, {
            key: "drawLines",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                if (!i || i.length < 4) return null;
                var a = r < 1 || r % 2 == 0 ? 0 : .5;
                return this._saveToCmd(de._context._drawLines, y.create.call(this, t + a, e + a, i, n, r, 0));
            }
        }, {
            key: "drawCurves",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                return this._saveToCmd(de._context.drawCurves, f.create.call(this, t, e, i, n, r));
            }
        }, {
            key: "drawRect",
            value: function(t, e, i, n, r) {
                var a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, o = s >= 1 && a ? s / 2 : 0, l = a ? s : 0;
                return this._saveToCmd(de._context.drawRect, x.create.call(this, t + o, e + o, i - l, n - l, r, a, s));
            }
        }, {
            key: "drawCircle",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1, s = a >= 1 && r ? a / 2 : 0;
                return this._saveToCmd(de._context._drawCircle, d.create.call(this, t, e, i - s, n, r, a, 0));
            }
        }, {
            key: "drawPie",
            value: function(t, e, i, n, r, a) {
                var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, l = o >= 1 && s ? o / 2 : 0, h = s ? o : 0;
                return this._saveToCmd(de._context._drawPie, m.create.call(this, t + l, e + l, i - h, st.toRadian(n), st.toRadian(r), a, s, o, 0));
            }
        }, {
            key: "drawPoly",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1, s = !1;
                s = !(i.length > 6);
                var o = a >= 1 && r ? a % 2 == 0 ? 0 : .5 : 0;
                return this._saveToCmd(de._context._drawPoly, T.create.call(this, t + o, e + o, i, n, r, a, s, 0));
            }
        }, {
            key: "drawPath",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                return this._saveToCmd(de._context._drawPath, g.create.call(this, t, e, i, n, r));
            }
        }, {
            key: "draw9Grid",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, a = arguments.length > 5 ? arguments[5] : void 0;
                this._saveToCmd(null, ve.create(t, e, i, n, r, a));
            }
        }, {
            key: "cmds",
            get: function() {
                return this._cmds;
            },
            set: function(t) {
                this._sp && (this._sp._renderType |= ge.GRAPHICS, this._sp._setRenderType(this._sp._renderType)), 
                this._cmds = t, this._render = this._renderAll, this._repaint();
            }
        } ]), t;
    }(), Ae = function t() {
        (0, o.default)(this, t);
    };
    Ae.NOT_ACTIVE = 1, Ae.ACTIVE_INHIERARCHY = 2, Ae.AWAKED = 4, Ae.NOT_READY = 8, Ae.DISPLAY = 16, 
    Ae.HAS_ZORDER = 32, Ae.HAS_MOUSE = 64, Ae.DISPLAYED_INSTAGE = 128, Ae.DRAWCALL_OPTIMIZE = 256;
    var Ce = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                t.map[ge.ALPHA | ge.TRANSFORM | ge.GRAPHICS] = t.alpha_transform_drawLayaGL, t.map[ge.ALPHA | ge.GRAPHICS] = t.alpha_drawLayaGL, 
                t.map[ge.TRANSFORM | ge.GRAPHICS] = t.transform_drawLayaGL, t.map[ge.TRANSFORM | ge.CHILDS] = t.transform_drawNodes, 
                t.map[ge.ALPHA | ge.TRANSFORM | ge.TEXTURE] = t.alpha_transform_drawTexture, t.map[ge.ALPHA | ge.TEXTURE] = t.alpha_drawTexture, 
                t.map[ge.TRANSFORM | ge.TEXTURE] = t.transform_drawTexture, t.map[ge.GRAPHICS | ge.CHILDS] = t.drawLayaGL_drawNodes;
            }
        }, {
            key: "transform_drawTexture",
            value: function(e, i, n, r) {
                e._style;
                var a = e.texture;
                i.saveTransform(t.curMat), i.transformByMatrix(e.transform, n, r);
                var s = e._width || a.sourceWidth, o = e._height || a.sourceHeight, l = s / a.sourceWidth, h = o / a.sourceHeight;
                if (s = a.width * l, o = a.height * h, s <= 0 || o <= 0) return null;
                var u = -e.pivotX + a.offsetX * l, c = -e.pivotY + a.offsetY * h;
                i.drawTexture(a, u, c, s, o), i.restoreTransform(t.curMat);
            }
        }, {
            key: "alpha_drawTexture",
            value: function(t, e, i, n) {
                var r, a = t._style, s = t.texture;
                if ((r = a.alpha) > .01 || t._needRepaint()) {
                    var o = e.globalAlpha;
                    e.globalAlpha *= r;
                    var l = t._width || s.width, h = t._height || s.height, u = l / s.sourceWidth, c = h / s.sourceHeight;
                    if (l = s.width * u, h = s.height * c, l <= 0 || h <= 0) return null;
                    var _ = i - a.pivotX + s.offsetX * u, d = n - a.pivotY + s.offsetY * c;
                    e.drawTexture(s, _, d, l, h), e.globalAlpha = o;
                }
            }
        }, {
            key: "alpha_transform_drawTexture",
            value: function(e, i, n, r) {
                var a, s = e._style, o = e.texture;
                if ((a = s.alpha) > .01 || e._needRepaint()) {
                    var l = i.globalAlpha;
                    i.globalAlpha *= a, i.saveTransform(t.curMat), i.transformByMatrix(e.transform, n, r);
                    var h = e._width || o.sourceWidth, u = e._height || o.sourceHeight, c = h / o.sourceWidth, _ = u / o.sourceHeight;
                    if (h = o.width * c, u = o.height * _, h <= 0 || u <= 0) return null;
                    var d = -s.pivotX + o.offsetX * c, f = -s.pivotY + o.offsetY * _;
                    i.drawTexture(o, d, f, h, u), i.restoreTransform(t.curMat), i.globalAlpha = l;
                }
            }
        }, {
            key: "alpha_transform_drawLayaGL",
            value: function(e, i, n, r) {
                var a, s = e._style;
                if ((a = s.alpha) > .01 || e._needRepaint()) {
                    var o = i.globalAlpha;
                    i.globalAlpha *= a, i.saveTransform(t.curMat), i.transformByMatrix(e.transform, n, r), 
                    e._graphics && e._graphics._render(e, i, -s.pivotX, -s.pivotY), i.restoreTransform(t.curMat), 
                    i.globalAlpha = o;
                }
            }
        }, {
            key: "alpha_drawLayaGL",
            value: function(t, e, i, n) {
                var r, a = t._style;
                if ((r = a.alpha) > .01 || t._needRepaint()) {
                    var s = e.globalAlpha;
                    e.globalAlpha *= r, t._graphics && t._graphics._render(t, e, i - a.pivotX, n - a.pivotY), 
                    e.globalAlpha = s;
                }
            }
        }, {
            key: "transform_drawLayaGL",
            value: function(e, i, n, r) {
                var a = e._style;
                i.saveTransform(t.curMat), i.transformByMatrix(e.transform, n, r), e._graphics && e._graphics._render(e, i, -a.pivotX, -a.pivotY), 
                i.restoreTransform(t.curMat);
            }
        }, {
            key: "transform_drawNodes",
            value: function(e, i, n, r) {
                var a = e._getBit(Ae.DRAWCALL_OPTIMIZE) && i.drawCallOptimize(!0), s = e._style;
                i.saveTransform(t.curMat), i.transformByMatrix(e.transform, n, r), n = -s.pivotX, 
                r = -s.pivotY;
                var o, l = e._children, h = l.length;
                if (s.viewport) {
                    var u, c, _ = s.viewport, d = _.x, f = _.y, v = _.right, p = _.bottom;
                    for (y = 0; y < h; ++y) (o = l[y])._visible && (u = o._x) < v && u + o.width > d && (c = o._y) < p && c + o.height > f && o.render(i, n, r);
                } else for (var y = 0; y < h; ++y) (o = l[y])._visible && o.render(i, n, r);
                i.restoreTransform(t.curMat), a && i.drawCallOptimize(!1);
            }
        }, {
            key: "drawLayaGL_drawNodes",
            value: function(t, e, i, n) {
                var r = t._getBit(Ae.DRAWCALL_OPTIMIZE) && e.drawCallOptimize(!0), a = t._style;
                i -= a.pivotX, n -= a.pivotY, t._graphics && t._graphics._render(t, e, i, n);
                var s, o = t._children, l = o.length;
                if (a.viewport) {
                    var h, u, c = a.viewport, _ = c.x, d = c.y, f = c.right, v = c.bottom;
                    for (p = 0; p < l; ++p) (s = o[p])._visible && (h = s._x) < f && h + s.width > _ && (u = s._y) < v && u + s.height > d && s.render(e, i, n);
                } else for (var p = 0; p < l; ++p) (s = o[p])._visible && s.render(e, i, n);
                r && e.drawCallOptimize(!1);
            }
        } ]), t;
    }();
    Ce.map = [], Ce.curMat = new k();
    var be = function() {
        function t(e, i) {
            if ((0, o.default)(this, t), Ce.map[e]) return this._fun = Ce.map[e], void (this._next = t.NORENDER);
            switch (this._next = i || t.NORENDER, e) {
              case 0:
                return void (this._fun = this._no);

              case ge.ALPHA:
                return void (this._fun = this._alpha);

              case ge.TRANSFORM:
                return void (this._fun = this._transform);

              case ge.BLEND:
                return void (this._fun = this._blend);

              case ge.CANVAS:
                return void (this._fun = this._canvas);

              case ge.MASK:
                return void (this._fun = this._mask);

              case ge.CLIP:
                return void (this._fun = this._clip);

              case ge.STYLE:
                return void (this._fun = this._style);

              case ge.GRAPHICS:
                return void (this._fun = this._graphics);

              case ge.CHILDS:
                return void (this._fun = this._children);

              case ge.CUSTOM:
                return void (this._fun = this._custom);

              case ge.TEXTURE:
                return void (this._fun = this._texture);

              case ge.FILTERS:
                return void (this._fun = at._filter);

              case t.INIT:
                return void (this._fun = t._initRenderFun);
            }
            this.onCreate(e);
        }
        return (0, s.default)(t, [ {
            key: "onCreate",
            value: function(t) {}
        }, {
            key: "_style",
            value: function(t, e, i, n) {
                var r = t._style;
                null != r.render && r.render(t, e, i, n);
                var a = this._next;
                a._fun.call(a, t, e, i, n);
            }
        }, {
            key: "_no",
            value: function(t, e, i, n) {}
        }, {
            key: "_custom",
            value: function(t, e, i, n) {
                t.customRender(e, i, n), this._next._fun.call(this._next, t, e, 0, 0);
            }
        }, {
            key: "_clip",
            value: function(e, i, n, r) {
                var a = this._next;
                if (a != t.NORENDER) {
                    var s = e._style.scrollRect, o = s.width, l = s.height;
                    0 !== o && 0 !== l && (i.save(), i.clipRect(n, r, o, l), a._fun.call(a, e, i, n - s.x, r - s.y), 
                    i.restore());
                }
            }
        }, {
            key: "_texture",
            value: function(e, i, n, r) {
                var a = e.texture;
                if (a._getSource()) {
                    var s = e._width || a.sourceWidth, o = e._height || a.sourceHeight, l = s / a.sourceWidth, h = o / a.sourceHeight;
                    if (s = a.width * l, o = a.height * h, s <= 0 || o <= 0) return;
                    var u = n - e.pivotX + a.offsetX * l, c = r - e.pivotY + a.offsetY * h;
                    i.drawTexture(a, u, c, s, o);
                }
                var _ = this._next;
                _ != t.NORENDER && _._fun.call(_, e, i, n, r);
            }
        }, {
            key: "_graphics",
            value: function(e, i, n, r) {
                var a = e._style, s = e._graphics;
                s && s._render(e, i, n - a.pivotX, r - a.pivotY);
                var o = this._next;
                o != t.NORENDER && o._fun.call(o, e, i, n, r);
            }
        }, {
            key: "_image",
            value: function(t, e, i, n) {
                var r = t._style;
                e.drawTexture2(i, n, r.pivotX, r.pivotY, t.transform, t._graphics._one);
            }
        }, {
            key: "_image2",
            value: function(t, e, i, n) {
                var r = t._style;
                e.drawTexture2(i, n, r.pivotX, r.pivotY, t.transform, t._graphics._one);
            }
        }, {
            key: "_alpha",
            value: function(t, e, i, n) {
                var r;
                if ((r = t._style.alpha) > .01 || t._needRepaint()) {
                    var a = e.globalAlpha;
                    e.globalAlpha *= r;
                    var s = this._next;
                    s._fun.call(s, t, e, i, n), e.globalAlpha = a;
                }
            }
        }, {
            key: "_transform",
            value: function(e, i, n, r) {
                var a = e.transform, s = this._next;
                e._style, a && s != t.NORENDER ? (i.save(), i.transform(a.a, a.b, a.c, a.d, a.tx + n, a.ty + r), 
                s._fun.call(s, e, i, 0, 0), i.restore()) : s != t.NORENDER && s._fun.call(s, e, i, n, r);
            }
        }, {
            key: "_children",
            value: function(t, e, i, n) {
                var r, a = t._style, s = t._children, o = s.length;
                i -= t.pivotX, n -= t.pivotY;
                var l = t._getBit(Ae.DRAWCALL_OPTIMIZE) && e.drawCallOptimize(!0);
                if (a.viewport) {
                    var h, u, c = a.viewport, _ = c.x, d = c.y, f = c.right, v = c.bottom;
                    for (p = 0; p < o; ++p) (r = s[p])._visible && (h = r._x) < f && h + r.width > _ && (u = r._y) < v && u + r.height > d && r.render(e, i, n);
                } else for (var p = 0; p < o; ++p) (r = s[p])._visible && r.render(e, i, n);
                l && e.drawCallOptimize(!1);
            }
        }, {
            key: "_canvas",
            value: function(t, e, i, n) {
                var r = t._cacheStyle, a = this._next;
                if (r.enableCanvasRender) {
                    "bitmap" === r.cacheAs ? $.canvasBitmap++ : $.canvasNormal++;
                    var s = !1, o = !1;
                    if (r.canvas) {
                        var l = r.canvas, h = (l.context, l.touches);
                        if (h) for (var c = 0; c < h.length; c++) if (h[c].deleted) {
                            o = !0;
                            break;
                        }
                        s = l.isCacheValid && !l.isCacheValid();
                    }
                    if (t._needRepaint() || !r.canvas || o || s || u.stage.isGlobalRepaint()) if ("normal" === r.cacheAs) {
                        if (e._targets) return void a._fun.call(a, t, e, i, n);
                        this._canvas_webgl_normal_repaint(t, e);
                    } else this._canvas_repaint(t, e, i, n);
                    var _ = r.cacheRect;
                    e.drawCanvas(r.canvas, i + _.x, n + _.y, _.width, _.height);
                } else a._fun.call(a, t, e, i, n);
            }
        }, {
            key: "_canvas_repaint",
            value: function(t, e, i, n) {
                var r, a, s, o, l, h, u, c, _, d = t._cacheStyle, f = this._next, v = d.canvas, p = d.cacheAs;
                if (u = (_ = d._calculateCacheRect(t, p, i, n)).x, c = _.y, l = (o = d.cacheRect).width * u, 
                h = o.height * c, a = o.x, s = o.y, "bitmap" === p && (l > 2048 || h > 2048)) return console.warn("cache bitmap size larger than 2048,cache ignored"), 
                d.releaseContext(), void f._fun.call(f, t, e, i, n);
                if (v || (d.createContext(), v = d.canvas), (r = v.context).sprite = t, (v.width != l || v.height != h) && v.size(l, h), 
                "bitmap" === p ? r.asBitmap = !0 : "normal" === p && (r.asBitmap = !1), r.clear(), 
                1 != u || 1 != c) {
                    var y = r;
                    y.save(), y.scale(u, c), f._fun.call(f, t, r, -a, -s), y.restore(), t._applyFilters();
                } else y = r, f._fun.call(f, t, r, -a, -s), t._applyFilters();
                d.staticCache && (d.reCache = !1), $.canvasReCache++;
            }
        }, {
            key: "_canvas_webgl_normal_repaint",
            value: function(t, e) {
                var i = t._cacheStyle, n = this._next, r = i.canvas, a = i.cacheAs;
                i._calculateCacheRect(t, a, 0, 0), r || (r = new Nt(e, t), i.canvas = r);
                var s = r.context;
                r.startRec(), n._fun.call(n, t, s, t.pivotX, t.pivotY), t._applyFilters(), $.canvasReCache++, 
                r.endRec();
            }
        }, {
            key: "_blend",
            value: function(t, e, i, n) {
                var r = t._style, a = this._next;
                r.blendMode ? (e.save(), e.globalCompositeOperation = r.blendMode, a._fun.call(a, t, e, i, n), 
                e.restore()) : a._fun.call(a, t, e, i, n);
            }
        }, {
            key: "_mask",
            value: function(e, i, n, r) {
                var a = this._next, s = e.mask, o = i;
                if (s) {
                    o.save();
                    var l = o.globalCompositeOperation, h = new R();
                    if (h.copyFrom(s.getBounds()), h.width = Math.round(h.width), h.height = Math.round(h.height), 
                    h.x = Math.round(h.x), h.y = Math.round(h.y), h.width > 0 && h.height > 0) {
                        var u = h.width, c = h.height, _ = j.getRT(u, c);
                        o.breakNextMerge(), o.pushRT(), o.addRenderObject(rt.create([ o, _, u, c ], t.tmpTarget, this)), 
                        s.render(o, -h.x, -h.y), o.breakNextMerge(), o.popRT(), o.save();
                        o.clipRect(n + h.x - e.getStyle().pivotX + .1, r + h.y - e.getStyle().pivotY + .1, u - .2, c - .2), 
                        a._fun.call(a, e, o, n, r), o.restore(), l = o.globalCompositeOperation, o.addRenderObject(rt.create([ "mask" ], t.setBlendMode, this));
                        var d = it.create(Q.TEXTURE2D, 0), f = te.INV_UV;
                        o.drawTarget(_, n + h.x - e.getStyle().pivotX, r + h.y - e.getStyle().pivotY, u, c, k.TEMP.identity(), d, f, 6), 
                        o.addRenderObject(rt.create([ _ ], t.recycleTarget, this)), o.addRenderObject(rt.create([ l ], t.setBlendMode, this));
                    }
                    o.restore();
                } else a._fun.call(a, e, i, n, r);
            }
        } ], [ {
            key: "__init__",
            value: function() {
                var e, i, n;
                for (Ce.__init__(), n = new t(t.INIT, null), i = t.renders.length = 2 * ge.CHILDS, 
                e = 0; e < i; e++) t.renders[e] = n;
                t.renders[0] = new t(0, null);
            }
        }, {
            key: "_initRenderFun",
            value: function(e, i, n, r) {
                var a = e._renderType;
                (t.renders[a] = t._getTypeRender(a))._fun(e, i, n, r);
            }
        }, {
            key: "_getTypeRender",
            value: function(e) {
                if (Ce.map[e]) return new t(e, null);
                for (var i = null, n = ge.CHILDS; n > 0; ) n & e && (i = new t(n, i)), n >>= 1;
                return i;
            }
        }, {
            key: "tmpTarget",
            value: function(t, e, i, n) {
                e.start(), e.clear(0, 0, 0, 0);
            }
        }, {
            key: "recycleTarget",
            value: function(t) {
                j.releaseRT(t);
            }
        }, {
            key: "setBlendMode",
            value: function(t) {
                var e = L.mainContext;
                q.targetFns[q.TOINT[t]](e);
            }
        } ]), t;
    }();
    be.INIT = 69905, be.renders = [], be.NORENDER = new be(0, null), be.tempUV = new Array(8);
    var Se = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h() {
            var t, e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            return (0, o.default)(this, h), (t = n.call(this))._source = e ? ae.createElement("canvas") : (0, 
            i.default)(t), t.lock = !0, t;
        }
        return (0, s.default)(h, [ {
            key: "_getSource",
            value: function() {
                return this._source;
            }
        }, {
            key: "clear",
            value: function() {
                this._ctx && (this._ctx.clear ? this._ctx.clear() : this._ctx.clearRect(0, 0, this._width, this._height)), 
                this._texture && (this._texture.destroy(), this._texture = null);
            }
        }, {
            key: "destroy",
            value: function() {
                (0, e.default)((0, r.default)(h.prototype), "destroy", this).call(this), this._setCPUMemory(0), 
                this._ctx && this._ctx.destroy && this._ctx.destroy(), this._ctx = null;
            }
        }, {
            key: "release",
            value: function() {}
        }, {
            key: "_setContext",
            value: function(t) {
                this._ctx = t;
            }
        }, {
            key: "getContext",
            value: function(t) {
                return this.context;
            }
        }, {
            key: "getMemSize",
            value: function() {
                return 0;
            }
        }, {
            key: "size",
            value: function(t, e) {
                (this._width != t || this._height != e || this._source && (this._source.width != t || this._source.height != e)) && (this._width = t, 
                this._height = e, this._setCPUMemory(t * e * 4), this._ctx && this._ctx.size && this._ctx.size(t, e), 
                this._source && (this._source.height = e, this._source.width = t), this._texture && (this._texture.destroy(), 
                this._texture = null));
            }
        }, {
            key: "getTexture",
            value: function() {
                if (!this._texture) {
                    var t = new X();
                    t.loadImageSource(this.source), this._texture = new te(t);
                }
                return this._texture;
            }
        }, {
            key: "toBase64",
            value: function(t, e) {
                if (this._source) {
                    if (u.Render.isConchApp) {
                        var i = window;
                        if (2 == i.conchConfig.threadMode) throw "native 2 thread mode use toBase64Async";
                        var n = this._ctx._targets.sourceWidth, r = this._ctx._targets.sourceHeight, a = this._ctx._targets.getData(0, 0, n, r);
                        return i.conchToBase64FlipY ? i.conchToBase64FlipY(t, e, a.buffer, n, r) : i.conchToBase64(t, e, a.buffer, n, r);
                    }
                    return this._source.toDataURL(t, e);
                }
                return null;
            }
        }, {
            key: "toBase64Async",
            value: function(t, e, i) {
                var n = this._ctx._targets.sourceWidth, r = this._ctx._targets.sourceHeight;
                this._ctx._targets.getDataAsync(0, 0, n, r, function(a) {
                    var s = window, o = s.conchToBase64FlipY ? s.conchToBase64FlipY(t, e, a.buffer, n, r) : s.conchToBase64(t, e, a.buffer, n, r);
                    i(o);
                });
            }
        }, {
            key: "source",
            get: function() {
                return this._source;
            }
        }, {
            key: "context",
            get: function() {
                return this._ctx || (this._source == this ? this._ctx = new u.Context() : this._ctx = this._source.getContext(u.Render.isConchApp ? "layagl" : "2d"), 
                this._ctx._canvas = this), this._ctx;
            }
        } ]), h;
    }(U), we = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "contains",
            value: function(e, i) {
                return !!t._isHitGraphic(e, i, this.hit) && !t._isHitGraphic(e, i, this.unHit);
            }
        }, {
            key: "hit",
            get: function() {
                return this._hit || (this._hit = new u.Graphics()), this._hit;
            },
            set: function(t) {
                this._hit = t;
            }
        }, {
            key: "unHit",
            get: function() {
                return this._unHit || (this._unHit = new u.Graphics()), this._unHit;
            },
            set: function(t) {
                this._unHit = t;
            }
        } ], [ {
            key: "_isHitGraphic",
            value: function(e, i, n) {
                if (!n) return !1;
                var r, a, s, o = n.cmds;
                if (!o && n._one && ((o = t._cmds).length = 1, o[0] = n._one), !o) return !1;
                for (a = o.length, r = 0; r < a; r++) if (s = o[r]) {
                    switch (s.cmdID) {
                      case "Translate":
                        e -= s.tx, i -= s.ty;
                    }
                    if (t._isHitCmd(e, i, s)) return !0;
                }
                return !1;
            }
        }, {
            key: "_isHitCmd",
            value: function(e, i, n) {
                if (!n) return !1;
                var r = !1;
                switch (n.cmdID) {
                  case "DrawRect":
                    t._rect.setTo(n.x, n.y, n.width, n.height), r = t._rect.contains(e, i);
                    break;

                  case "DrawCircle":
                    r = (e -= n.x) * e + (i -= n.y) * i < n.radius * n.radius;
                    break;

                  case "DrawPoly":
                    e -= n.x, i -= n.y, r = t._ptInPolygon(e, i, n.points);
                }
                return r;
            }
        }, {
            key: "_ptInPolygon",
            value: function(e, i, n) {
                var r = t._ptPoint;
                r.setTo(e, i);
                var a, s, o, l, h, u = 0;
                h = n.length;
                for (var c = 0; c < h; c += 2) a = n[c], s = n[c + 1], o = n[(c + 2) % h], s != (l = n[(c + 3) % h]) && (r.y < Math.min(s, l) || r.y >= Math.max(s, l) || (r.y - s) * (o - a) / (l - s) + a > r.x && u++);
                return u % 2 == 1;
            }
        } ]), t;
    }();
    we._cmds = [], we._rect = new R(), we._ptPoint = new E();
    var Me = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "regClass",
            value: function(e, i) {
                t._classMap[e] = i;
            }
        }, {
            key: "regShortClassName",
            value: function(e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i], r = n.name;
                    t._classMap[r] = n;
                }
            }
        }, {
            key: "getRegClass",
            value: function(e) {
                return t._classMap[e];
            }
        }, {
            key: "getClass",
            value: function(e) {
                var i = t._classMap[e] || t._classMap["Laya." + e] || e, n = u.Laya;
                return "string" == typeof i ? u.__classMap[i] || n[e] : i;
            }
        }, {
            key: "getInstance",
            value: function(e) {
                var i = t.getClass(e);
                return i ? new i() : (console.warn("[error] Undefined class:", e), null);
            }
        }, {
            key: "createByJson",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                "string" == typeof e && (e = JSON.parse(e));
                var s = e.props;
                if (!i && !(i = a ? a.runWith(e) : t.getInstance(s.runtime || e.type))) return null;
                var o = e.child;
                if (o) for (var l = 0, h = o.length; l < h; l++) {
                    var u = o[l];
                    if ("render" !== u.props.name && "render" !== u.props.renderType || !i._$set_itemRender) if ("Graphic" == u.type) t._addGraphicsToSprite(u, i); else if (t._isDrawType(u.type)) t._addGraphicToSprite(u, i, !0); else {
                        var c = t.createByJson(u, null, n, r, a);
                        "Script" === u.type ? "owner" in c ? c.owner = i : "target" in c && (c.target = i) : "mask" == u.props.renderType ? i.mask = c : i.addChild(c);
                    } else i.itemRender = u;
                }
                if (s) for (var _ in s) {
                    var d = s[_];
                    "var" === _ && n ? n[d] = i : d instanceof Array && i[_] instanceof Function ? i[_].apply(i, d) : i[_] = d;
                }
                return r && e.customProps && r.runWith([ i, e ]), i.created && i.created(), i;
            }
        }, {
            key: "_addGraphicsToSprite",
            value: function(e, i) {
                var n = e.child;
                if (n && !(n.length < 1)) {
                    var r, a, s = t._getGraphicsFromSprite(e, i), o = 0, l = 0;
                    for (e.props && (o = t._getObjVar(e.props, "x", 0), l = t._getObjVar(e.props, "y", 0)), 
                    0 != o && 0 != l && s.translate(o, l), a = n.length, r = 0; r < a; r++) t._addGraphicToGraphics(n[r], s);
                    0 != o && 0 != l && s.translate(-o, -l);
                }
            }
        }, {
            key: "_addGraphicToSprite",
            value: function(e, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], r = n ? t._getGraphicsFromSprite(e, i) : i.graphics;
                t._addGraphicToGraphics(e, r);
            }
        }, {
            key: "_getGraphicsFromSprite",
            value: function(t, e) {
                if (!t || !t.props) return e.graphics;
                var i = t.props.renderType;
                if ("hit" === i || "unHit" === i) {
                    var n = e._style.hitArea || (e.hitArea = new we());
                    n[i] || (n[i] = new Re());
                    var r = n[i];
                }
                return r || (r = e.graphics), r;
            }
        }, {
            key: "_getTransformData",
            value: function(e) {
                var i;
                ("pivotX" in e || "pivotY" in e) && (i = i || new k()).translate(-t._getObjVar(e, "pivotX", 0), -t._getObjVar(e, "pivotY", 0));
                var n = t._getObjVar(e, "scaleX", 1), r = t._getObjVar(e, "scaleY", 1), a = t._getObjVar(e, "rotation", 0);
                return t._getObjVar(e, "skewX", 0), t._getObjVar(e, "skewY", 0), 1 == n && 1 == r && 0 == a || ((i = i || new k()).scale(n, r), 
                i.rotate(.0174532922222222 * a)), i;
            }
        }, {
            key: "_addGraphicToGraphics",
            value: function(e, i) {
                var n, r;
                if ((n = e.props) && (r = t.DrawTypeDic[e.type])) {
                    var a = i, s = t._getParams(n, r[1], r[2], r[3]), o = t._tM;
                    (o || 1 != t._alpha) && (a.save(), o && a.transform(o), 1 != t._alpha && a.alpha(t._alpha)), 
                    a[r[0]].apply(a, s), (o || 1 != t._alpha) && a.restore();
                }
            }
        }, {
            key: "_adptLineData",
            value: function(t) {
                return t[2] = parseFloat(t[0]) + parseFloat(t[2]), t[3] = parseFloat(t[1]) + parseFloat(t[3]), 
                t;
            }
        }, {
            key: "_adptTextureData",
            value: function(t) {
                return t[0] = u.Loader.getRes(t[0]), t;
            }
        }, {
            key: "_adptLinesData",
            value: function(e) {
                return e[2] = t._getPointListByStr(e[2]), e;
            }
        }, {
            key: "_isDrawType",
            value: function(e) {
                return "Image" !== e && e in t.DrawTypeDic;
            }
        }, {
            key: "_getParams",
            value: function(e, i) {
                var n, r, a, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, l = t._temParam;
                for (l.length = i.length, r = i.length, n = 0; n < r; n++) l[n] = t._getObjVar(e, i[n][0], i[n][1]);
                return t._alpha = t._getObjVar(e, "alpha", 1), (a = t._getTransformData(e)) ? (s || (s = 0), 
                a.translate(l[s], l[s + 1]), l[s] = l[s + 1] = 0, t._tM = a) : t._tM = null, o && t[o] && (l = t[o](l)), 
                l;
            }
        }, {
            key: "_getPointListByStr",
            value: function(t) {
                var e, i, n = t.split(",");
                for (i = n.length, e = 0; e < i; e++) n[e] = parseFloat(n[e]);
                return n;
            }
        }, {
            key: "_getObjVar",
            value: function(t, e, i) {
                return e in t ? t[e] : i;
            }
        } ]), t;
    }();
    Me.DrawTypeDic = {
        Rect: [ "drawRect", [ [ "x", 0 ], [ "y", 0 ], [ "width", 0 ], [ "height", 0 ], [ "fillColor", null ], [ "lineColor", null ], [ "lineWidth", 1 ] ] ],
        Circle: [ "drawCircle", [ [ "x", 0 ], [ "y", 0 ], [ "radius", 0 ], [ "fillColor", null ], [ "lineColor", null ], [ "lineWidth", 1 ] ] ],
        Pie: [ "drawPie", [ [ "x", 0 ], [ "y", 0 ], [ "radius", 0 ], [ "startAngle", 0 ], [ "endAngle", 0 ], [ "fillColor", null ], [ "lineColor", null ], [ "lineWidth", 1 ] ] ],
        Image: [ "drawTexture", [ [ "x", 0 ], [ "y", 0 ], [ "width", 0 ], [ "height", 0 ] ] ],
        Texture: [ "drawTexture", [ [ "skin", null ], [ "x", 0 ], [ "y", 0 ], [ "width", 0 ], [ "height", 0 ] ], 1, "_adptTextureData" ],
        FillTexture: [ "fillTexture", [ [ "skin", null ], [ "x", 0 ], [ "y", 0 ], [ "width", 0 ], [ "height", 0 ], [ "repeat", null ] ], 1, "_adptTextureData" ],
        FillText: [ "fillText", [ [ "text", "" ], [ "x", 0 ], [ "y", 0 ], [ "font", null ], [ "color", null ], [ "textAlign", null ] ], 1 ],
        Line: [ "drawLine", [ [ "x", 0 ], [ "y", 0 ], [ "toX", 0 ], [ "toY", 0 ], [ "lineColor", null ], [ "lineWidth", 0 ] ], 0, "_adptLineData" ],
        Lines: [ "drawLines", [ [ "x", 0 ], [ "y", 0 ], [ "points", "" ], [ "lineColor", null ], [ "lineWidth", 0 ] ], 0, "_adptLinesData" ],
        Curves: [ "drawCurves", [ [ "x", 0 ], [ "y", 0 ], [ "points", "" ], [ "lineColor", null ], [ "lineWidth", 0 ] ], 0, "_adptLinesData" ],
        Poly: [ "drawPoly", [ [ "x", 0 ], [ "y", 0 ], [ "points", "" ], [ "fillColor", null ], [ "lineColor", null ], [ "lineWidth", 1 ] ], 0, "_adptLinesData" ]
    }, Me._temParam = [], Me._classMap = {};
    var Ie = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "reset",
            value: function() {
                return this.bounds && this.bounds.recover(), this.userBounds && this.userBounds.recover(), 
                this.bounds = null, this.userBounds = null, this.temBM = null, this;
            }
        }, {
            key: "recover",
            value: function() {
                c.recover("BoundsStyle", this.reset());
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("BoundsStyle", t);
            }
        } ]), t;
    }(), Pe = function() {
        function t() {
            (0, o.default)(this, t), this.reset();
        }
        return (0, s.default)(t, [ {
            key: "needBitmapCache",
            value: function() {
                return this.cacheForFilters || !!this.mask;
            }
        }, {
            key: "needEnableCanvasRender",
            value: function() {
                return "none" != this.userSetCache || this.cacheForFilters || !!this.mask;
            }
        }, {
            key: "releaseContext",
            value: function() {
                if (this.canvas && this.canvas.size) {
                    c.recover("CacheCanvas", this.canvas), this.canvas.size(0, 0);
                    try {
                        this.canvas.width = 0, this.canvas.height = 0;
                    } catch (t) {}
                }
                this.canvas = null;
            }
        }, {
            key: "createContext",
            value: function() {
                if (!this.canvas) {
                    this.canvas = c.getItem("CacheCanvas") || new Se(!1);
                    var t = this.canvas.context;
                    t || (t = this.canvas.getContext("2d"));
                }
            }
        }, {
            key: "releaseFilterCache",
            value: function() {
                var t = this.filterCache;
                t && (t.destroy(), t.recycle(), this.filterCache = null);
            }
        }, {
            key: "recover",
            value: function() {
                this !== t.EMPTY && c.recover("SpriteCache", this.reset());
            }
        }, {
            key: "reset",
            value: function() {
                return this.releaseContext(), this.releaseFilterCache(), this.cacheAs = "none", 
                this.enableCanvasRender = !1, this.userSetCache = "none", this.cacheForFilters = !1, 
                this.staticCache = !1, this.reCache = !0, this.mask = null, this.maskParent = null, 
                this.filterCache = null, this.filters = null, this.hasGlowFilter = !1, this.cacheRect && this.cacheRect.recover(), 
                this.cacheRect = null, this;
            }
        }, {
            key: "_calculateCacheRect",
            value: function(e, i, n, r) {
                var a, s = e._cacheStyle;
                if (s.cacheRect || (s.cacheRect = R.create()), "bitmap" === i ? ((a = e.getSelfBounds()).width = a.width + 2 * t.CANVAS_EXTEND_EDGE, 
                a.height = a.height + 2 * t.CANVAS_EXTEND_EDGE, a.x = a.x - e.pivotX, a.y = a.y - e.pivotY, 
                a.x = a.x - t.CANVAS_EXTEND_EDGE, a.y = a.y - t.CANVAS_EXTEND_EDGE, a.x = Math.floor(a.x + n) - n, 
                a.y = Math.floor(a.y + r) - r, a.width = Math.floor(a.width), a.height = Math.floor(a.height), 
                s.cacheRect.copyFrom(a)) : s.cacheRect.setTo(-e._style.pivotX, -e._style.pivotY, 1, 1), 
                a = s.cacheRect, e._style.scrollRect) {
                    var o = e._style.scrollRect;
                    a.x -= o.x, a.y -= o.y;
                }
                return t._scaleInfo.setTo(1, 1), t._scaleInfo;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("SpriteCache", t);
            }
        } ]), t;
    }();
    Pe.EMPTY = new Pe(), Pe._scaleInfo = new E(), Pe.CANVAS_EXTEND_EDGE = 16;
    var Le = function() {
        function t() {
            (0, o.default)(this, t), this.reset();
        }
        return (0, s.default)(t, [ {
            key: "reset",
            value: function() {
                return this.scaleX = this.scaleY = 1, this.skewX = this.skewY = 0, this.pivotX = this.pivotY = this.rotation = 0, 
                this.alpha = 1, this.scrollRect && this.scrollRect.recover(), this.scrollRect = null, 
                this.viewport && this.viewport.recover(), this.viewport = null, this.hitArea = null, 
                this.dragging = null, this.blendMode = null, this;
            }
        }, {
            key: "recover",
            value: function() {
                this !== t.EMPTY && c.recover("SpriteStyle", this.reset());
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("SpriteStyle", t);
            }
        } ]), t;
    }();
    Le.EMPTY = new Le();
    var De = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.call(this))._bits = 0, t._children = i.ARRAY_EMPTY, 
            t._extUIChild = i.ARRAY_EMPTY, t._parent = null, t.name = "", t.destroyed = !1, 
            t.createGLBuffer(), t;
        }
        return (0, s.default)(i, [ {
            key: "createGLBuffer",
            value: function() {}
        }, {
            key: "_setBit",
            value: function(t, e) {
                t === Ae.DISPLAY && this._getBit(t) != e && this._updateDisplayedInstage(), e ? this._bits |= t : this._bits &= ~t;
            }
        }, {
            key: "_getBit",
            value: function(t) {
                return 0 != (this._bits & t);
            }
        }, {
            key: "_setUpNoticeChain",
            value: function() {
                this._getBit(Ae.DISPLAY) && this._setBitUp(Ae.DISPLAY);
            }
        }, {
            key: "_setBitUp",
            value: function(t) {
                var e = this;
                for (e._setBit(t, !0), e = e._parent; e; ) {
                    if (e._getBit(t)) return;
                    e._setBit(t, !0), e = e._parent;
                }
            }
        }, {
            key: "on",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return t !== Jt.DISPLAY && t !== Jt.UNDISPLAY || this._getBit(Ae.DISPLAY) || this._setBitUp(Ae.DISPLAY), 
                this._createListener(t, e, i, n, !1);
            }
        }, {
            key: "once",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return t !== Jt.DISPLAY && t !== Jt.UNDISPLAY || this._getBit(Ae.DISPLAY) || this._setBitUp(Ae.DISPLAY), 
                this._createListener(t, e, i, n, !0);
            }
        }, {
            key: "destroy",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                this.destroyed = !0, this._destroyAllComponent(), this._parent && this._parent.removeChild(this), 
                this._children && (t ? this.destroyChildren() : this.removeChildren()), this.onDestroy(), 
                this._children = null, this.offAll();
            }
        }, {
            key: "onDestroy",
            value: function() {}
        }, {
            key: "destroyChildren",
            value: function() {
                if (this._children) for (var t = 0, e = this._children.length; t < e; t++) this._children[0].destroy(!0);
            }
        }, {
            key: "addChild",
            value: function(t) {
                if (!t || this.destroyed || t === this) return t;
                if (t._zOrder && this._setBit(Ae.HAS_ZORDER, !0), t._parent === this) {
                    var e = this.getChildIndex(t);
                    e !== this._children.length - 1 && (this._children.splice(e, 1), this._children.push(t), 
                    this._childChanged());
                } else t._parent && t._parent.removeChild(t), this._children === i.ARRAY_EMPTY && (this._children = []), 
                this._children.push(t), t._setParent(this), this._childChanged();
                return t;
            }
        }, {
            key: "addInputChild",
            value: function(t) {
                if (this._extUIChild == i.ARRAY_EMPTY) this._extUIChild = [ t ]; else {
                    if (this._extUIChild.indexOf(t) >= 0) return null;
                    this._extUIChild.push(t);
                }
                return null;
            }
        }, {
            key: "removeInputChild",
            value: function(t) {
                var e = this._extUIChild.indexOf(t);
                e >= 0 && this._extUIChild.splice(e, 1);
            }
        }, {
            key: "addChildren",
            value: function() {
                for (var t = 0, e = arguments.length; t < e; ) {
                    var i;
                    this.addChild((i = t++) < 0 || arguments.length <= i ? void 0 : arguments[i]);
                }
            }
        }, {
            key: "addChildAt",
            value: function(t, e) {
                if (!t || this.destroyed || t === this) return t;
                if (t._zOrder && this._setBit(Ae.HAS_ZORDER, !0), e >= 0 && e <= this._children.length) {
                    if (t._parent === this) {
                        var n = this.getChildIndex(t);
                        this._children.splice(n, 1), this._children.splice(e, 0, t), this._childChanged();
                    } else t._parent && t._parent.removeChild(t), this._children === i.ARRAY_EMPTY && (this._children = []), 
                    this._children.splice(e, 0, t), t._setParent(this);
                    return t;
                }
                throw new Error("appendChildAt:The index is out of bounds");
            }
        }, {
            key: "getChildIndex",
            value: function(t) {
                return this._children.indexOf(t);
            }
        }, {
            key: "getChildByName",
            value: function(t) {
                var e = this._children;
                if (e) for (var i = 0, n = e.length; i < n; i++) {
                    var r = e[i];
                    if (r.name === t) return r;
                }
                return null;
            }
        }, {
            key: "getChildAt",
            value: function(t) {
                return this._children[t] || null;
            }
        }, {
            key: "setChildIndex",
            value: function(t, e) {
                var i = this._children;
                if (e < 0 || e >= i.length) throw new Error("setChildIndex:The index is out of bounds.");
                var n = this.getChildIndex(t);
                if (n < 0) throw new Error("setChildIndex:node is must child of this object.");
                return i.splice(n, 1), i.splice(e, 0, t), this._childChanged(), t;
            }
        }, {
            key: "_childChanged",
            value: function() {}
        }, {
            key: "removeChild",
            value: function(t) {
                if (!this._children) return t;
                var e = this._children.indexOf(t);
                return this.removeChildAt(e);
            }
        }, {
            key: "removeSelf",
            value: function() {
                return this._parent && this._parent.removeChild(this), this;
            }
        }, {
            key: "removeChildByName",
            value: function(t) {
                var e = this.getChildByName(t);
                return e && this.removeChild(e), e;
            }
        }, {
            key: "removeChildAt",
            value: function(t) {
                var e = this.getChildAt(t);
                return e && (this._children.splice(t, 1), e._setParent(null)), e;
            }
        }, {
            key: "removeChildren",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2147483647;
                if (this._children && this._children.length > 0) {
                    var n = this._children;
                    if (0 === t && e >= n.length - 1) {
                        var r = n;
                        this._children = i.ARRAY_EMPTY;
                    } else r = n.splice(t, e - t + 1);
                    for (var a = 0, s = r.length; a < s; a++) r[a]._setParent(null);
                }
                return this;
            }
        }, {
            key: "replaceChild",
            value: function(t, e) {
                var i = this._children.indexOf(e);
                return i > -1 ? (this._children.splice(i, 1, t), e._setParent(null), t._setParent(this), 
                t) : null;
            }
        }, {
            key: "_setParent",
            value: function(t) {
                this._parent !== t && (t ? (this._parent = t, this._onAdded(), this.event(Jt.ADDED), 
                this._getBit(Ae.DISPLAY) && (this._setUpNoticeChain(), t.displayedInStage && this._displayChild(this, !0)), 
                t._childChanged(this)) : (this._onRemoved(), this.event(Jt.REMOVED), this._parent._childChanged(), 
                this._getBit(Ae.DISPLAY) && this._displayChild(this, !1), this._parent = t));
            }
        }, {
            key: "_updateDisplayedInstage",
            value: function() {
                var t;
                t = this;
                for (var e = u.stage, i = !1; t; ) {
                    if (t._getBit(Ae.DISPLAY)) {
                        i = t._getBit(Ae.DISPLAYED_INSTAGE);
                        break;
                    }
                    if (t === e || t._getBit(Ae.DISPLAYED_INSTAGE)) {
                        i = !0;
                        break;
                    }
                    t = t._parent;
                }
                this._setBit(Ae.DISPLAYED_INSTAGE, i);
            }
        }, {
            key: "_setDisplay",
            value: function(t) {
                this._getBit(Ae.DISPLAYED_INSTAGE) !== t && (this._setBit(Ae.DISPLAYED_INSTAGE, t), 
                t ? this.event(Jt.DISPLAY) : this.event(Jt.UNDISPLAY));
            }
        }, {
            key: "_displayChild",
            value: function(t, e) {
                var i = t._children;
                if (i) for (var n = 0, r = i.length; n < r; n++) {
                    var a = i[n];
                    a._getBit(Ae.DISPLAY) && (a._children.length > 0 ? this._displayChild(a, e) : a._setDisplay(e));
                }
                t._setDisplay(e);
            }
        }, {
            key: "contains",
            value: function(t) {
                if (t === this) return !0;
                for (;t; ) {
                    if (t._parent === this) return !0;
                    t = t._parent;
                }
                return !1;
            }
        }, {
            key: "timerLoop",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                (this.scene ? this.scene.timer : u.timer).loop(t, e, i, n, r, a);
            }
        }, {
            key: "timerOnce",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                (this.scene ? this.scene.timer : u.timer)._create(!1, !1, t, e, i, n, r);
            }
        }, {
            key: "frameLoop",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                (this.scene ? this.scene.timer : u.timer)._create(!0, !0, t, e, i, n, r);
            }
        }, {
            key: "frameOnce",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                (this.scene ? this.scene.timer : u.timer)._create(!0, !1, t, e, i, n, r);
            }
        }, {
            key: "clearTimer",
            value: function(t, e) {
                (this.scene ? this.scene.timer : u.timer).clear(t, e);
            }
        }, {
            key: "callLater",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                (this.scene ? this.scene.timer : u.timer).callLater(this, t, e);
            }
        }, {
            key: "runCallLater",
            value: function(t) {
                (this.scene ? this.scene.timer : u.timer).runCallLater(this, t);
            }
        }, {
            key: "_onActive",
            value: function() {
                $.spriteCount++;
            }
        }, {
            key: "_onInActive",
            value: function() {
                $.spriteCount--;
            }
        }, {
            key: "_onActiveInScene",
            value: function() {}
        }, {
            key: "_onInActiveInScene",
            value: function() {}
        }, {
            key: "_parse",
            value: function(t, e) {}
        }, {
            key: "_setBelongScene",
            value: function(t) {
                if (!this._scene) {
                    this._scene = t, this._onActiveInScene();
                    for (var e = 0, i = this._children.length; e < i; e++) this._children[e]._setBelongScene(t);
                }
            }
        }, {
            key: "_setUnBelongScene",
            value: function() {
                if (this._scene !== this) {
                    this._onInActiveInScene(), this._scene = null;
                    for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._setUnBelongScene();
                }
            }
        }, {
            key: "onAwake",
            value: function() {}
        }, {
            key: "onEnable",
            value: function() {}
        }, {
            key: "_processActive",
            value: function() {
                this._activeChangeScripts || (this._activeChangeScripts = []), this._activeHierarchy(this._activeChangeScripts), 
                this._activeScripts();
            }
        }, {
            key: "_activeHierarchy",
            value: function(t) {
                if (this._setBit(Ae.ACTIVE_INHIERARCHY, !0), this._components) for (var e = 0, i = this._components.length; e < i; e++) {
                    var n = this._components[e];
                    n._isScript() ? n._enabled && t.push(n) : n._setActive(!0);
                }
                for (this._onActive(), e = 0, i = this._children.length; e < i; e++) {
                    var r = this._children[e];
                    !r._getBit(Ae.NOT_ACTIVE) && !r._getBit(Ae.NOT_READY) && r._activeHierarchy(t);
                }
                this._getBit(Ae.AWAKED) || (this._setBit(Ae.AWAKED, !0), this.onAwake()), this.onEnable();
            }
        }, {
            key: "_activeScripts",
            value: function() {
                for (var t = 0, e = this._activeChangeScripts.length; t < e; t++) {
                    var i = this._activeChangeScripts[t];
                    i._awaked || (i._awaked = !0, i._onAwake()), i._onEnable();
                }
                this._activeChangeScripts.length = 0;
            }
        }, {
            key: "_processInActive",
            value: function() {
                this._activeChangeScripts || (this._activeChangeScripts = []), this._inActiveHierarchy(this._activeChangeScripts), 
                this._inActiveScripts();
            }
        }, {
            key: "_inActiveHierarchy",
            value: function(t) {
                if (this._onInActive(), this._components) for (var e = 0, i = this._components.length; e < i; e++) {
                    var n = this._components[e];
                    !n._isScript() && n._setActive(!1), n._isScript() && n._enabled && t.push(n);
                }
                for (this._setBit(Ae.ACTIVE_INHIERARCHY, !1), e = 0, i = this._children.length; e < i; e++) {
                    var r = this._children[e];
                    r && !r._getBit(Ae.NOT_ACTIVE) && r._inActiveHierarchy(t);
                }
                this.onDisable();
            }
        }, {
            key: "_inActiveScripts",
            value: function() {
                for (var t = 0, e = this._activeChangeScripts.length; t < e; t++) this._activeChangeScripts[t].owner && this._activeChangeScripts[t]._onDisable();
                this._activeChangeScripts.length = 0;
            }
        }, {
            key: "onDisable",
            value: function() {}
        }, {
            key: "_onAdded",
            value: function() {
                if (this._activeChangeScripts && 0 !== this._activeChangeScripts.length) throw "Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event.";
                var t = this._parent.scene;
                t && this._setBelongScene(t), this._parent.activeInHierarchy && this.active && this._processActive();
            }
        }, {
            key: "_onRemoved",
            value: function() {
                if (this._activeChangeScripts && 0 !== this._activeChangeScripts.length) throw "Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.";
                this._parent.activeInHierarchy && this.active && this._processInActive(), this._parent.scene && this._setUnBelongScene();
            }
        }, {
            key: "_addComponentInstance",
            value: function(t) {
                this._components = this._components || [], this._components.push(t), t.owner = this, 
                t._onAdded(), this.activeInHierarchy && t._setActive(!0);
            }
        }, {
            key: "_destroyComponent",
            value: function(t) {
                if (this._components) for (var e = 0, i = this._components.length; e < i; e++) {
                    var n = this._components[e];
                    if (n === t) {
                        n._destroy(), this._components.splice(e, 1);
                        break;
                    }
                }
            }
        }, {
            key: "_destroyAllComponent",
            value: function() {
                if (this._components) {
                    for (var t = 0, e = this._components.length; t < e; t++) {
                        var i = this._components[t];
                        i && i._destroy();
                    }
                    this._components.length = 0;
                }
            }
        }, {
            key: "_cloneTo",
            value: function(t, e, i) {
                var n = t;
                if (this._components) for (var r = 0, a = this._components.length; r < a; r++) {
                    var s = n.addComponent(this._components[r].constructor);
                    this._components[r]._cloneTo(s);
                }
            }
        }, {
            key: "addComponentIntance",
            value: function(t) {
                if (t.owner) throw "Node:the component has belong to other node.";
                if (t.isSingleton && this.getComponent(t.constructor)) throw "Node:the component is singleton,can't add the second one.";
                return this._addComponentInstance(t), t;
            }
        }, {
            key: "addComponent",
            value: function(t) {
                var e = c.createByClass(t);
                if (!e) throw t.toString() + "组件不存在";
                if (e._destroyed = !1, e.isSingleton && this.getComponent(t)) throw "无法实例" + t + "组件，" + t + "组件已存在！";
                return this._addComponentInstance(e), e;
            }
        }, {
            key: "getComponent",
            value: function(t) {
                if (this._components) for (var e = 0, i = this._components.length; e < i; e++) {
                    var n = this._components[e];
                    if (n instanceof t) return n;
                }
                return null;
            }
        }, {
            key: "getComponents",
            value: function(t) {
                var e;
                if (this._components) for (var i = 0, n = this._components.length; i < n; i++) {
                    var r = this._components[i];
                    r instanceof t && (e = e || []).push(r);
                }
                return e;
            }
        }, {
            key: "numChildren",
            get: function() {
                return this._children.length;
            }
        }, {
            key: "parent",
            get: function() {
                return this._parent;
            }
        }, {
            key: "displayedInStage",
            get: function() {
                return this._getBit(Ae.DISPLAY) || this._setBitUp(Ae.DISPLAY), this._getBit(Ae.DISPLAYED_INSTAGE);
            }
        }, {
            key: "scene",
            get: function() {
                return this._scene;
            }
        }, {
            key: "active",
            get: function() {
                return !this._getBit(Ae.NOT_READY) && !this._getBit(Ae.NOT_ACTIVE);
            },
            set: function(t) {
                if (t = !!t, !this._getBit(Ae.NOT_ACTIVE) !== t) {
                    if (this._activeChangeScripts && 0 !== this._activeChangeScripts.length) throw t ? "Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event." : "Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.";
                    this._setBit(Ae.NOT_ACTIVE, !t), this._parent && this._parent.activeInHierarchy && (t ? this._processActive() : this._processInActive());
                }
            }
        }, {
            key: "activeInHierarchy",
            get: function() {
                return this._getBit(Ae.ACTIVE_INHIERARCHY);
            }
        }, {
            key: "timer",
            get: function() {
                return this.scene ? this.scene.timer : u.timer;
            }
        } ]), i;
    }(B);
    De.ARRAY_EMPTY = [], Me.regClass("laya.display.Node", De), Me.regClass("Laya.Node", De);
    var Be = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this))._x = 0, t._y = 0, t._width = 0, 
            t._height = 0, t._visible = !0, t._mouseState = 0, t._zOrder = 0, t._renderType = 0, 
            t._transform = null, t._tfChanged = !1, t._repaint = ge.REPAINT_NONE, t._texture = null, 
            t._style = Le.EMPTY, t._cacheStyle = Pe.EMPTY, t._boundStyle = null, t._graphics = null, 
            t.mouseThrough = !1, t.autoSize = !1, t.hitTestPrior = !1, t;
        }
        return (0, s.default)(n, [ {
            key: "destroy",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                (0, e.default)((0, r.default)(n.prototype), "destroy", this).call(this, t), this._style && this._style.recover(), 
                this._cacheStyle && this._cacheStyle.recover(), this._boundStyle && this._boundStyle.recover(), 
                this._style = null, this._cacheStyle = null, this._boundStyle = null, this._transform = null, 
                this._graphics && this._graphics.autoDestroy && this._graphics.destroy(), this._graphics = null, 
                this.texture = null;
            }
        }, {
            key: "updateZOrder",
            value: function() {
                st.updateOrder(this._children) && this.repaint();
            }
        }, {
            key: "_getBoundsStyle",
            value: function() {
                return this._boundStyle || (this._boundStyle = Ie.create()), this._boundStyle;
            }
        }, {
            key: "_setCustomRender",
            value: function() {}
        }, {
            key: "_setCacheAs",
            value: function(t) {}
        }, {
            key: "_checkCanvasEnable",
            value: function() {
                var t = this._cacheStyle.needEnableCanvasRender();
                this._getCacheStyle().enableCanvasRender = t, t ? (this._cacheStyle.needBitmapCache() ? this._cacheStyle.cacheAs = "bitmap" : this._cacheStyle.cacheAs = this._cacheStyle.userSetCache, 
                this._cacheStyle.reCache = !0, this._renderType |= ge.CANVAS) : (this._cacheStyle.cacheAs = "none", 
                this._cacheStyle.releaseContext(), this._renderType &= ~ge.CANVAS), this._setCacheAs(this._cacheStyle.cacheAs), 
                this._setRenderType(this._renderType);
            }
        }, {
            key: "reCache",
            value: function() {
                this._cacheStyle.reCache = !0, this._repaint |= ge.REPAINT_CACHE;
            }
        }, {
            key: "getRepaint",
            value: function() {
                return this._repaint;
            }
        }, {
            key: "_setX",
            value: function(t) {
                this._x = t;
            }
        }, {
            key: "_setY",
            value: function(t) {
                this._y = t;
            }
        }, {
            key: "_setWidth",
            value: function(t, e) {}
        }, {
            key: "_setHeight",
            value: function(t, e) {}
        }, {
            key: "set_width",
            value: function(t) {
                this._width !== t && (this._width = t, this._setWidth(this.texture, t), this._setTranformChange());
            }
        }, {
            key: "get_width",
            value: function() {
                return this.autoSize ? this.texture ? this.texture.width : this._graphics || 0 !== this._children.length ? this.getSelfBounds().width : 0 : this._width || (this.texture ? this.texture.width : 0);
            }
        }, {
            key: "set_height",
            value: function(t) {
                this._height !== t && (this._height = t, this._setHeight(this.texture, t), this._setTranformChange());
            }
        }, {
            key: "get_height",
            value: function() {
                return this.autoSize ? this.texture ? this.texture.height : this._graphics || 0 !== this._children.length ? this.getSelfBounds().height : 0 : this._height || (this.texture ? this.texture.height : 0);
            }
        }, {
            key: "setSelfBounds",
            value: function(t) {
                this._getBoundsStyle().userBounds = t;
            }
        }, {
            key: "getBounds",
            value: function() {
                return this._getBoundsStyle().bounds = R._getWrapRec(this._boundPointsToParent());
            }
        }, {
            key: "getSelfBounds",
            value: function() {
                return this._boundStyle && this._boundStyle.userBounds ? this._boundStyle.userBounds : this._graphics || 0 !== this._children.length || this._texture ? this._getBoundsStyle().bounds = R._getWrapRec(this._getBoundPointsM(!1)) : R.TEMP.setTo(0, 0, this.width, this.height);
            }
        }, {
            key: "_boundPointsToParent",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = 0, i = 0;
                this._style && (e = this.pivotX, i = this.pivotY, t = t || 0 !== this._style.rotation, 
                this._style.scrollRect && (e += this._style.scrollRect.x, i += this._style.scrollRect.y));
                var n = this._getBoundPointsM(t);
                if (!n || n.length < 1) return n;
                if (8 != n.length && (n = t ? yt.scanPList(n) : R._getWrapRec(n, R.TEMP)._getBoundPoints()), 
                !this.transform) return st.transPointList(n, this._x - e, this._y - i), n;
                var r, a = E.TEMP, s = n.length;
                for (r = 0; r < s; r += 2) a.x = n[r], a.y = n[r + 1], this.toParentPoint(a), n[r] = a.x, 
                n[r + 1] = a.y;
                return n;
            }
        }, {
            key: "getGraphicBounds",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return this._graphics ? this._graphics.getBounds(t) : R.TEMP.setTo(0, 0, 0, 0);
            }
        }, {
            key: "_getBoundPointsM",
            value: function() {
                var t, e, i, r, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                if (this._boundStyle && this._boundStyle.userBounds) return this._boundStyle.userBounds._getBoundPoints();
                if (this._boundStyle || this._getBoundsStyle(), this._boundStyle.temBM || (this._boundStyle.temBM = []), 
                this._style.scrollRect) {
                    var s = st.clearArray(this._boundStyle.temBM), o = R.TEMP;
                    return o.copyFrom(this._style.scrollRect), st.concatArray(s, o._getBoundPoints()), 
                    s;
                }
                t = this._graphics ? this._graphics.getBoundPoints() : st.clearArray(this._boundStyle.temBM), 
                this._texture && ((o = R.TEMP).setTo(0, 0, this.width || this._texture.width, this.height || this._texture.height), 
                st.concatArray(t, o._getBoundPoints()));
                for (var l = 0, h = (r = this._children).length; l < h; l++) (e = r[l]) instanceof n && !0 === e._visible && (i = e._boundPointsToParent(a)) && (t = t ? st.concatArray(t, i) : i);
                return t;
            }
        }, {
            key: "_getCacheStyle",
            value: function() {
                return this._cacheStyle === Pe.EMPTY && (this._cacheStyle = Pe.create()), this._cacheStyle;
            }
        }, {
            key: "getStyle",
            value: function() {
                return this._style === Le.EMPTY && (this._style = Le.create()), this._style;
            }
        }, {
            key: "setStyle",
            value: function(t) {
                this._style = t;
            }
        }, {
            key: "_setScaleX",
            value: function(t) {
                this._style.scaleX = t;
            }
        }, {
            key: "_setScaleY",
            value: function(t) {
                this._style.scaleY = t;
            }
        }, {
            key: "set_scaleX",
            value: function(t) {
                this.getStyle().scaleX !== t && (this._setScaleX(t), this._setTranformChange());
            }
        }, {
            key: "get_scaleX",
            value: function() {
                return this._style.scaleX;
            }
        }, {
            key: "set_scaleY",
            value: function(t) {
                this.getStyle().scaleY !== t && (this._setScaleY(t), this._setTranformChange());
            }
        }, {
            key: "get_scaleY",
            value: function() {
                return this._style.scaleY;
            }
        }, {
            key: "_setRotation",
            value: function(t) {
                this._style.rotation = t;
            }
        }, {
            key: "_setSkewX",
            value: function(t) {
                this._style.skewX = t;
            }
        }, {
            key: "_setSkewY",
            value: function(t) {
                this._style.skewY = t;
            }
        }, {
            key: "_createTransform",
            value: function() {
                return k.create();
            }
        }, {
            key: "_adjustTransform",
            value: function() {
                this._tfChanged = !1;
                var t = this._style, e = t.scaleX, i = t.scaleY, n = t.skewX, r = t.skewY, a = t.rotation, s = this._transform || (this._transform = this._createTransform());
                if (a || 1 !== e || 1 !== i || 0 !== n || 0 !== r) {
                    s._bTransform = !0;
                    var o = .0174532922222222 * (a - n), l = .0174532922222222 * (a + r), h = Math.cos(l), u = Math.sin(l), c = Math.sin(o), _ = Math.cos(o);
                    s.a = e * h, s.b = e * u, s.c = -i * c, s.d = i * _, s.tx = s.ty = 0;
                } else s.identity(), this._renderType &= ~ge.TRANSFORM, this._setRenderType(this._renderType);
                return s;
            }
        }, {
            key: "_setTransform",
            value: function(t) {}
        }, {
            key: "get_transform",
            value: function() {
                return this._tfChanged ? this._adjustTransform() : this._transform;
            }
        }, {
            key: "set_transform",
            value: function(t) {
                this._tfChanged = !1;
                var e = this._transform || (this._transform = this._createTransform());
                t.copyTo(e), this._setTransform(e), t && (this._x = e.tx, this._y = e.ty, e.tx = e.ty = 0), 
                t ? this._renderType |= ge.TRANSFORM : this._renderType &= ~ge.TRANSFORM, this._setRenderType(this._renderType), 
                this.parentRepaint();
            }
        }, {
            key: "_setPivotX",
            value: function(t) {
                this.getStyle().pivotX = t;
            }
        }, {
            key: "_getPivotX",
            value: function() {
                return this._style.pivotX;
            }
        }, {
            key: "_setPivotY",
            value: function(t) {
                this.getStyle().pivotY = t;
            }
        }, {
            key: "_getPivotY",
            value: function() {
                return this._style.pivotY;
            }
        }, {
            key: "_setAlpha",
            value: function(t) {
                this._style.alpha !== t && (this.getStyle().alpha = t, 1 !== t ? this._renderType |= ge.ALPHA : this._renderType &= ~ge.ALPHA, 
                this._setRenderType(this._renderType), this.parentRepaint());
            }
        }, {
            key: "_getAlpha",
            value: function() {
                return this._style.alpha;
            }
        }, {
            key: "get_visible",
            value: function() {
                return this._visible;
            }
        }, {
            key: "set_visible",
            value: function(t) {
                this._visible !== t && (this._visible = t, this.parentRepaint(ge.REPAINT_ALL));
            }
        }, {
            key: "_setBlendMode",
            value: function(t) {}
        }, {
            key: "_setGraphics",
            value: function(t) {}
        }, {
            key: "_setGraphicsCallBack",
            value: function() {}
        }, {
            key: "_setScrollRect",
            value: function(t) {}
        }, {
            key: "pos",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                if (this._x !== t || this._y !== e) {
                    if (this.destroyed) return this;
                    if (i) {
                        this._setX(t), this._setY(e), this.parentRepaint(ge.REPAINT_CACHE);
                        var n = this._cacheStyle.maskParent;
                        n && n.repaint(ge.REPAINT_CACHE);
                    } else this.x = t, this.y = e;
                }
                return this;
            }
        }, {
            key: "pivot",
            value: function(t, e) {
                return this.pivotX = t, this.pivotY = e, this;
            }
        }, {
            key: "size",
            value: function(t, e) {
                return this.width = t, this.height = e, this;
            }
        }, {
            key: "scale",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = this.getStyle();
                if (n.scaleX != t || n.scaleY != e) {
                    if (this.destroyed) return this;
                    i ? (this._setScaleX(t), this._setScaleY(e), this._setTranformChange()) : (this.scaleX = t, 
                    this.scaleY = e);
                }
                return this;
            }
        }, {
            key: "skew",
            value: function(t, e) {
                return this.skewX = t, this.skewY = e, this;
            }
        }, {
            key: "render",
            value: function(t, e, i) {
                be.renders[this._renderType]._fun(this, t, e + this._x, i + this._y), this._repaint = 0;
            }
        }, {
            key: "drawToCanvas",
            value: function(t, e, i, r) {
                return n.drawToCanvas(this, this._renderType, t, e, i, r);
            }
        }, {
            key: "drawToTexture",
            value: function(t, e, i, r) {
                var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                return n.drawToTexture(this, this._renderType, t, e, i, r, a);
            }
        }, {
            key: "drawToTexture3D",
            value: function(t, e, i) {
                throw "not implement";
            }
        }, {
            key: "customRender",
            value: function(t, e, i) {
                this._repaint = ge.REPAINT_ALL;
            }
        }, {
            key: "_applyFilters",
            value: function() {}
        }, {
            key: "_setColorFilter",
            value: function(t) {}
        }, {
            key: "_isHaveGlowFilter",
            value: function() {
                var t, e;
                if (this.filters) for (t = 0; t < this.filters.length; t++) if (this.filters[t].type == at.GLOW) return !0;
                for (t = 0, e = this._children.length; t < e; t++) if (this._children[t]._isHaveGlowFilter()) return !0;
                return !1;
            }
        }, {
            key: "localToGlobal",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                !0 === e && (t = new E(t.x, t.y));
                var n = this;
                for (i = i || u.stage; n && !n.destroyed && n != i; ) t = n.toParentPoint(t), n = n.parent;
                return t;
            }
        }, {
            key: "globalToLocal",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                e && (t = new E(t.x, t.y));
                var n = this, r = [];
                for (i = i || u.stage; n && !n.destroyed && n != i; ) r.push(n), n = n.parent;
                for (var a = r.length - 1; a >= 0; ) t = (n = r[a]).fromParentPoint(t), a--;
                return t;
            }
        }, {
            key: "toParentPoint",
            value: function(t) {
                if (!t) return t;
                t.x -= this.pivotX, t.y -= this.pivotY, this.transform && this._transform.transformPoint(t), 
                t.x += this._x, t.y += this._y;
                var e = this._style.scrollRect;
                return e && (t.x -= e.x, t.y -= e.y), t;
            }
        }, {
            key: "fromParentPoint",
            value: function(t) {
                if (!t) return t;
                t.x -= this._x, t.y -= this._y;
                var e = this._style.scrollRect;
                return e && (t.x += e.x, t.y += e.y), this.transform && this._transform.invertTransformPoint(t), 
                t.x += this.pivotX, t.y += this.pivotY, t;
            }
        }, {
            key: "fromStagePoint",
            value: function(t) {
                return t;
            }
        }, {
            key: "on",
            value: function(t, i, a) {
                var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return 1 !== this._mouseState && this.isMouseEvent(t) ? (this.mouseEnabled = !0, 
                this._setBit(Ae.HAS_MOUSE, !0), this._parent && this._onDisplay(), this._createListener(t, i, a, s, !1)) : (0, 
                e.default)((0, r.default)(n.prototype), "on", this).call(this, t, i, a, s);
            }
        }, {
            key: "once",
            value: function(t, i, a) {
                var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                return 1 !== this._mouseState && this.isMouseEvent(t) ? (this.mouseEnabled = !0, 
                this._setBit(Ae.HAS_MOUSE, !0), this._parent && this._onDisplay(), this._createListener(t, i, a, s, !0)) : (0, 
                e.default)((0, r.default)(n.prototype), "once", this).call(this, t, i, a, s);
            }
        }, {
            key: "_onDisplay",
            value: function(t) {
                if (1 !== this._mouseState) {
                    var e = this;
                    for (e = e.parent; e && 1 !== e._mouseState && !e._getBit(Ae.HAS_MOUSE); ) e.mouseEnabled = !0, 
                    e._setBit(Ae.HAS_MOUSE, !0), e = e.parent;
                }
            }
        }, {
            key: "_setParent",
            value: function(t) {
                (0, e.default)((0, r.default)(n.prototype), "_setParent", this).call(this, t), t && this._getBit(Ae.HAS_MOUSE) && this._onDisplay();
            }
        }, {
            key: "loadImage",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                if (t) {
                    var i = u.Loader.textureMap[O.formatURL(t)];
                    i || ((i = new te()).load(t), u.Loader.cacheTexture(t, i)), this.texture = i, i.getIsReady() ? n.call(this) : i.once(Jt.READY, this, n);
                } else this.texture = null, n.call(this);
                function n() {
                    this.repaint(ge.REPAINT_ALL), e && e.run();
                }
                return this;
            }
        }, {
            key: "repaint",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ge.REPAINT_CACHE;
                this._repaint & t || (this._repaint |= t, this.parentRepaint(t)), this._cacheStyle && this._cacheStyle.maskParent && this._cacheStyle.maskParent.repaint(t);
            }
        }, {
            key: "_needRepaint",
            value: function() {
                return this._repaint & ge.REPAINT_CACHE && this._cacheStyle.enableCanvasRender && this._cacheStyle.reCache;
            }
        }, {
            key: "_childChanged",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                this._children.length ? this._renderType |= ge.CHILDS : this._renderType &= ~ge.CHILDS, 
                this._setRenderType(this._renderType), t && this._getBit(Ae.HAS_ZORDER) && u.systemTimer.callLater(this, this.updateZOrder), 
                this.repaint(ge.REPAINT_ALL);
            }
        }, {
            key: "parentRepaint",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ge.REPAINT_CACHE, e = this._parent;
                !e || e._repaint & t || (e._repaint |= t, e.parentRepaint(t));
            }
        }, {
            key: "_setMask",
            value: function(t) {}
        }, {
            key: "startDrag",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 300, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : .92;
                this._style.dragging || (this.getStyle().dragging = new u.Dragging()), this._style.dragging.start(this, t, e, i, n, r, a, s);
            }
        }, {
            key: "stopDrag",
            value: function() {
                this._style.dragging && this._style.dragging.stop();
            }
        }, {
            key: "_setDisplay",
            value: function(t) {
                t || this._cacheStyle && (this._cacheStyle.releaseContext(), this._cacheStyle.releaseFilterCache(), 
                this._cacheStyle.hasGlowFilter && (this._cacheStyle.hasGlowFilter = !1)), (0, e.default)((0, 
                r.default)(n.prototype), "_setDisplay", this).call(this, t);
            }
        }, {
            key: "hitTestPoint",
            value: function(t, e) {
                var i = this.globalToLocal(E.TEMP.setTo(t, e));
                return t = i.x, e = i.y, (this._style.hitArea ? this._style.hitArea : this._width > 0 && this._height > 0 ? R.TEMP.setTo(0, 0, this._width, this._height) : this.getSelfBounds()).contains(t, e);
            }
        }, {
            key: "getMousePoint",
            value: function() {
                return this.globalToLocal(E.TEMP.setTo(u.stage.mouseX, u.stage.mouseY));
            }
        }, {
            key: "_setTexture",
            value: function(t) {}
        }, {
            key: "_setRenderType",
            value: function(t) {}
        }, {
            key: "_setTranformChange",
            value: function() {
                this._tfChanged = !0, this._renderType |= ge.TRANSFORM, this.parentRepaint(ge.REPAINT_CACHE);
            }
        }, {
            key: "_setBgStyleColor",
            value: function(t, e, i, n, r) {}
        }, {
            key: "_setBorderStyleColor",
            value: function(t, e, i, n, r, a) {}
        }, {
            key: "captureMouseEvent",
            value: function(t) {
                u.MouseManager.instance.setCapture(this, t);
            }
        }, {
            key: "releaseMouseEvent",
            value: function() {
                u.MouseManager.instance.releaseCapture();
            }
        }, {
            key: "customRenderEnable",
            set: function(t) {
                t && (this._renderType |= ge.CUSTOM, this._setRenderType(this._renderType), this._setCustomRender());
            }
        }, {
            key: "cacheAs",
            get: function() {
                return this._cacheStyle.cacheAs;
            },
            set: function(t) {
                t !== this._cacheStyle.userSetCache && (this.mask && "normal" === t || (this._setCacheAs(t), 
                this._getCacheStyle().userSetCache = t, this._checkCanvasEnable(), this.repaint()));
            }
        }, {
            key: "staticCache",
            get: function() {
                return this._cacheStyle.staticCache;
            },
            set: function(t) {
                this._getCacheStyle().staticCache = t, t || this.reCache();
            }
        }, {
            key: "x",
            get: function() {
                return this._x;
            },
            set: function(t) {
                if (!this.destroyed && this._x !== t) {
                    this._setX(t), this.parentRepaint(ge.REPAINT_CACHE);
                    var e = this._cacheStyle.maskParent;
                    e && e.repaint(ge.REPAINT_CACHE);
                }
            }
        }, {
            key: "y",
            get: function() {
                return this._y;
            },
            set: function(t) {
                if (!this.destroyed && this._y !== t) {
                    this._setY(t), this.parentRepaint(ge.REPAINT_CACHE);
                    var e = this._cacheStyle.maskParent;
                    e && e.repaint(ge.REPAINT_CACHE);
                }
            }
        }, {
            key: "width",
            get: function() {
                return this.get_width();
            },
            set: function(t) {
                this.set_width(t);
            }
        }, {
            key: "height",
            get: function() {
                return this.get_height();
            },
            set: function(t) {
                this.set_height(t);
            }
        }, {
            key: "displayWidth",
            get: function() {
                return this.width * this.scaleX;
            }
        }, {
            key: "displayHeight",
            get: function() {
                return this.height * this.scaleY;
            }
        }, {
            key: "scaleX",
            get: function() {
                return this._style.scaleX;
            },
            set: function(t) {
                this.set_scaleX(t);
            }
        }, {
            key: "scaleY",
            get: function() {
                return this._style.scaleY;
            },
            set: function(t) {
                this.set_scaleY(t);
            }
        }, {
            key: "rotation",
            get: function() {
                return this._style.rotation;
            },
            set: function(t) {
                this.getStyle().rotation !== t && (this._setRotation(t), this._setTranformChange());
            }
        }, {
            key: "skewX",
            get: function() {
                return this._style.skewX;
            },
            set: function(t) {
                this.getStyle().skewX !== t && (this._setSkewX(t), this._setTranformChange());
            }
        }, {
            key: "skewY",
            get: function() {
                return this._style.skewY;
            },
            set: function(t) {
                this.getStyle().skewY !== t && (this._setSkewY(t), this._setTranformChange());
            }
        }, {
            key: "transform",
            get: function() {
                return this._tfChanged ? this._adjustTransform() : this._transform;
            },
            set: function(t) {
                this.set_transform(t);
            }
        }, {
            key: "pivotX",
            get: function() {
                return this._getPivotX();
            },
            set: function(t) {
                this._setPivotX(t), this.repaint();
            }
        }, {
            key: "pivotY",
            get: function() {
                return this._getPivotY();
            },
            set: function(t) {
                this._setPivotY(t), this.repaint();
            }
        }, {
            key: "alpha",
            get: function() {
                return this._getAlpha();
            },
            set: function(t) {
                t = t < 0 ? 0 : t > 1 ? 1 : t, this._setAlpha(t);
            }
        }, {
            key: "visible",
            get: function() {
                return this.get_visible();
            },
            set: function(t) {
                this.set_visible(t);
            }
        }, {
            key: "blendMode",
            get: function() {
                return this._style.blendMode;
            },
            set: function(t) {
                this._setBlendMode(t), this.getStyle().blendMode = t, t && "source-over" != t ? this._renderType |= ge.BLEND : this._renderType &= ~ge.BLEND, 
                this._setRenderType(this._renderType), this.parentRepaint();
            }
        }, {
            key: "graphics",
            get: function() {
                return this._graphics || (this.graphics = new Re(), this._graphics.autoDestroy = !0), 
                this._graphics;
            },
            set: function(t) {
                this._graphics && (this._graphics._sp = null), this._graphics = t, t ? (this._setGraphics(t), 
                this._renderType |= ge.GRAPHICS, t._sp = this) : this._renderType &= ~ge.GRAPHICS, 
                this._setRenderType(this._renderType), this.repaint();
            }
        }, {
            key: "scrollRect",
            get: function() {
                return this._style.scrollRect;
            },
            set: function(t) {
                this.getStyle().scrollRect = t, this._setScrollRect(t), this.repaint(), t ? this._renderType |= ge.CLIP : this._renderType &= ~ge.CLIP, 
                this._setRenderType(this._renderType);
            }
        }, {
            key: "filters",
            get: function() {
                return this._cacheStyle.filters;
            },
            set: function(t) {
                t && 0 === t.length && (t = null), this._cacheStyle.filters != t && (this._getCacheStyle().filters = t ? t.slice() : null, 
                t && t.length ? (this._setColorFilter(t[0]), this._renderType |= ge.FILTERS) : (this._setColorFilter(null), 
                this._renderType &= ~ge.FILTERS), this._setRenderType(this._renderType), t && t.length > 0 ? (this._getBit(Ae.DISPLAY) || this._setBitUp(Ae.DISPLAY), 
                1 == t.length && t[0] instanceof lt || (this._getCacheStyle().cacheForFilters = !0, 
                this._checkCanvasEnable())) : this._cacheStyle.cacheForFilters && (this._cacheStyle.cacheForFilters = !1, 
                this._checkCanvasEnable()), this._getCacheStyle().hasGlowFilter = this._isHaveGlowFilter(), 
                this.repaint());
            }
        }, {
            key: "stage",
            get: function() {
                return u.stage;
            }
        }, {
            key: "hitArea",
            get: function() {
                return this._style.hitArea;
            },
            set: function(t) {
                this.getStyle().hitArea = t;
            }
        }, {
            key: "mask",
            get: function() {
                return this._cacheStyle.mask;
            },
            set: function(t) {
                t && this.mask && this.mask._cacheStyle.maskParent || (this._getCacheStyle().mask = t, 
                this._setMask(t), this._checkCanvasEnable(), t ? t._getCacheStyle().maskParent = this : this.mask && (this.mask._getCacheStyle().maskParent = null), 
                this._renderType |= ge.MASK, this._setRenderType(this._renderType), this.parentRepaint(ge.REPAINT_ALL));
            }
        }, {
            key: "mouseEnabled",
            get: function() {
                return this._mouseState > 1;
            },
            set: function(t) {
                this._mouseState = t ? 2 : 1;
            }
        }, {
            key: "globalScaleX",
            get: function() {
                for (var t = 1, e = this; e && e !== u.stage; ) t *= e.scaleX, e = e.parent;
                return t;
            }
        }, {
            key: "globalRotation",
            get: function() {
                for (var t = 0, e = this; e && e !== u.stage; ) t += e.rotation, e = e.parent;
                return t;
            }
        }, {
            key: "globalScaleY",
            get: function() {
                for (var t = 1, e = this; e && e !== u.stage; ) t *= e.scaleY, e = e.parent;
                return t;
            }
        }, {
            key: "mouseX",
            get: function() {
                return this.getMousePoint().x;
            }
        }, {
            key: "mouseY",
            get: function() {
                return this.getMousePoint().y;
            }
        }, {
            key: "zOrder",
            get: function() {
                return this._zOrder;
            },
            set: function(t) {
                this._zOrder != t && (this._zOrder = t, this._parent && (t && this._parent._setBit(Ae.HAS_ZORDER, !0), 
                u.systemTimer.callLater(this._parent, this.updateZOrder)));
            }
        }, {
            key: "texture",
            get: function() {
                return this._texture;
            },
            set: function(t) {
                "string" == typeof t ? this.loadImage(t) : this._texture != t && (this._texture && this._texture._removeReference(), 
                this._texture = t, t && t._addReference(), this._setTexture(t), this._setWidth(this._texture, this.width), 
                this._setHeight(this._texture, this.height), t ? this._renderType |= ge.TEXTURE : this._renderType &= ~ge.TEXTURE, 
                this._setRenderType(this._renderType), this.repaint());
            }
        }, {
            key: "viewport",
            get: function() {
                return this._style.viewport;
            },
            set: function(t) {
                var e;
                "string" == typeof t && (e = t.split(",")).length > 3 && (t = new R(parseFloat(e[0]), parseFloat(e[1]), parseFloat(e[2]), parseFloat(e[3]))), 
                this.getStyle().viewport = t;
            }
        }, {
            key: "drawCallOptimize",
            set: function(t) {
                this._setBit(Ae.DRAWCALL_OPTIMIZE, t);
            },
            get: function() {
                return this._getBit(Ae.DRAWCALL_OPTIMIZE);
            }
        } ], [ {
            key: "drawToCanvas",
            value: function(t, e, i, n, r, a) {
                r -= t.x, a -= t.y, r |= 0, a |= 0, i |= 0, n |= 0;
                var s = new he();
                s.size(i, n), s.asBitmap = !0, s._targets.start(), s._targets.clear(0, 0, 0, 0), 
                be.renders[e]._fun(t, s, r, a), s.flush(), s._targets.end(), s._targets.restore();
                var o = s._targets.getData(0, 0, i, n);
                s.destroy();
                for (var l = new ImageData(i, n), h = 4 * i, u = l.data, c = n - 1, _ = c * h, d = 0; c >= 0; c--) u.set(o.subarray(d, d + h), _), 
                _ -= h, d += h;
                var f = new Se(!0);
                return f.size(i, n), f.getContext("2d").putImageData(l, 0, 0), f;
            }
        }, {
            key: "drawToTexture",
            value: function(t, e, i, r, a, s) {
                var o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
                n.drawtocanvCtx || (n.drawtocanvCtx = new he()), a -= t.x, s -= t.y, a |= 0, s |= 0, 
                i |= 0, r |= 0;
                var l = o ? n.drawtocanvCtx : new he();
                if (l.clear(), l.size(i, r), o ? l._targets = o : l.asBitmap = !0, l._targets && (l._targets.start(), 
                l._targets.clear(0, 0, 0, 0), be.renders[e]._fun(t, l, a, s), l.flush(), l._targets.end(), 
                l._targets.restore()), !o) {
                    var h = new te(l._targets, te.INV_UV);
                    return l.destroy(!0), h;
                }
                return t._repaint = 0, o;
            }
        }, {
            key: "fromImage",
            value: function(t) {
                return new n().loadImage(t);
            }
        } ]), n;
    }(De);
    Me.regClass("laya.display.Sprite", Be), Me.regClass("Laya.Sprite", Be);
    var Fe = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.apply(this, arguments)).italic = !1, t;
        }
        return (0, s.default)(n, [ {
            key: "reset",
            value: function() {
                return (0, e.default)((0, r.default)(n.prototype), "reset", this).call(this), this.italic = !1, 
                this.align = "left", this.wordWrap = !1, this.leading = 0, this.padding = [ 0, 0, 0, 0 ], 
                this.bgColor = null, this.borderColor = null, this.asPassword = !1, this.stroke = 0, 
                this.strokeColor = "#000000", this.bold = !1, this.underline = !1, this.underlineColor = null, 
                this.currBitmapFont = null, this;
            }
        }, {
            key: "recover",
            value: function() {
                this !== n.EMPTY && c.recover("TextStyle", this.reset());
            }
        }, {
            key: "render",
            value: function(t, e, i, n) {
                (this.bgColor || this.borderColor) && e.drawRect(i - this.pivotX, n - this.pivotY, t.width, t.height, this.bgColor, this.borderColor, 1);
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("TextStyle", n);
            }
        } ]), n;
    }(Le);
    Fe.EMPTY = new Fe();
    var Oe = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this))._textWidth = 0, t._textHeight = 0, 
            t._lines = [], t._lineWidths = [], t._startX = 0, t._startY = 0, t._charSize = {}, 
            t._valign = "top", t._fontSize = n.defaultFontSize, t._font = n.defaultFont, t._color = "#000000", 
            t._singleCharRender = !1, t.overflow = n.VISIBLE, t._style = Fe.EMPTY, t;
        }
        return (0, s.default)(n, [ {
            key: "getStyle",
            value: function() {
                return this._style === Fe.EMPTY && (this._style = Fe.create()), this._style;
            }
        }, {
            key: "_getTextStyle",
            value: function() {
                return this._style === Fe.EMPTY && (this._style = Fe.create()), this._style;
            }
        }, {
            key: "destroy",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                (0, e.default)((0, r.default)(n.prototype), "destroy", this).call(this, t), this._clipPoint = null, 
                this._lines = null, this._lineWidths = null, this._words && this._words.forEach(function(t) {
                    t.cleanCache();
                }), this._words = null, this._charSize = null;
            }
        }, {
            key: "_getBoundPointsM",
            value: function() {
                var t = R.TEMP;
                return t.setTo(0, 0, this.width, this.height), t._getBoundPoints();
            }
        }, {
            key: "getGraphicBounds",
            value: function() {
                var t = R.TEMP;
                return t.setTo(0, 0, this.width, this.height), t;
            }
        }, {
            key: "_getCSSStyle",
            value: function() {
                return this._style;
            }
        }, {
            key: "get_text",
            value: function() {
                return this._text || "";
            }
        }, {
            key: "set_text",
            value: function(t) {
                this._text !== t && (this.lang(t + ""), this.isChanged = !0, this.event(Jt.CHANGE), 
                this.borderColor && this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1));
            }
        }, {
            key: "lang",
            value: function(t) {
                if (t = n.langPacks && n.langPacks[t] ? n.langPacks[t] : t, arguments.length < 2) this._text = t; else {
                    for (var e = 0, i = arguments.length; e < i; e++) t = t.replace("{" + e + "}", arguments[e + 1]);
                    this._text = t;
                }
            }
        }, {
            key: "get_color",
            value: function() {
                return this._color;
            }
        }, {
            key: "set_color",
            value: function(t) {
                this._color != t && (this._color = t, !this._isChanged && this._graphics ? this._graphics.replaceTextColor(this.color) : this.isChanged = !0);
            }
        }, {
            key: "set_bgColor",
            value: function(t) {
                this._getTextStyle().bgColor = t, this._renderType |= ge.STYLE, this._setBgStyleColor(0, 0, this.width, this.height, t), 
                this._setRenderType(this._renderType), this.isChanged = !0;
            }
        }, {
            key: "get_bgColor",
            value: function() {
                return this._style.bgColor;
            }
        }, {
            key: "_getContextFont",
            value: function() {
                return (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + this.fontSize + "px " + (u.Browser.onIPhone && n.fontFamilyMap[this.font] || this.font);
            }
        }, {
            key: "_isPassWordMode",
            value: function() {
                var t = this._style.asPassword;
                return "prompt" in this && this.prompt == this._text && (t = !1), t;
            }
        }, {
            key: "_getPassWordTxt",
            value: function(t) {
                var e;
                e = "";
                for (var i = t.length; i > 0; i--) e += "●";
                return e;
            }
        }, {
            key: "_renderText",
            value: function() {
                var t = this.padding, e = this._lines.length;
                this.overflow != n.VISIBLE && (e = Math.min(e, Math.floor((this.height - t[0] - t[2]) / (this.leading + this._charSize.height)) + 1));
                var i = this.scrollY / (this._charSize.height + this.leading) | 0, r = this.graphics;
                r.clear(!0);
                var a = this._getContextFont();
                u.Browser.context.font = a;
                var s = t[3], o = "left", l = this._lines, h = this.leading + this._charSize.height, c = this._style.currBitmapFont;
                c && (h = this.leading + c.getMaxHeight());
                var _ = t[0];
                !c && this._width > 0 && this._textWidth <= this._width && ("right" == this.align ? (o = "right", 
                s = this._width - t[1]) : "center" == this.align && (o = "center", s = .5 * this._width + t[3] - t[1]));
                var d, f, v = 1;
                if (c && c.autoScaleSize && (v = c.fontSize / this.fontSize), this._height > 0) {
                    var p = this._textHeight > this._height ? "top" : this.valign;
                    "middle" === p ? _ = .5 * (this._height - e / v * h) + t[0] - t[2] : "bottom" === p && (_ = this._height - e / v * h - t[2]);
                }
                this._clipPoint && (r.save(), c && c.autoScaleSize ? (d = this._width ? this._width - t[3] - t[1] : this._textWidth, 
                f = this._height ? this._height - t[0] - t[2] : this._textHeight, d *= v, f *= v, 
                r.clipRect(t[3], t[0], d, f)) : r.clipRect(t[3], t[0], this._width ? this._width - t[3] - t[1] : this._textWidth, this._height ? this._height - t[0] - t[2] : this._textHeight), 
                this.repaint());
                var y = this._style, g = y.asPassword;
                "prompt" in this && this.prompt == this._text && (g = !1);
                for (var m = 0, T = 0, x = Math.min(this._lines.length, e + i) || 1, k = i; k < x; k++) {
                    var E, R = l[k];
                    if (g) for (var A = (R = "").length; A > 0; A--) R += "●";
                    if (null == R && (R = ""), m = s - (this._clipPoint ? this._clipPoint.x : 0), T = _ + h * k - (this._clipPoint ? this._clipPoint.y : 0), 
                    this.underline && this._drawUnderline(o, m, T, k), c) {
                        var C = this.width;
                        c.autoScaleSize && (C = this.width * v, m *= v, T *= v), c._drawText(R, this, m, T, this.align, C);
                    } else this._words || (this._words = []), this._words.length > k - i ? E = this._words[k - i] : (E = new ie(), 
                    this._words.push(E)), E.setText(R), E.splitRender = this._singleCharRender, y.stroke ? r.fillBorderText(E, m, T, a, this.color, o, y.stroke, y.strokeColor) : r.fillText(E, m, T, a, this.color, o);
                }
                if (c && c.autoScaleSize) {
                    var b = 1 / v;
                    this.scale(b, b);
                }
                this._clipPoint && r.restore(), this._startX = s, this._startY = _;
            }
        }, {
            key: "_drawUnderline",
            value: function(t, e, i, n) {
                var r = this._lineWidths[n];
                switch (t) {
                  case "center":
                    e -= r / 2;
                    break;

                  case "right":
                    e -= r;
                }
                i += this._charSize.height, this._graphics.drawLine(e, i, e + r, i, this.underlineColor || this.color, 1);
            }
        }, {
            key: "typeset",
            value: function() {
                if (this._isChanged = !1, !this._text) return this._clipPoint = null, this._textWidth = this._textHeight = 0, 
                void this.graphics.clear(!0);
                u.Render.isConchApp ? window.conchTextCanvas.font = this._getContextFont() : u.Browser.context.font = this._getContextFont(), 
                this._lines.length = 0, this._lineWidths.length = 0, this._isPassWordMode() ? this._parseLines(this._getPassWordTxt(this._text)) : this._parseLines(this._text), 
                this._evalTextSize(), this._checkEnabledViewportOrNot() ? this._clipPoint || (this._clipPoint = new E(0, 0)) : this._clipPoint = null, 
                this._renderText();
            }
        }, {
            key: "_evalTextSize",
            value: function() {
                var t, e;
                t = Math.max.apply(this, this._lineWidths);
                var i = this._style.currBitmapFont;
                if (i) {
                    var n = i.getMaxHeight();
                    i.autoScaleSize && (n = this.fontSize), e = this._lines.length * (n + this.leading) + this.padding[0] + this.padding[2];
                } else e = this._lines.length * (this._charSize.height + this.leading) + this.padding[0] + this.padding[2], 
                this._lines.length && (e -= this.leading);
                t == this._textWidth && e == this._textHeight || (this._textWidth = t, this._textHeight = e);
            }
        }, {
            key: "_checkEnabledViewportOrNot",
            value: function() {
                return this.overflow == n.SCROLL && (this._width > 0 && this._textWidth > this._width || this._height > 0 && this._textHeight > this._height);
            }
        }, {
            key: "changeText",
            value: function(t) {
                this._text !== t && (this.lang(t + ""), this._graphics && this._graphics.replaceText(this._text) || this.typeset());
            }
        }, {
            key: "_parseLines",
            value: function(t) {
                var e = this.wordWrap || this.overflow == n.HIDDEN;
                if (e) var i = this._getWordWrapWidth();
                var r = this._style.currBitmapFont;
                if (r) this._charSize.width = r.getMaxWidth(), this._charSize.height = r.getMaxHeight(); else {
                    var a = null;
                    (a = u.Render.isConchApp ? window.conchTextCanvas.measureText(n._testWord) : u.Browser.context.measureText(n._testWord)) || (a = {
                        width: 100
                    }), this._charSize.width = a.width, this._charSize.height = a.height || this.fontSize;
                }
                for (var s = t.replace(/\r\n/g, "\n").split("\n"), o = 0, l = s.length; o < l; o++) {
                    var h = s[o];
                    e ? this._parseLine(h, i) : (this._lineWidths.push(this._getTextWidth(h)), this._lines.push(h));
                }
            }
        }, {
            key: "_parseLine",
            value: function(t, e) {
                var i = this._lines, r = 0, a = 0, s = 0, o = 0;
                if ((a = this._getTextWidth(t)) <= e) return i.push(t), void this._lineWidths.push(a);
                a = this._charSize.width, 0 == (r = Math.floor(e / a)) && (r = 1), s = a = this._getTextWidth(t.substring(0, r));
                for (var l = r, h = t.length; l < h; l++) if ((s += a = this._getTextWidth(t.charAt(l))) > e) if (this.wordWrap) {
                    var u = t.substring(o, l);
                    if (u.charCodeAt(u.length - 1) < 255) {
                        var c = /(?:\w|-)+$/.exec(u);
                        c && (l = c.index + o, 0 == c.index ? l += u.length : u = t.substring(o, l));
                    }
                    if (i.push(u), this._lineWidths.push(s - a), o = l, !(l + r < h)) {
                        i.push(t.substring(o, h)), this._lineWidths.push(this._getTextWidth(i[i.length - 1])), 
                        o = -1;
                        break;
                    }
                    l += r, s = a = this._getTextWidth(t.substring(o, l)), l--;
                } else if (this.overflow == n.HIDDEN) return i.push(t.substring(0, l)), void this._lineWidths.push(this._getTextWidth(i[i.length - 1]));
                this.wordWrap && -1 != o && (i.push(t.substring(o, h)), this._lineWidths.push(this._getTextWidth(i[i.length - 1])));
            }
        }, {
            key: "_getTextWidth",
            value: function(t) {
                var e = this._style.currBitmapFont;
                return e ? e.getTextWidth(t) : u.Render.isConchApp ? window.conchTextCanvas.measureText(t).width : (u.Browser.context.measureText(t) || {
                    width: 100
                }).width;
            }
        }, {
            key: "_getWordWrapWidth",
            value: function() {
                var t, e = this.padding, i = this._style.currBitmapFont;
                return (t = i && i.autoScaleSize ? this._width * (i.fontSize / this.fontSize) : this._width) <= 0 && (t = this.wordWrap ? 100 : u.Browser.width), 
                t <= 0 && (t = 100), t - e[3] - e[1];
            }
        }, {
            key: "getCharPoint",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                this._isChanged && u.systemTimer.runCallLater(this, this.typeset);
                for (var i = 0, n = this._lines, r = 0, a = 0, s = n.length; a < s; a++) {
                    if (t < (i += n[a].length)) {
                        var o = a;
                        break;
                    }
                    r = i;
                }
                var l = (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + this.fontSize + "px " + this.font;
                u.Browser.context.font = l;
                var h = this._getTextWidth(this._text.substring(r, t));
                return (e || new E()).setTo(this._startX + h - (this._clipPoint ? this._clipPoint.x : 0), this._startY + o * (this._charSize.height + this.leading) - (this._clipPoint ? this._clipPoint.y : 0));
            }
        }, {
            key: "width",
            get: function() {
                return this._width ? this._width : this.textWidth + this.padding[1] + this.padding[3];
            },
            set: function(t) {
                t != this._width && ((0, e.default)((0, r.default)(n.prototype), "set_width", this).call(this, t), 
                this.isChanged = !0, this.borderColor && this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1));
            }
        }, {
            key: "height",
            get: function() {
                return this._height ? this._height : this.textHeight;
            },
            set: function(t) {
                t != this._height && ((0, e.default)((0, r.default)(n.prototype), "set_height", this).call(this, t), 
                this.isChanged = !0, this.borderColor && this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1));
            }
        }, {
            key: "textWidth",
            get: function() {
                return this._isChanged && u.systemTimer.runCallLater(this, this.typeset), this._textWidth;
            }
        }, {
            key: "textHeight",
            get: function() {
                return this._isChanged && u.systemTimer.runCallLater(this, this.typeset), this._textHeight;
            }
        }, {
            key: "text",
            get: function() {
                return this._text || "";
            },
            set: function(t) {
                this.set_text(t);
            }
        }, {
            key: "font",
            get: function() {
                return this._font;
            },
            set: function(t) {
                this._style.currBitmapFont && (this._getTextStyle().currBitmapFont = null, this.scale(1, 1)), 
                n._bitmapFonts && n._bitmapFonts[t] && (this._getTextStyle().currBitmapFont = n._bitmapFonts[t]), 
                this._font = t, this.isChanged = !0;
            }
        }, {
            key: "fontSize",
            get: function() {
                return this._fontSize;
            },
            set: function(t) {
                this._fontSize != t && (this._fontSize = t, this.isChanged = !0);
            }
        }, {
            key: "bold",
            get: function() {
                return this._style.bold;
            },
            set: function(t) {
                this._getTextStyle().bold = t, this.isChanged = !0;
            }
        }, {
            key: "color",
            get: function() {
                return this._color;
            },
            set: function(t) {
                this.set_color(t);
            }
        }, {
            key: "italic",
            get: function() {
                return this._style.italic;
            },
            set: function(t) {
                this._getTextStyle().italic = t, this.isChanged = !0;
            }
        }, {
            key: "align",
            get: function() {
                return this._style.align;
            },
            set: function(t) {
                this._getTextStyle().align = t, this.isChanged = !0;
            }
        }, {
            key: "valign",
            get: function() {
                return this._valign;
            },
            set: function(t) {
                this._valign = t, this.isChanged = !0;
            }
        }, {
            key: "wordWrap",
            get: function() {
                return this._style.wordWrap;
            },
            set: function(t) {
                this._getTextStyle().wordWrap = t, this.isChanged = !0;
            }
        }, {
            key: "leading",
            get: function() {
                return this._style.leading;
            },
            set: function(t) {
                this._getTextStyle().leading = t, this.isChanged = !0;
            }
        }, {
            key: "padding",
            get: function() {
                return this._style.padding;
            },
            set: function(t) {
                if ("string" == typeof t) {
                    var e, i, n;
                    for (n = (e = t.split(",")).length; e.length < 4; ) e.push(0);
                    for (i = 0; i < n; i++) e[i] = parseFloat(e[i]) || 0;
                    t = e;
                }
                this._getTextStyle().padding = t, this.isChanged = !0;
            }
        }, {
            key: "bgColor",
            get: function() {
                return this._style.bgColor;
            },
            set: function(t) {
                this.set_bgColor(t);
            }
        }, {
            key: "borderColor",
            get: function() {
                return this._style.borderColor;
            },
            set: function(t) {
                this._getTextStyle().borderColor = t, this._renderType |= ge.STYLE, this._setBorderStyleColor(0, 0, this.width, this.height, t, 1), 
                this._setRenderType(this._renderType), this.isChanged = !0;
            }
        }, {
            key: "stroke",
            get: function() {
                return this._style.stroke;
            },
            set: function(t) {
                this._getTextStyle().stroke = t, this.isChanged = !0;
            }
        }, {
            key: "strokeColor",
            get: function() {
                return this._style.strokeColor;
            },
            set: function(t) {
                this._getTextStyle().strokeColor = t, this.isChanged = !0;
            }
        }, {
            key: "isChanged",
            set: function(t) {
                this._isChanged !== t && (this._isChanged = t, t && u.systemTimer.callLater(this, this.typeset));
            }
        }, {
            key: "scrollX",
            set: function(t) {
                if (!(this.overflow != n.SCROLL || this.textWidth < this._width) && this._clipPoint) {
                    t = t < this.padding[3] ? this.padding[3] : t;
                    var e = this._textWidth - this._width;
                    t = t > e ? e : t, this._clipPoint.x = t, this._renderText();
                }
            },
            get: function() {
                return this._clipPoint ? this._clipPoint.x : 0;
            }
        }, {
            key: "scrollY",
            set: function(t) {
                if (!(this.overflow != n.SCROLL || this.textHeight < this._height) && this._clipPoint) {
                    t = t < this.padding[0] ? this.padding[0] : t;
                    var e = this._textHeight - this._height;
                    t = t > e ? e : t, this._clipPoint.y = t, this._renderText();
                }
            },
            get: function() {
                return this._clipPoint ? this._clipPoint.y : 0;
            }
        }, {
            key: "maxScrollX",
            get: function() {
                return this.textWidth < this._width ? 0 : this._textWidth - this._width;
            }
        }, {
            key: "maxScrollY",
            get: function() {
                return this.textHeight < this._height ? 0 : this._textHeight - this._height;
            }
        }, {
            key: "lines",
            get: function() {
                return this._isChanged && this.typeset(), this._lines;
            }
        }, {
            key: "underlineColor",
            get: function() {
                return this._style.underlineColor;
            },
            set: function(t) {
                this._getTextStyle().underlineColor = t, this._isChanged || this._renderText();
            }
        }, {
            key: "underline",
            get: function() {
                return this._style.underline;
            },
            set: function(t) {
                this._getTextStyle().underline = t;
            }
        }, {
            key: "singleCharRender",
            set: function(t) {
                this._singleCharRender = t;
            },
            get: function() {
                return this._singleCharRender;
            }
        } ], [ {
            key: "defaultFontStr",
            value: function() {
                return n.defaultFontSize + "px " + n.defaultFont;
            }
        }, {
            key: "registerBitmapFont",
            value: function(t, e) {
                n._bitmapFonts || (n._bitmapFonts = {}), n._bitmapFonts[t] = e;
            }
        }, {
            key: "unregisterBitmapFont",
            value: function(t) {
                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                if (n._bitmapFonts && n._bitmapFonts[t]) {
                    var i = n._bitmapFonts[t];
                    e && i.destroy(), delete n._bitmapFonts[t];
                }
            }
        } ]), n;
    }(Be);
    Oe.VISIBLE = "visible", Oe.SCROLL = "scroll", Oe.HIDDEN = "hidden", Oe.defaultFontSize = 12, 
    Oe.defaultFont = "Arial", Oe.isComplexText = !1, Oe.fontFamilyMap = {
        "报隶": "报隶-简",
        "黑体": "黑体-简",
        "楷体": "楷体-简",
        "兰亭黑": "兰亭黑-简",
        "隶变": "隶变-简",
        "凌慧体": "凌慧体-简",
        "翩翩体": "翩翩体-简",
        "苹方": "苹方-简",
        "手札体": "手札体-简",
        "宋体": "宋体-简",
        "娃娃体": "娃娃体-简",
        "魏碑": "魏碑-简",
        "行楷": "行楷-简",
        "雅痞": "雅痞-简",
        "圆体": "圆体-简"
    }, Oe._testWord = "游", Oe.CharacterCache = !0, Oe.RightToLeft = !1, u.regClass(Oe), 
    Me.regClass("laya.display.Text", Oe), Me.regClass("Laya.Text", Oe);
    var Ne = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h() {
            var t;
            return (0, o.default)(this, h), (t = n.call(this))._multiline = !1, t._editable = !0, 
            t._maxChars = 1e5, t._type = "text", t._prompt = "", t._promptColor = "#A9A9A9", 
            t._originColor = "#000000", t._content = "", h.IOS_IFRAME = u.Browser.onIOS && u.Browser.window.top != u.Browser.window.self, 
            t._width = 100, t._height = 20, t.multiline = !1, t.overflow = Oe.SCROLL, t.on(Jt.MOUSE_DOWN, (0, 
            i.default)(t), t._onMouseDown), t.on(Jt.UNDISPLAY, (0, i.default)(t), t._onUnDisplay), 
            t;
        }
        return (0, s.default)(h, [ {
            key: "setSelection",
            value: function(t, e) {
                this.focus = !0, h.inputElement.selectionStart = t, h.inputElement.selectionEnd = e;
            }
        }, {
            key: "_onUnDisplay",
            value: function() {
                this.focus = !1;
            }
        }, {
            key: "_onMouseDown",
            value: function(t) {
                this.focus = !0;
            }
        }, {
            key: "_syncInputTransform",
            value: function() {
                var t = this.nativeInput, e = st.getTransformRelativeToWindow(this, this.padding[3], this.padding[0]), i = this._width - this.padding[1] - this.padding[3], n = this._height - this.padding[0] - this.padding[2];
                u.Render.isConchApp ? (t.setScale(e.scaleX, e.scaleY), t.setSize(i, n), t.setPos(e.x, e.y)) : (h.inputContainer.style.transform = h.inputContainer.style.webkitTransform = "scale(" + e.scaleX + "," + e.scaleY + ") rotate(" + u.stage.canvasDegree + "deg)", 
                t.style.width = i + "px", t.style.height = n + "px", h.inputContainer.style.left = e.x + "px", 
                h.inputContainer.style.top = e.y + "px");
            }
        }, {
            key: "select",
            value: function() {
                this.nativeInput.select();
            }
        }, {
            key: "_setInputMethod",
            value: function() {
                h.input.parentElement && h.inputContainer.removeChild(h.input), h.area.parentElement && h.inputContainer.removeChild(h.area), 
                u.Browser.onAndroid && (h.input = h.inputElement = u.Browser.createElement("input"), 
                h._initInput(h.input)), h.inputElement = this._multiline ? h.area : h.input, h.inputContainer.appendChild(h.inputElement), 
                Oe.RightToLeft && (h.inputElement.style.direction = "rtl");
            }
        }, {
            key: "_focusIn",
            value: function() {
                h.isInputting = !0;
                var t = this.nativeInput;
                h.input && (h.input.type = this._type), this._focus = !0;
                var e = t.style;
                e.whiteSpace = this.wordWrap ? "pre-wrap" : "nowrap", this._setPromptColor(), t.readOnly = !this._editable, 
                u.Render.isConchApp && (t.setType(this._type), t.setForbidEdit(!this._editable)), 
                t.maxLength = this._maxChars, t.value = this._content, t.placeholder = this._prompt, 
                u.stage.off(Jt.KEY_DOWN, this, this._onKeyDown), u.stage.on(Jt.KEY_DOWN, this, this._onKeyDown), 
                u.stage.focus = this, this.event(Jt.FOCUS), u.Browser.onPC && t.focus(), u.Browser.onMiniGame || u.Browser.onBDMiniGame || u.Browser.onQGMiniGame || u.Browser.onKGMiniGame || u.Browser.onVVMiniGame || u.Browser.onAlipayMiniGame || u.Browser.onQQMiniGame || u.Browser.onBLMiniGame || u.Browser.onTTMiniGame || u.Browser.onHWMiniGame || u.Browser.onTBMiniGame || (this._text = null), 
                this.typeset(), t.setColor(this._originColor), t.setFontSize(this.fontSize), t.setFontFace(u.Browser.onIPhone && Oe.fontFamilyMap[this.font] || this.font), 
                u.Render.isConchApp && t.setMultiAble && t.setMultiAble(this._multiline), e.lineHeight = this.leading + this.fontSize + "px", 
                e.fontStyle = this.italic ? "italic" : "normal", e.fontWeight = this.bold ? "bold" : "normal", 
                e.textAlign = this.align, e.padding = "0 0", this._syncInputTransform(), !u.Render.isConchApp && u.Browser.onPC && u.systemTimer.frameLoop(1, this, this._syncInputTransform);
            }
        }, {
            key: "_setPromptColor",
            value: function() {
                h.promptStyleDOM = u.Browser.getElementById("promptStyle"), h.promptStyleDOM || (h.promptStyleDOM = u.Browser.createElement("style"), 
                h.promptStyleDOM.setAttribute("id", "promptStyle"), u.Browser.document.head.appendChild(h.promptStyleDOM)), 
                h.promptStyleDOM.innerText = "input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {color:" + this._promptColor + "}input:-moz-placeholder, textarea:-moz-placeholder {color:" + this._promptColor + "}input::-moz-placeholder, textarea::-moz-placeholder {color:" + this._promptColor + "}input:-ms-input-placeholder, textarea:-ms-input-placeholder {color:" + this._promptColor + "}";
            }
        }, {
            key: "_focusOut",
            value: function() {
                h.isInputting && (h.isInputting = !1, this._focus = !1, this._text = null, this._content = this.nativeInput.value, 
                this._content ? ((0, e.default)((0, r.default)(h.prototype), "set_text", this).call(this, this._content), 
                (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this._originColor)) : ((0, 
                e.default)((0, r.default)(h.prototype), "set_text", this).call(this, this._prompt), 
                (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this._promptColor)), 
                u.stage.off(Jt.KEY_DOWN, this, this._onKeyDown), u.stage.focus = null, this.event(Jt.BLUR), 
                this.event(Jt.CHANGE), u.Render.isConchApp && this.nativeInput.blur(), u.Browser.onPC && u.systemTimer.clear(this, this._syncInputTransform));
            }
        }, {
            key: "_onKeyDown",
            value: function(t) {
                13 === t.keyCode && (u.Browser.onMobile && !this._multiline && (this.focus = !1), 
                this.event(Jt.ENTER));
            }
        }, {
            key: "changeText",
            value: function(t) {
                this._content = t, this._focus ? (this.nativeInput.value = t || "", this.event(Jt.CHANGE)) : (0, 
                e.default)((0, r.default)(h.prototype), "changeText", this).call(this, t);
            }
        }, {
            key: "multiline",
            get: function() {
                return this._multiline;
            },
            set: function(t) {
                this._multiline = t, this.valign = t ? "top" : "middle";
            }
        }, {
            key: "nativeInput",
            get: function() {
                return this._multiline ? h.area : h.input;
            }
        }, {
            key: "focus",
            get: function() {
                return this._focus;
            },
            set: function(t) {
                var e = this.nativeInput;
                this._focus !== t && (t ? (e.target ? e.target._focusOut() : this._setInputMethod(), 
                e.target = this, this._focusIn()) : (e.target = null, this._focusOut(), u.Browser.document.body.scrollTop = 0, 
                e.blur(), u.Render.isConchApp ? e.setPos(-1e4, -1e4) : h.inputContainer.contains(e) && h.inputContainer.removeChild(e)));
            }
        }, {
            key: "text",
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this._originColor), 
                t += "", this._focus ? (this.nativeInput.value = t || "", this.event(Jt.CHANGE)) : (this._multiline || (t = t.replace(/\r?\n/g, "")), 
                this._content = t, t ? (0, e.default)((0, r.default)(h.prototype), "set_text", this).call(this, t) : ((0, 
                e.default)((0, r.default)(h.prototype), "set_text", this).call(this, this._prompt), 
                (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this.promptColor)));
            },
            get: function() {
                return this._focus ? this.nativeInput.value : this._content || "";
            }
        }, {
            key: "color",
            set: function(t) {
                this._focus && this.nativeInput.setColor(t), (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this._content ? t : this._promptColor), 
                this._originColor = t;
            },
            get: function() {
                return (0, e.default)((0, r.default)(h.prototype), "color", this);
            }
        }, {
            key: "bgColor",
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "set_bgColor", this).call(this, t), 
                u.Render.isConchApp && this.nativeInput.setBgColor(t);
            },
            get: function() {
                return (0, e.default)((0, r.default)(h.prototype), "bgColor", this);
            }
        }, {
            key: "restrict",
            get: function() {
                return this._restrictPattern ? this._restrictPattern.source : "";
            },
            set: function(t) {
                t ? ((t = "[^" + t + "]").indexOf("^^") > -1 && (t = t.replace("^^", "")), this._restrictPattern = new RegExp(t, "g")) : this._restrictPattern = null;
            }
        }, {
            key: "editable",
            set: function(t) {
                this._editable = t, u.Render.isConchApp && h.input.setForbidEdit(!t);
            },
            get: function() {
                return this._editable;
            }
        }, {
            key: "maxChars",
            get: function() {
                return this._maxChars;
            },
            set: function(t) {
                t <= 0 && (t = 1e5), this._maxChars = t;
            }
        }, {
            key: "prompt",
            get: function() {
                return this._prompt;
            },
            set: function(t) {
                !this._text && t && (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, this._promptColor), 
                this.promptColor = this._promptColor, this._text ? (0, e.default)((0, r.default)(h.prototype), "set_text", this).call(this, this._text == this._prompt ? t : this._text) : (0, 
                e.default)((0, r.default)(h.prototype), "set_text", this).call(this, t), this._prompt = Oe.langPacks && Oe.langPacks[t] ? Oe.langPacks[t] : t;
            }
        }, {
            key: "promptColor",
            get: function() {
                return this._promptColor;
            },
            set: function(t) {
                this._promptColor = t, this._content || (0, e.default)((0, r.default)(h.prototype), "set_color", this).call(this, t);
            }
        }, {
            key: "type",
            get: function() {
                return this._type;
            },
            set: function(t) {
                this._getTextStyle().asPassword = "password" === t, this._type = t;
            }
        } ], [ {
            key: "__init__",
            value: function() {
                if (h._createInputElement(), u.Browser.onMobile) {
                    var t = !1;
                    (u.Browser.onMiniGame || u.Browser.onBDMiniGame || u.Browser.onQGMiniGame || u.Browser.onKGMiniGame || u.Browser.onVVMiniGame || u.Browser.onAlipayMiniGame || u.Browser.onQQMiniGame || u.Browser.onBLMiniGame || u.Browser.onTTMiniGame || u.Browser.onHWMiniGame || u.Browser.onTBMiniGame) && (t = !0), 
                    u.Render.canvas.addEventListener(h.IOS_IFRAME ? t ? "touchend" : "click" : "touchend", h._popupInputMethod);
                }
            }
        }, {
            key: "_popupInputMethod",
            value: function(t) {
                h.isInputting && h.inputElement.focus();
            }
        }, {
            key: "_createInputElement",
            value: function() {
                h._initInput(h.area = u.Browser.createElement("textarea")), h._initInput(h.input = u.Browser.createElement("input")), 
                h.inputContainer = u.Browser.createElement("div"), h.inputContainer.style.position = "absolute", 
                h.inputContainer.style.zIndex = "1E5", u.Browser.container.appendChild(h.inputContainer), 
                h.inputContainer.setPos = function(t, e) {
                    h.inputContainer.style.left = t + "px", h.inputContainer.style.top = e + "px";
                };
            }
        }, {
            key: "_initInput",
            value: function(t) {
                var e = t.style;
                e.cssText = "position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;", 
                e.resize = "none", e.backgroundColor = "transparent", e.border = "none", e.outline = "none", 
                e.zIndex = "1", t.addEventListener("input", h._processInputting), t.addEventListener("mousemove", h._stopEvent), 
                t.addEventListener("mousedown", h._stopEvent), t.addEventListener("touchmove", h._stopEvent), 
                t.setFontFace = function(e) {
                    t.style.fontFamily = e;
                }, u.Render.isConchApp || (t.setColor = function(e) {
                    t.style.color = e;
                }, t.setFontSize = function(e) {
                    t.style.fontSize = e + "px";
                });
            }
        }, {
            key: "_processInputting",
            value: function(t) {
                var e = h.inputElement.target;
                if (e) {
                    var i = h.inputElement.value;
                    e._restrictPattern && (i = i.replace(/\u2006|\x27/g, ""), e._restrictPattern.test(i) && (i = i.replace(e._restrictPattern, ""), 
                    h.inputElement.value = i)), e._text = i, e.event(Jt.INPUT);
                }
            }
        }, {
            key: "_stopEvent",
            value: function(t) {
                "touchmove" == t.type && t.preventDefault(), t.stopPropagation && t.stopPropagation();
            }
        } ]), h;
    }(Oe);
    Ne.TYPE_TEXT = "text", Ne.TYPE_PASSWORD = "password", Ne.TYPE_EMAIL = "email", Ne.TYPE_URL = "url", 
    Ne.TYPE_NUMBER = "number", Ne.TYPE_RANGE = "range", Ne.TYPE_DATE = "date", Ne.TYPE_MONTH = "month", 
    Ne.TYPE_WEEK = "week", Ne.TYPE_TIME = "time", Ne.TYPE_DATE_TIME = "datetime", Ne.TYPE_DATE_TIME_LOCAL = "datetime-local", 
    Ne.TYPE_SEARCH = "search", Ne.IOS_IFRAME = !1, Ne.inputHeight = 45, Ne.isInputting = !1, 
    Me.regClass("laya.display.Input", Ne), Me.regClass("Laya.Input", Ne);
    var Ue = function() {
        function t() {
            (0, o.default)(this, t), this.preOvers = [], this.preDowns = [], this.preRightDowns = [], 
            this.enable = !0, this._event = new Jt(), this._lastClickTime = 0;
        }
        return (0, s.default)(t, [ {
            key: "_clearTempArrs",
            value: function() {
                t._oldArr.length = 0, t._newArr.length = 0, t._tEleArr.length = 0;
            }
        }, {
            key: "getTouchFromArr",
            value: function(t, e) {
                var i, n, r;
                for (n = e.length, i = 0; i < n; i++) if ((r = e[i]).id == t) return r;
                return null;
            }
        }, {
            key: "removeTouchFromArr",
            value: function(t, e) {
                var i;
                for (i = e.length - 1; i >= 0; i--) e[i].id == t && e.splice(i, 1);
            }
        }, {
            key: "createTouchO",
            value: function(t, e) {
                var i;
                return (i = c.getItem("TouchData") || {}).id = e, i.tar = t, i;
            }
        }, {
            key: "onMouseDown",
            value: function(e, i) {
                var n, r, a, s, o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                this.enable && (n = this.getTouchFromArr(i, this.preOvers), a = this.getEles(e, null, t._tEleArr), 
                n ? n.tar = e : (r = this.createTouchO(e, i), this.preOvers.push(r)), ae.onMobile && this.sendEvents(a, Jt.MOUSE_OVER), 
                s = o ? this.preDowns : this.preRightDowns, (n = this.getTouchFromArr(i, s)) ? n.tar = e : (r = this.createTouchO(e, i), 
                s.push(r)), this.sendEvents(a, o ? Jt.MOUSE_DOWN : Jt.RIGHT_MOUSE_DOWN), this._clearTempArrs());
            }
        }, {
            key: "sendEvents",
            value: function(t, e) {
                var i, n, r;
                for (n = t.length, this._event._stoped = !1, r = t[0], i = 0; i < n; i++) {
                    var a = t[i];
                    if (a.destroyed) return;
                    if (a.event(e, this._event.setTo(e, a, r)), this._event._stoped) break;
                }
            }
        }, {
            key: "getEles",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                for (i ? i.length = 0 : i = []; t && t != e; ) i.push(t), t = t.parent;
                return i;
            }
        }, {
            key: "checkMouseOutAndOverOfMove",
            value: function(e, i) {
                var n, r, a, s;
                if (i != e) if (i.contains(e)) r = this.getEles(e, i, t._tEleArr), this.sendEvents(r, Jt.MOUSE_OVER); else if (e.contains(i)) r = this.getEles(i, e, t._tEleArr), 
                this.sendEvents(r, Jt.MOUSE_OUT); else {
                    var o, l, h;
                    for ((r = t._tEleArr).length = 0, o = this.getEles(i, null, t._oldArr), l = this.getEles(e, null, t._newArr), 
                    s = o.length, a = 0; a < s; a++) {
                        if (n = o[a], (h = l.indexOf(n)) >= 0) {
                            l.splice(h, l.length - h);
                            break;
                        }
                        r.push(n);
                    }
                    r.length > 0 && this.sendEvents(r, Jt.MOUSE_OUT), l.length > 0 && this.sendEvents(l, Jt.MOUSE_OVER);
                }
            }
        }, {
            key: "onMouseMove",
            value: function(e, i) {
                var n, r;
                this.enable && ((n = this.getTouchFromArr(i, this.preOvers)) ? (this.checkMouseOutAndOverOfMove(e, n.tar), 
                n.tar = e, r = this.getEles(e, null, t._tEleArr)) : (r = this.getEles(e, null, t._tEleArr), 
                this.sendEvents(r, Jt.MOUSE_OVER), this.preOvers.push(this.createTouchO(e, i))), 
                this.sendEvents(r, Jt.MOUSE_MOVE), this._clearTempArrs());
            }
        }, {
            key: "getLastOvers",
            value: function() {
                return t._tEleArr.length = 0, this.preOvers.length > 0 && this.preOvers[0].tar ? this.getEles(this.preOvers[0].tar, null, t._tEleArr) : (t._tEleArr.push(u.stage), 
                t._tEleArr);
            }
        }, {
            key: "stageMouseOut",
            value: function() {
                var t;
                t = this.getLastOvers(), this.preOvers.length = 0, this.sendEvents(t, Jt.MOUSE_OUT);
            }
        }, {
            key: "onMouseUp",
            value: function(e, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                if (this.enable) {
                    var r, a, s, o, l, h, u, _, d = ae.onMobile;
                    if (a = this.getEles(e, null, t._tEleArr), this.sendEvents(a, n ? Jt.MOUSE_UP : Jt.RIGHT_MOUSE_UP), 
                    _ = n ? this.preDowns : this.preRightDowns, r = this.getTouchFromArr(i, _)) {
                        var f, v = ae.now();
                        if (f = v - this._lastClickTime < 300, this._lastClickTime = v, e == r.tar) u = a; else for (s = this.getEles(r.tar, null, t._oldArr), 
                        (u = t._newArr).length = 0, l = s.length, o = 0; o < l; o++) h = s[o], a.indexOf(h) >= 0 && u.push(h);
                        u.length > 0 && this.sendEvents(u, n ? Jt.CLICK : Jt.RIGHT_CLICK), n && f && this.sendEvents(u, Jt.DOUBLE_CLICK), 
                        this.removeTouchFromArr(i, _), r.tar = null, c.recover("TouchData", r);
                    }
                    (r = this.getTouchFromArr(i, this.preOvers)) && d && ((u = this.getEles(r.tar, null, u)) && u.length > 0 && this.sendEvents(u, Jt.MOUSE_OUT), 
                    this.removeTouchFromArr(i, this.preOvers), r.tar = null, c.recover("TouchData", r)), 
                    this._clearTempArrs();
                }
            }
        } ]), t;
    }();
    Ue.I = new Ue(), Ue._oldArr = [], Ue._newArr = [], Ue._tEleArr = [];
    var Ge = function() {
        function t() {
            (0, o.default)(this, t), this.mouseX = 0, this.mouseY = 0, this.disableMouseEvent = !1, 
            this.mouseDownTime = 0, this.mouseMoveAccuracy = 2, this._event = new Jt(), this._captureSp = null, 
            this._captureChain = [], this._captureExlusiveMode = !1, this._hitCaputreSp = !1, 
            this._point = new E(), this._rect = new R(), this._lastMoveTimer = 0, this._prePoint = new E(), 
            this._touchIDs = {}, this._curTouchID = NaN, this._id = 1;
        }
        return (0, s.default)(t, [ {
            key: "__init__",
            value: function(e, i) {
                this._stage = e;
                var n = this;
                i.oncontextmenu = function(e) {
                    if (t.enabled) return !1;
                }, i.addEventListener("mousedown", function(e) {
                    t.enabled && (ae.onIE || e.cancelable && e.preventDefault(), n.mouseDownTime = ae.now(), 
                    n.runEvent(e));
                }), i.addEventListener("mouseup", function(e) {
                    t.enabled && (e.cancelable && e.preventDefault(), n.mouseDownTime = -ae.now(), n.runEvent(e));
                }, !0), i.addEventListener("mousemove", function(e) {
                    if (t.enabled) {
                        e.cancelable && e.preventDefault();
                        var i = ae.now();
                        if (i - n._lastMoveTimer < 10) return;
                        n._lastMoveTimer = i, n.runEvent(e);
                    }
                }, !0), i.addEventListener("mouseout", function(e) {
                    t.enabled && n.runEvent(e);
                }), i.addEventListener("mouseover", function(e) {
                    t.enabled && n.runEvent(e);
                }), i.addEventListener("touchstart", function(e) {
                    t.enabled && (t._isFirstTouch || Ne.isInputting || e.cancelable && e.preventDefault(), 
                    n.mouseDownTime = ae.now(), n.runEvent(e));
                }), i.addEventListener("touchend", function(e) {
                    t.enabled ? (t._isFirstTouch || Ne.isInputting || e.cancelable && e.preventDefault(), 
                    t._isFirstTouch = !1, n.mouseDownTime = -ae.now(), n.runEvent(e)) : n._curTouchID = NaN;
                }, !0), i.addEventListener("touchmove", function(e) {
                    t.enabled && (e.cancelable && e.preventDefault(), n.runEvent(e));
                }, !0), i.addEventListener("touchcancel", function(e) {
                    t.enabled ? (e.cancelable && e.preventDefault(), n.runEvent(e)) : n._curTouchID = NaN;
                }, !0), i.addEventListener("mousewheel", function(e) {
                    t.enabled && n.runEvent(e);
                }), i.addEventListener("DOMMouseScroll", function(e) {
                    t.enabled && n.runEvent(e);
                });
            }
        }, {
            key: "initEvent",
            value: function(t) {
                var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                this._event._stoped = !1, this._event.nativeEvent = i || t, this._target = null, 
                this._point.setTo(t.pageX || t.clientX, t.pageY || t.clientY), this._stage._canvasTransform && (this._stage._canvasTransform.invertTransformPoint(this._point), 
                this.mouseX = this._point.x, this.mouseY = this._point.y), this._event.touchId = t.identifier || 0, 
                this._tTouchID = this._event.touchId, (e = Ue.I._event)._stoped = !1, e.nativeEvent = this._event.nativeEvent, 
                e.touchId = this._event.touchId;
            }
        }, {
            key: "checkMouseWheel",
            value: function(t) {
                this._event.delta = t.wheelDelta ? .025 * t.wheelDelta : -t.detail;
                for (var e = Ue.I.getLastOvers(), i = 0, n = e.length; i < n; i++) {
                    var r = e[i];
                    r.event(Jt.MOUSE_WHEEL, this._event.setTo(Jt.MOUSE_WHEEL, r, this._target));
                }
            }
        }, {
            key: "onMouseMove",
            value: function(t) {
                Ue.I.onMouseMove(t, this._tTouchID);
            }
        }, {
            key: "onMouseDown",
            value: function(t) {
                if (Ne.isInputting && u.stage.focus && u.stage.focus.focus && !u.stage.focus.contains(this._target)) {
                    var e = u.stage.focus._tf || u.stage.focus, i = t._tf || t;
                    i instanceof Ne && i.multiline == e.multiline ? e._focusOut() : e.focus = !1;
                }
                Ue.I.onMouseDown(t, this._tTouchID, this._isLeftMouse);
            }
        }, {
            key: "onMouseUp",
            value: function(t) {
                Ue.I.onMouseUp(t, this._tTouchID, this._isLeftMouse);
            }
        }, {
            key: "check",
            value: function(t, e, i, n) {
                this._point.setTo(e, i), t.fromParentPoint(this._point), e = this._point.x, i = this._point.y;
                var r = t._style.scrollRect;
                if (r && (this._rect.setTo(r.x, r.y, r.width, r.height), !this._rect.contains(e, i))) return !1;
                if (!this.disableMouseEvent) {
                    if (t.hitTestPrior && !t.mouseThrough && !this.hitTest(t, e, i)) return !1;
                    for (var a = t._children.length - 1; a > -1; a--) {
                        var s = t._children[a];
                        if (!s.destroyed && s._mouseState > 1 && s._visible && this.check(s, e, i, n)) return !0;
                    }
                    for (a = t._extUIChild.length - 1; a >= 0; a--) {
                        var o = t._extUIChild[a];
                        if (!o.destroyed && o._mouseState > 1 && o._visible && this.check(o, e, i, n)) return !0;
                    }
                }
                var l = !(!t.hitTestPrior || t.mouseThrough || this.disableMouseEvent) || this.hitTest(t, e, i);
                return l ? (this._target = t, n.call(this, t), this._target == this._hitCaputreSp && (this._hitCaputreSp = !0)) : n === this.onMouseUp && t === this._stage && (this._target = this._stage, 
                n.call(this, this._target)), l;
            }
        }, {
            key: "hitTest",
            value: function(t, e, i) {
                var n = !1;
                t.scrollRect && (e -= t._style.scrollRect.x, i -= t._style.scrollRect.y);
                var r = t._style.hitArea;
                return r && r._hit ? r.contains(e, i) : ((t.width > 0 && t.height > 0 || t.mouseThrough || r) && (n = t.mouseThrough ? t.getGraphicBounds().contains(e, i) : (r || this._rect.setTo(0, 0, t.width, t.height)).contains(e, i)), 
                n);
            }
        }, {
            key: "_checkAllBaseUI",
            value: function(t, e, i) {
                var n = this.handleExclusiveCapture(this.mouseX, this.mouseY, i);
                return !!n || (n = this.check(this._stage, this.mouseX, this.mouseY, i), this.handleCapture(this.mouseX, this.mouseY, i) || n);
            }
        }, {
            key: "check3DUI",
            value: function(t, e, i) {
                for (var n = this._stage._3dUI, r = 0, a = !1; r < n.length; r++) {
                    var s = n[r];
                    this._stage._curUIBase = s, !s.destroyed && s._mouseState > 1 && s._visible && (a = a || this.check(s, this.mouseX, this.mouseY, i));
                }
                return this._stage._curUIBase = this._stage, a;
            }
        }, {
            key: "handleExclusiveCapture",
            value: function(t, e, i) {
                if (this._captureExlusiveMode && this._captureSp && this._captureChain.length > 0) {
                    var n;
                    this._point.setTo(t, e);
                    for (var r = 0; r < this._captureChain.length; r++) (n = this._captureChain[r]).fromParentPoint(this._point);
                    return this._target = n, i.call(this, n), !0;
                }
                return !1;
            }
        }, {
            key: "handleCapture",
            value: function(t, e, i) {
                if (!this._hitCaputreSp && this._captureSp && this._captureChain.length > 0) {
                    var n;
                    this._point.setTo(t, e);
                    for (var r = 0; r < this._captureChain.length; r++) (n = this._captureChain[r]).fromParentPoint(this._point);
                    return this._target = n, i.call(this, n), !0;
                }
                return !1;
            }
        }, {
            key: "runEvent",
            value: function(e) {
                var i, n, r;
                switch ("mousemove" !== e.type && (this._prePoint.x = this._prePoint.y = -1e6), 
                e.type) {
                  case "mousedown":
                    this._touchIDs[0] = this._id++, t._isTouchRespond ? t._isTouchRespond = !1 : (this._isLeftMouse = 0 === e.button, 
                    this.initEvent(e), this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseDown));
                    break;

                  case "mouseup":
                    this._isLeftMouse = 0 === e.button, this.initEvent(e), this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseUp);
                    break;

                  case "mousemove":
                    Math.abs(this._prePoint.x - e.clientX) + Math.abs(this._prePoint.y - e.clientY) >= this.mouseMoveAccuracy && (this._prePoint.x = e.clientX, 
                    this._prePoint.y = e.clientY, this.initEvent(e), this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseMove));
                    break;

                  case "touchstart":
                    t._isTouchRespond = !0, this._isLeftMouse = !0;
                    var a = e.changedTouches;
                    for (i = 0, n = a.length; i < n; i++) r = a[i], (t.multiTouchEnabled || isNaN(this._curTouchID)) && (this._curTouchID = r.identifier, 
                    this._id % 200 == 0 && (this._touchIDs = {}), this._touchIDs[r.identifier] = this._id++, 
                    this.initEvent(r, e), this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseDown));
                    break;

                  case "touchend":
                  case "touchcancel":
                    t._isTouchRespond = !0, this._isLeftMouse = !0;
                    var s = e.changedTouches;
                    for (i = 0, n = s.length; i < n; i++) r = s[i], (t.multiTouchEnabled || r.identifier == this._curTouchID) && (this._curTouchID = NaN, 
                    this.initEvent(r, e), this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseUp) || this.onMouseUp(null));
                    break;

                  case "touchmove":
                    var o = e.changedTouches;
                    for (i = 0, n = o.length; i < n; i++) r = o[i], (t.multiTouchEnabled || r.identifier == this._curTouchID) && (this.initEvent(r, e), 
                    this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseMove));
                    break;

                  case "wheel":
                  case "mousewheel":
                  case "DOMMouseScroll":
                    this.checkMouseWheel(e);
                    break;

                  case "mouseout":
                    Ue.I.stageMouseOut();
                    break;

                  case "mouseover":
                    this._stage.event(Jt.MOUSE_OVER, this._event.setTo(Jt.MOUSE_OVER, this._stage, this._stage));
                }
            }
        }, {
            key: "setCapture",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                this._captureSp = t, this._captureExlusiveMode = e, this._captureChain.length = 0, 
                this._captureChain.push(t);
                for (var i = t; i != u.stage && i != u.stage._curUIBase && (i = i.parent); ) this._captureChain.splice(0, 0, i);
            }
        }, {
            key: "releaseCapture",
            value: function() {
                console.log("release capture"), this._captureSp = null;
            }
        } ]), t;
    }();
    Ge.instance = new Ge(), Ge.enabled = !0, Ge.multiTouchEnabled = !0, Ge._isFirstTouch = !0;
    var We = function() {
        function t() {
            (0, o.default)(this, t), this._pool = [], this._map = {}, this._laters = [];
        }
        return (0, s.default)(t, [ {
            key: "_update",
            value: function() {
                var t = this._laters, e = t.length;
                if (e > 0) {
                    for (var i = 0, n = e - 1; i <= n; i++) {
                        var r = t[i];
                        this._map[r.key] = null, null !== r.method && (r.run(), r.clear()), this._pool.push(r), 
                        i === n && (n = t.length - 1);
                    }
                    t.length = 0;
                }
            }
        }, {
            key: "_getHandler",
            value: function(t, e) {
                var i = t ? t.$_GID || (t.$_GID = u.Utils.getGID()) : 0, n = e.$_TID || (e.$_TID = u.Timer._mid++);
                return this._map[i + "." + n];
            }
        }, {
            key: "callLater",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                if (null == this._getHandler(t, e)) {
                    var n;
                    (n = this._pool.length ? this._pool.pop() : new Ye()).caller = t, n.method = e, 
                    n.args = i;
                    var r = t ? t.$_GID : 0, a = e.$_TID;
                    n.key = r + "." + a, this._map[n.key] = n, this._laters.push(n);
                }
            }
        }, {
            key: "runCallLater",
            value: function(t, e) {
                var i = this._getHandler(t, e);
                i && null != i.method && (this._map[i.key] = null, i.run(), i.clear());
            }
        } ]), t;
    }();
    We.I = new We();
    var Ye = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "clear",
            value: function() {
                this.caller = null, this.method = null, this.args = null;
            }
        }, {
            key: "run",
            value: function() {
                var t = this.caller;
                if (t && t.destroyed) return this.clear();
                var e = this.method, i = this.args;
                null != e && (i ? e.apply(t, i) : e.call(t));
            }
        } ]), t;
    }(), Ve = function t() {
        (0, o.default)(this, t);
    };
    Ve.createShaderCondition = function(t) {
        var e = "(function() {return " + t + ";})";
        return window.Laya._runScript(e);
    }, Ve.changeWebGLSize = function(t, e) {
        ce.onStageResize(t, e);
    };
    var Xe = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "setPerformanceDataTool",
            value: function(t) {
                this.performanceTool = t;
            }
        }, {
            key: "begainSample",
            value: function(t) {
                this.performanceTool && this.performanceTool.enable && this.performanceTool.BegainSample(t);
            }
        }, {
            key: "endSample",
            value: function(t) {
                return this.performanceTool && this.performanceTool.enable ? this.performanceTool.EndSample(t) : 0;
            }
        }, {
            key: "expoertFile",
            value: function(t) {
                if (this.performanceTool) return this.performanceTool.enable ? this.performanceTool.exportPerformanceFile() : null;
            }
        }, {
            key: "showFunSampleFun",
            value: function(t) {
                this.performanceTool.showFunSampleFun(t);
            }
        }, {
            key: "enable",
            set: function(t) {
                this.performanceTool && (this.performanceTool.enable = t);
            },
            get: function() {
                return !!this.performanceTool && this._enable;
            }
        }, {
            key: "enableDataExport",
            set: function(t) {
                this.performanceTool && (this.performanceTool.enableDataExport = t);
            },
            get: function() {
                return !!this.performanceTool && this.performanceTool.enableDataExport;
            }
        } ]), t;
    }();
    Xe.performanceTool = null, Xe._enable = !1, Xe.PERFORMANCE_LAYA = "Laya", Xe.PERFORMANCE_LAYA_3D = "Laya/3D", 
    Xe.PERFORMANCE_LAYA_2D = "Laya/2D", Xe.PERFORMANCE_LAYA_3D_PRERENDER = "Laya/3D/PreRender", 
    Xe.PERFORMANCE_LAYA_3D_UPDATESCRIPT = "Laya/3D/UpdateScript", Xe.PERFORMANCE_LAYA_3D_PHYSICS = "Laya/3D/Physics", 
    Xe.PERFORMANCE_LAYA_3D_PHYSICS_SIMULATE = "Laya/3D/Physics/simulate", Xe.PERFORMANCE_LAYA_3D_PHYSICS_CHARACTORCOLLISION = "Laya/3D/Physics/updataCharacters&Collisions", 
    Xe.PERFORMANCE_LAYA_3D_PHYSICS_EVENTSCRIPTS = "Laya/3D/Physics/eventScripts", Xe.PERFORMANCE_LAYA_3D_RENDER = "Laya/3D/Render", 
    Xe.PERFORMANCE_LAYA_3D_RENDER_SHADOWMAP = "Laya/3D/Render/ShadowMap", Xe.PERFORMANCE_LAYA_3D_RENDER_CLUSTER = "Laya/3D/Render/Cluster", 
    Xe.PERFORMANCE_LAYA_3D_RENDER_CULLING = "Laya/3D/Render/Culling", Xe.PERFORMANCE_LAYA_3D_RENDER_RENDERDEPTHMDOE = "Laya/3D/Render/RenderDepthMode", 
    Xe.PERFORMANCE_LAYA_3D_RENDER_RENDEROPAQUE = "Laya/3D/Render/RenderOpaque", Xe.PERFORMANCE_LAYA_3D_RENDER_RENDERCOMMANDBUFFER = "Laya/3D/Render/RenderCommandBuffer", 
    Xe.PERFORMANCE_LAYA_3D_RENDER_RENDERTRANSPARENT = "Laya/3D/Render/RenderTransparent", 
    Xe.PERFORMANCE_LAYA_3D_RENDER_POSTPROCESS = "Laya/3D/Render/PostProcess", window.PerformancePlugin = Xe;
    var He = function(t) {
        (0, a.default)(c, t);
        var n = l(c);
        function c() {
            var t;
            (0, o.default)(this, c), (t = n.call(this)).offset = new E(), t._frameRate = "fast", 
            t.designWidth = 0, t.designHeight = 0, t.canvasRotation = !1, t.canvasDegree = 0, 
            t.renderingEnabled = !0, t.screenAdaptationEnabled = !0, t._canvasTransform = new k(), 
            t._screenMode = "none", t._scaleMode = "noscale", t._alignV = "top", t._alignH = "left", 
            t._bgColor = "black", t._mouseMoveTime = 0, t._renderCount = 0, t._safariOffsetY = 0, 
            t._frameStartTime = 0, t._previousOrientation = ae.window.orientation, t._wgColor = [ 0, 0, 0, 1 ], 
            t._scene3Ds = [], t._globalRepaintSet = !1, t._globalRepaintGet = !1, t._3dUI = [], 
            t._curUIBase = null, t.useRetinalCanvas = !1, (0, e.default)((0, r.default)(c.prototype), "set_transform", (0, 
            i.default)(t)).call((0, i.default)(t), t._createTransform()), t.mouseEnabled = !0, 
            t.hitTestPrior = !0, t.autoSize = !1, t._setBit(Ae.DISPLAYED_INSTAGE, !0), t._setBit(Ae.ACTIVE_INHIERARCHY, !0), 
            t._isFocused = !0, t._isVisibility = !0, t.useRetinalCanvas = h.useRetinalCanvas;
            var a = ae.window;
            a.addEventListener("focus", function() {
                t._isFocused = !0, t.event(Jt.FOCUS), t.event(Jt.FOCUS_CHANGE);
            }), a.addEventListener("blur", function() {
                t._isFocused = !1, t.event(Jt.BLUR), t.event(Jt.FOCUS_CHANGE), t._isInputting() && (Ne.inputElement.target.focus = !1);
            });
            var s = "visibilityState", l = "visibilitychange", u = a.document;
            return void 0 !== u.hidden ? (l = "visibilitychange", s = "visibilityState") : void 0 !== u.mozHidden ? (l = "mozvisibilitychange", 
            s = "mozVisibilityState") : void 0 !== u.msHidden ? (l = "msvisibilitychange", s = "msVisibilityState") : void 0 !== u.webkitHidden && (l = "webkitvisibilitychange", 
            s = "webkitVisibilityState"), a.document.addEventListener(l, function() {
                "hidden" == ae.document[s] ? (t._isVisibility = !1, t._isInputting() && (Ne.inputElement.target.focus = !1)) : t._isVisibility = !0, 
                t.renderingEnabled = t._isVisibility, t.event(Jt.VISIBILITY_CHANGE);
            }), a.addEventListener("resize", function() {
                var e = ae.window.orientation;
                null != e && e != t._previousOrientation && t._isInputting() && (Ne.inputElement.target.focus = !1), 
                t._previousOrientation = e, t._isInputting() || (ae.onSafari && (t._safariOffsetY = (ae.window.__innerHeight || ae.document.body.clientHeight || ae.document.documentElement.clientHeight) - ae.window.innerHeight), 
                t._resetCanvas());
            }), a.addEventListener("orientationchange", function(e) {
                t._resetCanvas();
            }), t.on(Jt.MOUSE_MOVE, (0, i.default)(t), t._onmouseMove), ae.onMobile && t.on(Jt.MOUSE_DOWN, (0, 
            i.default)(t), t._onmouseMove), t;
        }
        return (0, s.default)(c, [ {
            key: "_isInputting",
            value: function() {
                return ae.onMobile && Ne.isInputting;
            }
        }, {
            key: "_changeCanvasSize",
            value: function() {
                this.setScreenSize(ae.clientWidth * ae.pixelRatio, ae.clientHeight * ae.pixelRatio);
            }
        }, {
            key: "_resetCanvas",
            value: function() {
                this.screenAdaptationEnabled && this._changeCanvasSize();
            }
        }, {
            key: "setScreenSize",
            value: function(t, i) {
                var n = !1;
                if (this._screenMode !== c.SCREEN_NONE && (n = (t / i < 1 ? c.SCREEN_VERTICAL : c.SCREEN_HORIZONTAL) !== this._screenMode)) {
                    var a = i;
                    i = t, t = a;
                }
                this.canvasRotation = n;
                var s = de._mainCanvas, o = s.source.style, l = this._canvasTransform.identity(), h = this._scaleMode, u = t / this.designWidth, _ = i / this.designHeight, d = this.useRetinalCanvas ? t : this.designWidth, f = this.useRetinalCanvas ? i : this.designHeight, v = t, p = i, y = ae.pixelRatio;
                switch (this._width = this.designWidth, this._height = this.designHeight, h) {
                  case c.SCALE_NOSCALE:
                    u = _ = 1, v = this.designWidth, p = this.designHeight;
                    break;

                  case c.SCALE_SHOWALL:
                    u = _ = Math.min(u, _), d = v = Math.round(this.designWidth * u), f = p = Math.round(this.designHeight * _);
                    break;

                  case c.SCALE_NOBORDER:
                    u = _ = Math.max(u, _), v = Math.round(this.designWidth * u), p = Math.round(this.designHeight * _);
                    break;

                  case c.SCALE_FULL:
                    u = _ = 1, this._width = d = t, this._height = f = i;
                    break;

                  case c.SCALE_FIXED_WIDTH:
                    _ = u, this._height = f = Math.round(i / u);
                    break;

                  case c.SCALE_FIXED_HEIGHT:
                    u = _, this._width = d = Math.round(t / _);
                    break;

                  case c.SCALE_FIXED_AUTO:
                    t / i < this.designWidth / this.designHeight ? (_ = u, this._height = f = Math.round(i / u)) : (u = _, 
                    this._width = d = Math.round(t / _));
                }
                this.useRetinalCanvas && (v = d = t, p = f = i), u *= this.scaleX, _ *= this.scaleY, 
                1 === u && 1 === _ ? this.transform.identity() : (this.transform.a = this._formatData(u / (v / d)), 
                this.transform.d = this._formatData(_ / (p / f))), s.size(d, f), Ve.changeWebGLSize(d, f), 
                l.scale(v / d / y, p / f / y), this._alignH === c.ALIGN_LEFT ? this.offset.x = 0 : this._alignH === c.ALIGN_RIGHT ? this.offset.x = t - v : this.offset.x = .5 * (t - v) / y, 
                this._alignV === c.ALIGN_TOP ? this.offset.y = 0 : this._alignV === c.ALIGN_BOTTOM ? this.offset.y = i - p : this.offset.y = .5 * (i - p) / y, 
                this.offset.x = Math.round(this.offset.x), this.offset.y = Math.round(this.offset.y), 
                l.translate(this.offset.x, this.offset.y), this._safariOffsetY && l.translate(0, this._safariOffsetY), 
                this.canvasDegree = 0, n && (this._screenMode === c.SCREEN_HORIZONTAL ? (l.rotate(Math.PI / 2), 
                l.translate(i / y, 0), this.canvasDegree = 90) : (l.rotate(-Math.PI / 2), l.translate(0, t / y), 
                this.canvasDegree = -90)), l.a = this._formatData(l.a), l.d = this._formatData(l.d), 
                l.tx = this._formatData(l.tx), l.ty = this._formatData(l.ty), (0, e.default)((0, 
                r.default)(c.prototype), "set_transform", this).call(this, this.transform), o.transformOrigin = o.webkitTransformOrigin = o.msTransformOrigin = o.mozTransformOrigin = o.oTransformOrigin = "0px 0px 0px", 
                o.transform = o.webkitTransform = o.msTransform = o.mozTransform = o.oTransform = "matrix(" + l.toString() + ")", 
                o.width = d, o.height = f, this._safariOffsetY && l.translate(0, -this._safariOffsetY), 
                l.translate(parseInt(o.left) || 0, parseInt(o.top) || 0), this.visible = !0, this._repaint |= ge.REPAINT_CACHE, 
                this.event(Jt.RESIZE);
            }
        }, {
            key: "_formatData",
            value: function(t) {
                return Math.abs(t) < 1e-6 ? 0 : Math.abs(1 - t) < .001 ? t > 0 ? 1 : -1 : t;
            }
        }, {
            key: "getMousePoint",
            value: function() {
                return E.TEMP.setTo(this.mouseX, this.mouseY);
            }
        }, {
            key: "repaint",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ge.REPAINT_CACHE;
                this._repaint |= t;
            }
        }, {
            key: "parentRepaint",
            value: function() {}
        }, {
            key: "_loop",
            value: function() {
                return this._globalRepaintGet = this._globalRepaintSet, this._globalRepaintSet = !1, 
                this.render(de._context, 0, 0), !0;
            }
        }, {
            key: "getFrameTm",
            value: function() {
                return this._frameStartTime;
            }
        }, {
            key: "_onmouseMove",
            value: function(t) {
                this._mouseMoveTime = ae.now();
            }
        }, {
            key: "getTimeFromFrameStart",
            value: function() {
                return ae.now() - this._frameStartTime;
            }
        }, {
            key: "render",
            value: function(t, i, n) {
                if (window.conch) this.renderToNative(t, i, n); else {
                    if (this._frameRate === c.FRAME_SLEEP) {
                        var a = ae.now();
                        if (!(a - this._frameStartTime >= 1e3)) return;
                        this._frameStartTime = a;
                    } else {
                        if (!this._visible) return this._renderCount++, void (this._renderCount % 5 == 0 && (We.I._update(), 
                        $.loopCount++, Mt.loopCount = $.loopCount, this._updateTimers()));
                        this._frameStartTime = ae.now(), Mt.loopStTm = this._frameStartTime;
                    }
                    this._renderCount++;
                    var s = (this._frameRate === c.FRAME_MOUSE ? this._frameStartTime - this._mouseMoveTime < 2e3 ? c.FRAME_FAST : c.FRAME_SLOW : this._frameRate) !== c.FRAME_SLOW, o = this._renderCount % 2 == 0;
                    if ($.renderSlow = !s, s || o) {
                        if (We.I._update(), $.loopCount++, Mt.loopCount = $.loopCount, Xe.begainSample(Xe.PERFORMANCE_LAYA), 
                        this.renderingEnabled) {
                            for (var l = 0, h = this._scene3Ds.length; l < h; l++) this._scene3Ds[l]._update();
                            t.clear(), (0, e.default)((0, r.default)(c.prototype), "render", this).call(this, t, i, n), 
                            $._StatRender.renderNotCanvas(t, i, n);
                        }
                        this.renderingEnabled && (c.clear(this._bgColor), t.flush(), Ee.instance && Ee.getInstance().endDispose()), 
                        this._updateTimers(), Xe.endSample(Xe.PERFORMANCE_LAYA);
                    }
                }
            }
        }, {
            key: "renderToNative",
            value: function(t, i, n) {
                if (this._renderCount++, this._visible) {
                    if (We.I._update(), $.loopCount++, Mt.loopCount = $.loopCount, this.renderingEnabled) {
                        for (var a = 0, s = this._scene3Ds.length; a < s; a++) this._scene3Ds[a]._update();
                        t.clear(), (0, e.default)((0, r.default)(c.prototype), "render", this).call(this, t, i, n), 
                        $._StatRender.renderNotCanvas(t, i, n);
                    }
                    this.renderingEnabled && (c.clear(this._bgColor), t.flush(), Ee.instance && Ee.getInstance().endDispose()), 
                    this._updateTimers();
                } else this._renderCount % 5 == 0 && (We.I._update(), $.loopCount++, Mt.loopCount = $.loopCount, 
                this._updateTimers());
            }
        }, {
            key: "_updateTimers",
            value: function() {
                u.systemTimer._update(), u.startTimer._update(), u.physicsTimer._update(), u.updateTimer._update(), 
                u.lateTimer._update(), u.timer._update();
            }
        }, {
            key: "_requestFullscreen",
            value: function() {
                var t = ae.document.documentElement;
                t.requestFullscreen ? t.requestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.msRequestFullscreen && t.msRequestFullscreen();
            }
        }, {
            key: "_fullScreenChanged",
            value: function() {
                u.stage.event(Jt.FULL_SCREEN_CHANGE);
            }
        }, {
            key: "exitFullscreen",
            value: function() {
                var t = ae.document;
                t.exitFullscreen ? t.exitFullscreen() : t.mozCancelFullScreen ? t.mozCancelFullScreen() : t.webkitExitFullscreen && t.webkitExitFullscreen();
            }
        }, {
            key: "isGlobalRepaint",
            value: function() {
                return this._globalRepaintGet;
            }
        }, {
            key: "setGlobalRepaint",
            value: function() {
                this._globalRepaintSet = !0;
            }
        }, {
            key: "add3DUI",
            value: function(t) {
                var e = t.rootView;
                this._3dUI.indexOf(e) >= 0 || this._3dUI.push(e);
            }
        }, {
            key: "remove3DUI",
            value: function(t) {
                var e = t.rootView, i = this._3dUI.indexOf(e);
                return i >= 0 && (this._3dUI.splice(i, 1), !0);
            }
        }, {
            key: "width",
            set: function(t) {
                this.designWidth = t, (0, e.default)((0, r.default)(c.prototype), "set_width", this).call(this, t), 
                u.systemTimer.callLater(this, this._changeCanvasSize);
            },
            get: function() {
                return (0, e.default)((0, r.default)(c.prototype), "get_width", this).call(this);
            }
        }, {
            key: "height",
            set: function(t) {
                this.designHeight = t, (0, e.default)((0, r.default)(c.prototype), "set_height", this).call(this, t), 
                u.systemTimer.callLater(this, this._changeCanvasSize);
            },
            get: function() {
                return (0, e.default)((0, r.default)(c.prototype), "get_height", this).call(this);
            }
        }, {
            key: "transform",
            set: function(t) {
                (0, e.default)((0, r.default)(c.prototype), "set_transform", this).call(this, t);
            },
            get: function() {
                return this._tfChanged && this._adjustTransform(), this._transform = this._transform || this._createTransform();
            }
        }, {
            key: "isFocused",
            get: function() {
                return this._isFocused;
            }
        }, {
            key: "isVisibility",
            get: function() {
                return this._isVisibility;
            }
        }, {
            key: "scaleMode",
            get: function() {
                return this._scaleMode;
            },
            set: function(t) {
                this._scaleMode = t, u.systemTimer.callLater(this, this._changeCanvasSize);
            }
        }, {
            key: "alignH",
            get: function() {
                return this._alignH;
            },
            set: function(t) {
                this._alignH = t, u.systemTimer.callLater(this, this._changeCanvasSize);
            }
        }, {
            key: "alignV",
            get: function() {
                return this._alignV;
            },
            set: function(t) {
                this._alignV = t, u.systemTimer.callLater(this, this._changeCanvasSize);
            }
        }, {
            key: "bgColor",
            get: function() {
                return this._bgColor;
            },
            set: function(t) {
                this._bgColor = t, this._wgColor = t ? ot.create(t).arrColor : null, de.canvas.style.background = t || "none";
            }
        }, {
            key: "mouseX",
            get: function() {
                return Math.round(Ge.instance.mouseX / this.clientScaleX);
            }
        }, {
            key: "mouseY",
            get: function() {
                return Math.round(Ge.instance.mouseY / this.clientScaleY);
            }
        }, {
            key: "clientScaleX",
            get: function() {
                return this._transform ? this._transform.getScaleX() : 1;
            }
        }, {
            key: "clientScaleY",
            get: function() {
                return this._transform ? this._transform.getScaleY() : 1;
            }
        }, {
            key: "screenMode",
            get: function() {
                return this._screenMode;
            },
            set: function(t) {
                this._screenMode = t;
            }
        }, {
            key: "visible",
            set: function(t) {
                this.visible !== t && ((0, e.default)((0, r.default)(c.prototype), "set_visible", this).call(this, t), 
                de._mainCanvas.source.style.visibility = t ? "visible" : "hidden");
            },
            get: function() {
                return (0, e.default)((0, r.default)(c.prototype), "visible", this);
            }
        }, {
            key: "fullScreenEnabled",
            set: function(t) {
                var e = ae.document, i = de.canvas;
                t ? (i.addEventListener("mousedown", this._requestFullscreen), i.addEventListener("touchstart", this._requestFullscreen), 
                e.addEventListener("fullscreenchange", this._fullScreenChanged), e.addEventListener("mozfullscreenchange", this._fullScreenChanged), 
                e.addEventListener("webkitfullscreenchange", this._fullScreenChanged), e.addEventListener("msfullscreenchange", this._fullScreenChanged)) : (i.removeEventListener("mousedown", this._requestFullscreen), 
                i.removeEventListener("touchstart", this._requestFullscreen), e.removeEventListener("fullscreenchange", this._fullScreenChanged), 
                e.removeEventListener("mozfullscreenchange", this._fullScreenChanged), e.removeEventListener("webkitfullscreenchange", this._fullScreenChanged), 
                e.removeEventListener("msfullscreenchange", this._fullScreenChanged));
            }
        }, {
            key: "frameRate",
            get: function() {
                return u.Render.isConchApp ? this._frameRateNative : this._frameRate;
            },
            set: function(t) {
                if (u.Render.isConchApp) {
                    var e = window.conch;
                    switch (t) {
                      case c.FRAME_FAST:
                        e.config.setLimitFPS(60);
                        break;

                      case c.FRAME_MOUSE:
                        e.config.setMouseFrame(2e3);
                        break;

                      case c.FRAME_SLOW:
                        e.config.setSlowFrame(!0);
                        break;

                      case c.FRAME_SLEEP:
                        e.config.setLimitFPS(1);
                    }
                    this._frameRateNative = t;
                } else this._frameRate = t;
            }
        } ]), c;
    }(Be);
    He.SCALE_NOSCALE = "noscale", He.SCALE_EXACTFIT = "exactfit", He.SCALE_SHOWALL = "showall", 
    He.SCALE_NOBORDER = "noborder", He.SCALE_FULL = "full", He.SCALE_FIXED_WIDTH = "fixedwidth", 
    He.SCALE_FIXED_HEIGHT = "fixedheight", He.SCALE_FIXED_AUTO = "fixedauto", He.ALIGN_LEFT = "left", 
    He.ALIGN_RIGHT = "right", He.ALIGN_CENTER = "center", He.ALIGN_TOP = "top", He.ALIGN_MIDDLE = "middle", 
    He.ALIGN_BOTTOM = "bottom", He.SCREEN_NONE = "none", He.SCREEN_HORIZONTAL = "horizontal", 
    He.SCREEN_VERTICAL = "vertical", He.FRAME_FAST = "fast", He.FRAME_SLOW = "slow", 
    He.FRAME_MOUSE = "mouse", He.FRAME_SLEEP = "sleep", He.clear = function(t) {
        he.set2DRenderConfig();
        var e = A.instance;
        z.worldScissorTest && e.disable(e.SCISSOR_TEST);
        var i = de.context, n = 0 == i._submits._length || h.preserveDrawingBuffer ? ot.create(t).arrColor : u.stage._wgColor;
        n ? i.clearBG(n[0], n[1], n[2], n[3]) : i.clearBG(0, 0, 0, 0), z.clear();
    }, Me.regClass("laya.display.Stage", He), Me.regClass("Laya.Stage", He);
    var ze = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                t._addEvent("keydown"), t._addEvent("keypress"), t._addEvent("keyup");
            }
        }, {
            key: "_addEvent",
            value: function(e) {
                u.Browser.document.addEventListener(e, function(i) {
                    t._dispatch(i, e);
                }, !0);
            }
        }, {
            key: "_dispatch",
            value: function(e, i) {
                if (t.enabled) {
                    t._event._stoped = !1, t._event.nativeEvent = e, t._event.keyCode = e.keyCode || e.which || e.charCode, 
                    "keydown" === i ? t._pressKeys[t._event.keyCode] = !0 : "keyup" === i && (t._pressKeys[t._event.keyCode] = null);
                    for (var n = u.stage.focus && null != u.stage.focus.event && u.stage.focus.displayedInStage ? u.stage.focus : u.stage, r = n; r; ) r.event(i, t._event.setTo(i, r, n)), 
                    r = r.parent;
                }
            }
        }, {
            key: "hasKeyDown",
            value: function(e) {
                return t._pressKeys[e];
            }
        } ]), t;
    }();
    ze._pressKeys = {}, ze.enabled = !0, ze._event = new Jt();
    var Ke = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments)).isStopped = !1, t;
        }
        return (0, s.default)(i, [ {
            key: "play",
            value: function() {}
        }, {
            key: "stop",
            value: function() {
                this.completeHandler && this.completeHandler.runWith(!1);
            }
        }, {
            key: "pause",
            value: function() {}
        }, {
            key: "resume",
            value: function() {}
        }, {
            key: "__runComplete",
            value: function(t) {
                t && t.runWith(!0);
            }
        }, {
            key: "volume",
            set: function(t) {},
            get: function() {
                return 1;
            }
        }, {
            key: "position",
            get: function() {
                return 0;
            }
        }, {
            key: "duration",
            get: function() {
                return 0;
            }
        } ]), i;
    }(B), je = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h(t) {
            var e;
            return (0, o.default)(this, h), (e = n.call(this))._audio = null, e._onEnd = e.__onEnd.bind((0, 
            i.default)(e)), e._resumePlay = e.__resumePlay.bind((0, i.default)(e)), t.addEventListener("ended", e._onEnd), 
            e._audio = t, e;
        }
        return (0, s.default)(h, [ {
            key: "__onEnd",
            value: function(t) {
                if (1 == this.loops) return this.completeHandler && (u.systemTimer.once(10, this, this.__runComplete, [ this.completeHandler ], !1), 
                this.completeHandler = null), this.stop(), void this.event(Jt.COMPLETE);
                this.loops > 0 && this.loops--, this.startTime = 0, this.play();
            }
        }, {
            key: "__resumePlay",
            value: function() {
                if (this._audio && this._audio.removeEventListener("canplay", this._resumePlay), 
                !this.isStopped) try {
                    this._audio.currentTime = this.startTime, ae.container.appendChild(this._audio), 
                    this._audio.play();
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    this.event(Jt.ERROR);
                }
            }
        }, {
            key: "play",
            value: function() {
                this.isStopped = !1;
                try {
                    this._audio.playbackRate = u.SoundManager.playbackRate, this._audio.currentTime = this.startTime;
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    return void this._audio.addEventListener("canplay", this._resumePlay);
                }
                u.SoundManager.addChannel(this), ae.container.appendChild(this._audio), "play" in this._audio && this._audio.play();
            }
        }, {
            key: "stop",
            value: function() {
                (0, e.default)((0, r.default)(h.prototype), "stop", this).call(this), this.isStopped = !0, 
                u.SoundManager.removeChannel(this), this.completeHandler = null, this._audio && ("pause" in this._audio && u.Render.isConchApp && this._audio.stop(), 
                this._audio.pause(), this._audio.removeEventListener("ended", this._onEnd), this._audio.removeEventListener("canplay", this._resumePlay), 
                u.Browser.onIE || this._audio != u.AudioSound._musicAudio && u.Pool.recover("audio:" + this.url, this._audio), 
                ae.removeElement(this._audio), this._audio = null, u.SoundManager.autoReleaseSound && u.SoundManager.disposeSoundLater(this.url));
            }
        }, {
            key: "pause",
            value: function() {
                this.isStopped = !0, u.SoundManager.removeChannel(this), this._audio && ("pause" in this._audio && this._audio.pause(), 
                u.SoundManager.autoReleaseSound && u.SoundManager.disposeSoundLater(this.url));
            }
        }, {
            key: "resume",
            value: function() {
                var t = this._audio;
                t && (this.isStopped = !1, 0 == t.readyState && (t.src = this.url, t.addEventListener("canplay", this._resumePlay), 
                t.load()), u.SoundManager.addChannel(this), "play" in t && t.play());
            }
        }, {
            key: "position",
            get: function() {
                return this._audio ? this._audio.currentTime : 0;
            }
        }, {
            key: "duration",
            get: function() {
                return this._audio ? this._audio.duration : 0;
            }
        }, {
            key: "volume",
            set: function(t) {
                this._audio && (this._audio.volume = t);
            },
            get: function() {
                return this._audio ? this._audio.volume : 1;
            }
        } ]), h;
    }(Ke), qe = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments)).loaded = !1, t;
        }
        return (0, s.default)(i, [ {
            key: "dispose",
            value: function() {
                var t = i._audioCache[this.url];
                c.clearBySign("audio:" + this.url), t && (de.isConchApp || (t.src = ""), delete i._audioCache[this.url]);
            }
        }, {
            key: "load",
            value: function(t) {
                var e;
                if (t = O.formatURL(t), this.url = t, t == u.SoundManager._bgMusic ? (i._initMusicAudio(), 
                (e = i._musicAudio).src != t && (delete i._audioCache[e.src], e = null)) : e = i._audioCache[t], 
                e && e.readyState >= 2) this.event(Jt.COMPLETE); else {
                    e || (t == u.SoundManager._bgMusic ? (i._initMusicAudio(), e = i._musicAudio) : e = ae.createElement("audio"), 
                    i._audioCache[t] = e, e.src = t), e.addEventListener("canplaythrough", r), e.addEventListener("error", a);
                    var n = this;
                    this.audio = e, e.load ? e.load() : a();
                }
                function r() {
                    s(), n.loaded = !0, n.event(Jt.COMPLETE);
                }
                function a() {
                    e.load = null, s(), n.event(Jt.ERROR);
                }
                function s() {
                    e.removeEventListener("canplaythrough", r), e.removeEventListener("error", a);
                }
            }
        }, {
            key: "play",
            value: function() {
                var t, e, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (!this.url) return null;
                if (this.url == u.SoundManager._bgMusic ? "" != (t = i._musicAudio).src && t.src != this.url && (delete i._audioCache[t.src], 
                i._audioCache[this.url] = t) : t = i._audioCache[this.url], !t) return null;
                e = c.getItem("audio:" + this.url), de.isConchApp ? e || ((e = ae.createElement("audio")).src = this.url) : this.url == u.SoundManager._bgMusic ? (i._initMusicAudio(), 
                (e = i._musicAudio).src = this.url) : e = e || t.cloneNode(!0);
                var a = new je(e);
                return a.url = this.url, a.loops = r, a.startTime = n, a.play(), u.SoundManager.addChannel(a), 
                a;
            }
        }, {
            key: "duration",
            get: function() {
                var t;
                return (t = i._audioCache[this.url]) ? t.duration : 0;
            }
        } ], [ {
            key: "_initMusicAudio",
            value: function() {
                i._musicAudio || (i._musicAudio || (i._musicAudio = ae.createElement("audio")), 
                de.isConchApp || ae.document.addEventListener("mousedown", i._makeMusicOK));
            }
        }, {
            key: "_makeMusicOK",
            value: function() {
                ae.document.removeEventListener("mousedown", i._makeMusicOK), i._musicAudio.src ? i._musicAudio.play() : (i._musicAudio.src = "", 
                i._musicAudio.load());
            }
        } ]), i;
    }(B);
    qe._audioCache = {};
    var Ze = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h() {
            var t;
            return (0, o.default)(this, h), (t = n.call(this)).bufferSource = null, t._currentTime = 0, 
            t._volume = 1, t._startTime = 0, t._pauseTime = 0, t.context = u.WebAudioSound.ctx, 
            t._onPlayEnd = st.bind(t.__onPlayEnd, (0, i.default)(t)), t.context.createGain ? t.gain = t.context.createGain() : t.gain = t.context.createGainNode(), 
            t;
        }
        return (0, s.default)(h, [ {
            key: "play",
            value: function() {
                if (u.SoundManager.addChannel(this), this.isStopped = !1, this._clearBufferSource(), 
                this.audioBuffer) {
                    if (this.startTime >= this.duration) return stop();
                    var t = this.context, e = this.gain, i = t.createBufferSource();
                    this.bufferSource = i, i.buffer = this.audioBuffer, i.connect(e), e && e.disconnect(), 
                    e.connect(t.destination), i.onended = this._onPlayEnd, this._startTime = ae.now(), 
                    this.gain.gain.setTargetAtTime ? this.gain.gain.setTargetAtTime(this._volume, this.context.currentTime, h.SetTargetDelay) : this.gain.gain.value = this._volume, 
                    0 == this.loops && (i.loop = !0), i.playbackRate.setTargetAtTime ? i.playbackRate.setTargetAtTime(u.SoundManager.playbackRate, this.context.currentTime, h.SetTargetDelay) : i.playbackRate.value = u.SoundManager.playbackRate, 
                    i.start(0, this.startTime), this._currentTime = 0;
                }
            }
        }, {
            key: "__onPlayEnd",
            value: function() {
                if (1 == this.loops) return this.completeHandler && (u.timer.once(10, this, this.__runComplete, [ this.completeHandler ], !1), 
                this.completeHandler = null), this.stop(), void this.event(Jt.COMPLETE);
                this.loops > 0 && this.loops--, this.startTime = 0, this.play();
            }
        }, {
            key: "_clearBufferSource",
            value: function() {
                if (this.bufferSource) {
                    var t = this.bufferSource;
                    t.stop ? t.stop(0) : t.noteOff(0), t.disconnect(0), t.onended = null, h._tryCleanFailed || this._tryClearBuffer(t), 
                    this.bufferSource = null;
                }
            }
        }, {
            key: "_tryClearBuffer",
            value: function(t) {
                try {
                    t.buffer = null;
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    h._tryCleanFailed = !0;
                }
            }
        }, {
            key: "stop",
            value: function() {
                (0, e.default)((0, r.default)(h.prototype), "stop", this).call(this), this._clearBufferSource(), 
                this.audioBuffer = null, this.gain && this.gain.disconnect(), this.isStopped = !0, 
                u.SoundManager.removeChannel(this), this.completeHandler = null, u.SoundManager.autoReleaseSound && u.SoundManager.disposeSoundLater(this.url);
            }
        }, {
            key: "pause",
            value: function() {
                this.isStopped || (this._pauseTime = this.position), this._clearBufferSource(), 
                this.gain && this.gain.disconnect(), this.isStopped = !0, u.SoundManager.removeChannel(this), 
                u.SoundManager.autoReleaseSound && u.SoundManager.disposeSoundLater(this.url);
            }
        }, {
            key: "resume",
            value: function() {
                this.startTime = this._pauseTime, this.play();
            }
        }, {
            key: "position",
            get: function() {
                return this.bufferSource ? (ae.now() - this._startTime) / 1e3 + this.startTime : 0;
            }
        }, {
            key: "duration",
            get: function() {
                return this.audioBuffer ? this.audioBuffer.duration : 0;
            }
        }, {
            key: "volume",
            set: function(t) {
                this._volume = t, this.isStopped || (this.gain.gain.setTargetAtTime ? this.gain.gain.setTargetAtTime(t, this.context.currentTime, h.SetTargetDelay) : this.gain.gain.value = t);
            },
            get: function() {
                return this._volume;
            }
        } ]), h;
    }(Ke);
    Ze._tryCleanFailed = !1, Ze.SetTargetDelay = .001;
    var Qe = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments)).loaded = !1, t._disposed = !1, 
            t;
        }
        return (0, s.default)(i, [ {
            key: "load",
            value: function(t) {
                var e = this;
                if (t = O.formatURL(t), this.url = t, this.audioBuffer = i._dataCache[t], this.audioBuffer) this._loaded(this.audioBuffer); else if (i.e.on("loaded:" + t, this, this._loaded), 
                i.e.on("err:" + t, this, this._err), !i.__loadingSound[t]) {
                    i.__loadingSound[t] = !0;
                    var n = new XMLHttpRequest();
                    n.open("GET", t, !0), n.responseType = "arraybuffer", n.onload = function() {
                        e._disposed ? e._removeLoadEvents() : (e.data = n.response, i.buffs.push({
                            buffer: e.data,
                            url: e.url
                        }), i.decode());
                    }, n.onerror = function(t) {
                        e._err();
                    }, n.send();
                }
            }
        }, {
            key: "_err",
            value: function() {
                this._removeLoadEvents(), i.__loadingSound[this.url] = !1, this.event(Jt.ERROR);
            }
        }, {
            key: "_loaded",
            value: function(t) {
                this._removeLoadEvents(), this._disposed || (this.audioBuffer = t, i._dataCache[this.url] = this.audioBuffer, 
                this.loaded = !0, this.event(Jt.COMPLETE));
            }
        }, {
            key: "_removeLoadEvents",
            value: function() {
                i.e.off("loaded:" + this.url, this, this._loaded), i.e.off("err:" + this.url, this, this._err);
            }
        }, {
            key: "__playAfterLoaded",
            value: function() {
                if (this.__toPlays) {
                    var t, e, i, n;
                    for (e = (i = this.__toPlays).length, t = 0; t < e; t++) (n = i[t])[2] && !n[2].isStopped && this.play(n[0], n[1], n[2]);
                    this.__toPlays.length = 0;
                }
            }
        }, {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                return i = i || new Ze(), this.audioBuffer || this.url && (this.__toPlays || (this.__toPlays = []), 
                this.__toPlays.push([ t, e, i ]), this.once(Jt.COMPLETE, this, this.__playAfterLoaded), 
                this.load(this.url)), i.url = this.url, i.loops = e, i.audioBuffer = this.audioBuffer, 
                i.startTime = t, i.play(), u.SoundManager.addChannel(i), i;
            }
        }, {
            key: "dispose",
            value: function() {
                this._disposed = !0, delete i._dataCache[this.url], delete i.__loadingSound[this.url], 
                this.audioBuffer = null, this.data = null, this.__toPlays = [];
            }
        }, {
            key: "duration",
            get: function() {
                return this.audioBuffer ? this.audioBuffer.duration : 0;
            }
        } ], [ {
            key: "decode",
            value: function() {
                i.buffs.length <= 0 || i.isDecoding || (i.isDecoding = !0, i.tInfo = i.buffs.shift(), 
                i.ctx.decodeAudioData(i.tInfo.buffer, i._done, i._fail));
            }
        }, {
            key: "_done",
            value: function(t) {
                i.e.event("loaded:" + i.tInfo.url, t), i.isDecoding = !1, i.decode();
            }
        }, {
            key: "_fail",
            value: function() {
                i.e.event("err:" + i.tInfo.url, null), i.isDecoding = !1, i.decode();
            }
        }, {
            key: "_playEmptySound",
            value: function() {
                if (null != i.ctx) {
                    var t = i.ctx.createBufferSource();
                    t.buffer = i._miniBuffer, t.connect(i.ctx.destination), t.start(0, 0, 0);
                }
            }
        }, {
            key: "_unlock",
            value: function() {
                i._unlocked || (i._playEmptySound(), "running" == i.ctx.state && (window.document.removeEventListener("mousedown", i._unlock, !0), 
                window.document.removeEventListener("touchend", i._unlock, !0), window.document.removeEventListener("touchstart", i._unlock, !0), 
                i._unlocked = !0));
            }
        }, {
            key: "initWebAudio",
            value: function() {
                "running" != i.ctx.state && (i._unlock(), window.document.addEventListener("mousedown", i._unlock, !0), 
                window.document.addEventListener("touchend", i._unlock, !0), window.document.addEventListener("touchstart", i._unlock, !0));
            }
        } ]), i;
    }(B);
    Qe._dataCache = {}, Qe.webAudioEnabled = window.AudioContext || window.webkitAudioContext || window.mozAudioContext, 
    Qe.ctx = Qe.webAudioEnabled ? new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)() : void 0, 
    Qe.buffs = [], Qe.isDecoding = !1, Qe._miniBuffer = Qe.ctx ? Qe.ctx.createBuffer(1, 1, 22050) : void 0, 
    Qe.e = new B(), Qe._unlocked = !1, Qe.__loadingSound = {};
    var $e = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                var e = u.Browser.window, i = !!(e.AudioContext || e.webkitAudioContext || e.mozAudioContext);
                return i && Qe.initWebAudio(), t._soundClass = i ? Qe : qe, ae.onTBMiniGame || qe._initMusicAudio(), 
                t._musicClass = qe, i;
            }
        }, {
            key: "addChannel",
            value: function(e) {
                t._channels.indexOf(e) >= 0 || t._channels.push(e);
            }
        }, {
            key: "removeChannel",
            value: function(e) {
                var i;
                for (i = t._channels.length - 1; i >= 0; i--) t._channels[i] == e && t._channels.splice(i, 1);
            }
        }, {
            key: "disposeSoundLater",
            value: function(e) {
                t._lastSoundUsedTimeDic[e] = u.Browser.now(), t._isCheckingDispose || (t._isCheckingDispose = !0, 
                u.timer.loop(5e3, null, t._checkDisposeSound));
            }
        }, {
            key: "_checkDisposeSound",
            value: function() {
                var e, i = u.Browser.now(), n = !1;
                for (e in t._lastSoundUsedTimeDic) i - t._lastSoundUsedTimeDic[e] > 3e4 ? (delete t._lastSoundUsedTimeDic[e], 
                t.disposeSoundIfNotUsed(e)) : n = !0;
                n || (t._isCheckingDispose = !1, u.timer.clear(null, t._checkDisposeSound));
            }
        }, {
            key: "disposeSoundIfNotUsed",
            value: function(e) {
                var i;
                for (i = t._channels.length - 1; i >= 0; i--) if (t._channels[i].url == e) return;
                t.destroySound(e);
            }
        }, {
            key: "_visibilityChange",
            value: function() {
                u.stage.isVisibility ? t._stageOnFocus() : t._stageOnBlur();
            }
        }, {
            key: "_stageOnBlur",
            value: function() {
                t._isActive = !1, t._musicChannel && (t._musicChannel.isStopped || (t._blurPaused = !0, 
                t._musicChannel.pause())), t.stopAllSound(), u.stage.once(Jt.MOUSE_DOWN, null, t._stageOnFocus);
            }
        }, {
            key: "_recoverWebAudio",
            value: function() {
                Qe.ctx && "running" != Qe.ctx.state && Qe.ctx.resume && Qe.ctx.resume();
            }
        }, {
            key: "_stageOnFocus",
            value: function() {
                t._isActive = !0, t._recoverWebAudio(), u.stage.off(Jt.MOUSE_DOWN, null, t._stageOnFocus), 
                t._blurPaused && t._musicChannel && t._musicChannel.isStopped && (t._blurPaused = !1, 
                t._musicChannel.resume());
            }
        }, {
            key: "playSound",
            value: function(e) {
                var i, n, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                if (!t._isActive || !e) return null;
                if (t._muted) return null;
                if (t._recoverWebAudio(), (e = O.formatURL(e)) == t._bgMusic) {
                    if (t._musicMuted) return null;
                } else {
                    if (u.Render.isConchApp) {
                        var l = st.getFileExtension(e);
                        if ("wav" != l && "ogg" != l) return alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document."), 
                        null;
                    }
                    if (t._soundMuted) return null;
                }
                return ae._isMiniGame || (i = u.loader.getRes(e)), s || (s = t._soundClass), i || ((i = new s()).load(e), 
                ae._isMiniGame || u.Loader.cacheRes(e, i)), (n = i.play(o, r)) ? (n.url = e, n.volume = e == t._bgMusic ? t.musicVolume : t.soundVolume, 
                n.completeHandler = a, n) : null;
            }
        }, {
            key: "destroySound",
            value: function(t) {
                var e = u.loader.getRes(t);
                e && (u.Loader.clearRes(t), e.dispose());
            }
        }, {
            key: "playMusic",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                return e = O.formatURL(e), t._bgMusic = e, t._musicChannel && t._musicChannel.stop(), 
                t._musicChannel = t.playSound(e, i, n, t._musicClass, r);
            }
        }, {
            key: "stopSound",
            value: function(e) {
                var i, n;
                for (e = O.formatURL(e), i = t._channels.length - 1; i >= 0; i--) (n = t._channels[i]).url == e && n.stop();
            }
        }, {
            key: "stopAll",
            value: function() {
                var e;
                for (t._bgMusic = null, e = t._channels.length - 1; e >= 0; e--) t._channels[e].stop();
            }
        }, {
            key: "stopAllSound",
            value: function() {
                var e, i;
                for (e = t._channels.length - 1; e >= 0; e--) (i = t._channels[e]).url != t._bgMusic && i.stop();
            }
        }, {
            key: "stopMusic",
            value: function() {
                t._musicChannel && t._musicChannel.stop(), t._bgMusic = null;
            }
        }, {
            key: "setSoundVolume",
            value: function(e) {
                var i, n, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                if (r) r = O.formatURL(r), t._setVolume(r, e); else for (t.soundVolume = e, i = t._channels.length - 1; i >= 0; i--) (n = t._channels[i]).url != t._bgMusic && (n.volume = e);
            }
        }, {
            key: "setMusicVolume",
            value: function(e) {
                t.musicVolume = e, t._setVolume(t._bgMusic, e);
            }
        }, {
            key: "_setVolume",
            value: function(e, i) {
                var n, r;
                for (e = O.formatURL(e), n = t._channels.length - 1; n >= 0; n--) (r = t._channels[n]).url == e && (r.volume = i);
            }
        }, {
            key: "autoStopMusic",
            set: function(e) {
                u.stage.off(Jt.BLUR, null, t._stageOnBlur), u.stage.off(Jt.FOCUS, null, t._stageOnFocus), 
                u.stage.off(Jt.VISIBILITY_CHANGE, null, t._visibilityChange), t._autoStopMusic = e, 
                e && (u.stage.on(Jt.BLUR, null, t._stageOnBlur), u.stage.on(Jt.FOCUS, null, t._stageOnFocus), 
                u.stage.on(Jt.VISIBILITY_CHANGE, null, t._visibilityChange));
            },
            get: function() {
                return t._autoStopMusic;
            }
        }, {
            key: "muted",
            set: function(e) {
                e != t._muted && (e && t.stopAllSound(), t.musicMuted = e, t._muted = e);
            },
            get: function() {
                return t._muted;
            }
        }, {
            key: "soundMuted",
            set: function(e) {
                t._soundMuted = e;
            },
            get: function() {
                return t._soundMuted;
            }
        }, {
            key: "musicMuted",
            set: function(e) {
                e != t._musicMuted && (e ? (t._bgMusic && t._musicChannel && !t._musicChannel.isStopped ? u.Render.isConchApp ? t._musicChannel._audio && (t._musicChannel._audio.muted = !0) : t._musicChannel.pause() : t._musicChannel = null, 
                t._musicMuted = e) : (t._musicMuted = e, t._bgMusic && t._musicChannel && (u.Render.isConchApp ? t._musicChannel._audio && (t._musicChannel._audio.muted = !1) : t._musicChannel.resume())));
            },
            get: function() {
                return t._musicMuted;
            }
        }, {
            key: "useAudioMusic",
            get: function() {
                return t._useAudioMusic;
            },
            set: function(e) {
                t._useAudioMusic = e, t._musicClass = e ? qe : null;
            }
        } ]), t;
    }();
    $e.musicVolume = 1, $e.soundVolume = 1, $e.playbackRate = 1, $e._useAudioMusic = !0, 
    $e._muted = !1, $e._soundMuted = !1, $e._musicMuted = !1, $e._bgMusic = null, $e._musicChannel = null, 
    $e._channels = [], $e._blurPaused = !1, $e._isActive = !0, $e._lastSoundUsedTimeDic = {}, 
    $e._isCheckingDispose = !1, $e.autoReleaseSound = !0;
    var Je = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "create",
            value: function() {
                return this.json ? u.SceneUtils.createByData(null, this.json) : null;
            }
        } ]), t;
    }(), ti = function() {
        function t() {
            (0, o.default)(this, t), this._fontCharDic = {}, this._fontWidthMap = {}, this._maxWidth = 0, 
            this._spaceWidth = 10, this.fontSize = 12, this.autoScaleSize = !1, this.letterSpacing = 0;
        }
        return (0, s.default)(t, [ {
            key: "loadFont",
            value: function(t, e) {
                this._path = t, this._complete = e, t && -1 !== t.indexOf(".fnt") ? u.loader.load([ {
                    url: t,
                    type: u.Loader.XML
                }, {
                    url: t.replace(".fnt", ".png"),
                    type: u.Loader.IMAGE
                } ], D.create(this, this._onLoaded)) : console.error('Bitmap font configuration information must be a ".fnt" file');
            }
        }, {
            key: "_onLoaded",
            value: function() {
                this.parseFont(u.Loader.getRes(this._path), u.Loader.getRes(this._path.replace(".fnt", ".png"))), 
                this._complete && this._complete.run();
            }
        }, {
            key: "parseFont",
            value: function(t, e) {
                if (null != t && null != e) {
                    this._texture = e;
                    var i = t.getElementsByTagName("info");
                    if (!i[0].getAttributeNode) return this.parseFont2(t, e);
                    this.fontSize = parseInt(i[0].getAttributeNode("size").nodeValue);
                    var n = i[0].getAttributeNode("padding").nodeValue.split(",");
                    this._padding = [ parseInt(n[0]), parseInt(n[1]), parseInt(n[2]), parseInt(n[3]) ];
                    var r = t.getElementsByTagName("char"), a = 0;
                    for (a = 0; a < r.length; a++) {
                        var s = r[a], o = parseInt(s.getAttributeNode("id").nodeValue), l = parseInt(s.getAttributeNode("xoffset").nodeValue) / 1, h = parseInt(s.getAttributeNode("yoffset").nodeValue) / 1, u = parseInt(s.getAttributeNode("xadvance").nodeValue) / 1, c = new R();
                        c.x = parseInt(s.getAttributeNode("x").nodeValue), c.y = parseInt(s.getAttributeNode("y").nodeValue), 
                        c.width = parseInt(s.getAttributeNode("width").nodeValue), c.height = parseInt(s.getAttributeNode("height").nodeValue);
                        var _ = te.create(e, c.x, c.y, c.width, c.height, l, h);
                        this._maxWidth = Math.max(this._maxWidth, u + this.letterSpacing), this._fontCharDic[o] = _, 
                        this._fontWidthMap[o] = u;
                    }
                }
            }
        }, {
            key: "parseFont2",
            value: function(t, e) {
                if (null != t && null != e) {
                    this._texture = e;
                    var i = t.getElementsByTagName("info");
                    this.fontSize = parseInt(i[0].attributes.size.nodeValue);
                    var n = i[0].attributes.padding.nodeValue.split(",");
                    this._padding = [ parseInt(n[0]), parseInt(n[1]), parseInt(n[2]), parseInt(n[3]) ];
                    var r = t.getElementsByTagName("char"), a = 0;
                    for (a = 0; a < r.length; a++) {
                        var s = r[a].attributes, o = parseInt(s.id.nodeValue), l = parseInt(s.xoffset.nodeValue) / 1, h = parseInt(s.yoffset.nodeValue) / 1, u = parseInt(s.xadvance.nodeValue) / 1, c = new R();
                        c.x = parseInt(s.x.nodeValue), c.y = parseInt(s.y.nodeValue), c.width = parseInt(s.width.nodeValue), 
                        c.height = parseInt(s.height.nodeValue);
                        var _ = te.create(e, c.x, c.y, c.width, c.height, l, h);
                        this._maxWidth = Math.max(this._maxWidth, u + this.letterSpacing), this._fontCharDic[o] = _, 
                        this._fontWidthMap[o] = u;
                    }
                }
            }
        }, {
            key: "getCharTexture",
            value: function(t) {
                return this._fontCharDic[t.charCodeAt(0)];
            }
        }, {
            key: "destroy",
            value: function() {
                if (this._texture) {
                    for (var t in this._fontCharDic) {
                        var e = this._fontCharDic[t];
                        e && e.destroy();
                    }
                    this._texture.destroy(), this._fontCharDic = null, this._fontWidthMap = null, this._texture = null, 
                    this._complete = null, this._padding = null;
                }
            }
        }, {
            key: "setSpaceWidth",
            value: function(t) {
                this._spaceWidth = t;
            }
        }, {
            key: "getCharWidth",
            value: function(t) {
                var e = t.charCodeAt(0);
                return this._fontWidthMap[e] ? this._fontWidthMap[e] + this.letterSpacing : " " === t ? this._spaceWidth + this.letterSpacing : 0;
            }
        }, {
            key: "getTextWidth",
            value: function(t) {
                for (var e = 0, i = 0, n = t.length; i < n; i++) e += this.getCharWidth(t.charAt(i));
                return e;
            }
        }, {
            key: "getMaxWidth",
            value: function() {
                return this._maxWidth;
            }
        }, {
            key: "getMaxHeight",
            value: function() {
                return this.fontSize;
            }
        }, {
            key: "_drawText",
            value: function(t, e, i, n, r, a) {
                var s, o = this.getTextWidth(t), l = 0;
                "center" === r && (l = (a - o) / 2), "right" === r && (l = a - o);
                for (var h = 0, u = 0, c = t.length; u < c; u++) (s = this.getCharTexture(t.charAt(u))) && (e.graphics.drawImage(s, i + h + l, n), 
                h += this.getCharWidth(t.charAt(u)));
            }
        } ]), t;
    }();
    Me.regClass("laya.display.BitmapFont", ti), Me.regClass("Laya.BitmapFont", ti);
    var ei = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments))._http = new XMLHttpRequest(), 
            t;
        }
        return (0, s.default)(i, [ {
            key: "send",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "get", r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "text", a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                this._responseType = r, this._data = null, (ae.onVVMiniGame || ae.onQGMiniGame || ae.onQQMiniGame || ae.onAlipayMiniGame || ae.onBLMiniGame || ae.onHWMiniGame || ae.onTTMiniGame || ae.onTBMiniGame) && (t = i._urlEncode(t)), 
                this._url = t;
                var s = this, o = this._http;
                o.open(n, t, !0);
                var l = !1;
                if (a) for (var h = 0; h < a.length; h++) o.setRequestHeader(a[h++], a[h]); else window.conch || (e && "string" != typeof e ? (o.setRequestHeader("Content-Type", "application/json"), 
                e instanceof ArrayBuffer || "string" == typeof e || (l = !0)) : o.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
                var u = "arraybuffer" !== r ? "text" : "arraybuffer";
                o.responseType = u, o.dataType && (o.dataType = u), o.onerror = function(t) {
                    s._onError(t);
                }, o.onabort = function(t) {
                    s._onAbort(t);
                }, o.onprogress = function(t) {
                    s._onProgress(t);
                }, o.onload = function(t) {
                    s._onLoad(t);
                }, ae.onBLMiniGame && ae.onAndroid && !e && (e = {}), o.send(l ? JSON.stringify(e) : e);
            }
        }, {
            key: "_onProgress",
            value: function(t) {
                t && t.lengthComputable && this.event(Jt.PROGRESS, t.loaded / t.total);
            }
        }, {
            key: "_onAbort",
            value: function(t) {
                this.error("Request was aborted by user");
            }
        }, {
            key: "_onError",
            value: function(t) {
                this.error("Request failed Status:" + this._http.status + " text:" + this._http.statusText);
            }
        }, {
            key: "_onLoad",
            value: function(t) {
                var e = this._http, i = void 0 !== e.status ? e.status : 200;
                200 === i || 204 === i || 0 === i ? this.complete() : this.error("[" + e.status + "]" + e.statusText + ":" + e.responseURL);
            }
        }, {
            key: "error",
            value: function(t) {
                this.clear(), console.warn(this.url, t), this.event(Jt.ERROR, t);
            }
        }, {
            key: "complete",
            value: function() {
                this.clear();
                var t = !0;
                try {
                    "json" === this._responseType ? this._data = JSON.parse(this._http.responseText) : "xml" === this._responseType ? this._data = st.parseXMLFromString(this._http.responseText) : this._data = this._http.response || this._http.responseText;
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    t = !1, this.error(e.message);
                }
                t && this.event(Jt.COMPLETE, this._data instanceof Array ? [ this._data ] : this._data);
            }
        }, {
            key: "clear",
            value: function() {
                var t = this._http;
                t.onerror = t.onabort = t.onprogress = t.onload = null;
            }
        }, {
            key: "url",
            get: function() {
                return this._url;
            }
        }, {
            key: "data",
            get: function() {
                return this._data;
            }
        }, {
            key: "http",
            get: function() {
                return this._http;
            }
        } ]), i;
    }(B);
    ei._urlEncode = encodeURI;
    var ii = function(e) {
        (0, a.default)(n, e);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.apply(this, arguments))._customParse = !1, 
            t;
        }
        return (0, s.default)(n, [ {
            key: "load",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : u.WorkerLoader.enable;
                if (t) {
                    var o;
                    if (n.setGroup(t, "666"), this._url = t, 0 !== t.indexOf("data:image") || e ? t = O.formatURL(t) : e = n.IMAGE, 
                    this._type = e || (e = n.getTypeFromUrl(this._url)), this._cache = i, this._useWorkerLoader = s, 
                    this._data = null, s && u.WorkerLoader.enableWorkerLoader(), e == n.IMAGE ? (o = n.textureMap[t]) && o.bitmap && o.bitmap.destroyed && (o = null) : o = n.loadedMap[t], 
                    !a && o) return this._data = o, this.event(Jt.PROGRESS, 1), void this.event(Jt.COMPLETE, this._data);
                    if (r && n.setGroup(t, r), null != n.parserMap[e]) return this._customParse = !0, 
                    void (n.parserMap[e] instanceof D ? n.parserMap[e].runWith(this) : n.parserMap[e].call(null, this));
                    this._loadResourceFilter(e, t);
                } else this.onLoaded(null);
            }
        }, {
            key: "_loadResourceFilter",
            value: function(t, e) {
                this._loadResource(t, e);
            }
        }, {
            key: "_loadResource",
            value: function(t, e) {
                switch (t) {
                  case n.IMAGE:
                  case "htmlimage":
                  case "nativeimage":
                    this._loadImage(e);
                    break;

                  case n.SOUND:
                    this._loadSound(e);
                    break;

                  case n.TTF:
                    this._loadTTF(e);
                    break;

                  case n.ATLAS:
                  case n.PREFAB:
                  case n.PLF:
                    this._loadHttpRequestWhat(e, n.JSON);
                    break;

                  case n.FONT:
                    this._loadHttpRequestWhat(e, n.XML);
                    break;

                  case n.PLFB:
                    this._loadHttpRequestWhat(e, n.BUFFER);
                    break;

                  default:
                    this._loadHttpRequestWhat(e, t);
                }
            }
        }, {
            key: "_loadHttpRequest",
            value: function(t, e, i, n, r, a, s, o) {
                ae.onVVMiniGame || ae.onHWMiniGame ? this._http = new ei() : this._http || (this._http = new ei()), 
                a && this._http.on(Jt.PROGRESS, r, a), n && this._http.on(Jt.COMPLETE, i, n), this._http.on(Jt.ERROR, s, o), 
                this._http.send(t, null, "get", e);
            }
        }, {
            key: "_loadHtmlImage",
            value: function(t, e, i, r, a) {
                var s;
                function o() {
                    var e = s;
                    e.onload = null, e.onerror = null, delete n._imgCache[t];
                }
                (s = new ae.window.Image()).crossOrigin = "", s.onload = function() {
                    o(), i.call(e, s);
                }, s.onerror = function() {
                    o(), a.call(r);
                }, s.src = t, n._imgCache[t] = s;
            }
        }, {
            key: "_loadHttpRequestWhat",
            value: function(t, e) {
                n.preLoadedMap[t] ? this.onLoaded(n.preLoadedMap[t]) : this._loadHttpRequest(t, e, this, this.onLoaded, this, this.onProgress, this, this.onError);
            }
        }, {
            key: "_loadTTF",
            value: function(t) {
                t = O.formatURL(t);
                var e = new u.TTFLoader();
                e.complete = D.create(this, this.onLoaded), e.load(t);
            }
        }, {
            key: "_loadImage",
            value: function(t) {
                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this;
                e && (t = O.formatURL(t));
                var r = function() {
                    i.event(Jt.ERROR, "Load image failed");
                };
                if ("nativeimage" === this._type) this._loadHtmlImage(t, this, this.onLoaded, this, r); else {
                    var a = st.getFileExtension(t);
                    "bin" == a && this._url && (a = st.getFileExtension(this._url)), "ktx" === a || "pvr" === a ? this._loadHttpRequest(t, n.BUFFER, this, this.onLoaded, this, this.onProgress, this, this.onError) : this._loadHtmlImage(t, this, this.onLoaded, this, r);
                }
            }
        }, {
            key: "_loadSound",
            value: function(t) {
                var e = new $e._soundClass(), i = this;
                function n() {
                    e.offAll();
                }
                e.on(Jt.COMPLETE, this, function() {
                    n(), i.onLoaded(e);
                }), e.on(Jt.ERROR, this, function() {
                    n(), e.dispose(), i.event(Jt.ERROR, "Load sound failed");
                }), e.load(t);
            }
        }, {
            key: "onProgress",
            value: function(t) {
                this._type === n.ATLAS ? this.event(Jt.PROGRESS, .3 * t) : this._originType == n.HIERARCHY ? this.event(Jt.PROGRESS, t / 3) : this.event(Jt.PROGRESS, t);
            }
        }, {
            key: "onError",
            value: function(t) {
                this.event(Jt.ERROR, t);
            }
        }, {
            key: "onLoaded",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                if ((p = this._type) == n.PLFB) this.parsePLFBData(e), this.complete(e); else if (p == n.PLF) this.parsePLFData(e), 
                this.complete(e); else if (p === n.IMAGE) {
                    var i;
                    if (e instanceof ArrayBuffer) {
                        var r;
                        switch (v = st.getFileExtension(this._url)) {
                          case "ktx":
                            r = t.TextureFormat.ETC1RGB;
                            break;

                          case "pvr":
                            r = t.TextureFormat.PVRTCRGBA_4BPPV;
                            break;

                          default:
                            return void console.error("unknown format", v);
                        }
                        (i = new X(0, 0, r, !1, !1)).wrapModeU = t.WarpMode.Clamp, i.wrapModeV = t.WarpMode.Clamp, 
                        i.setCompressData(e), i._setCreateURL(this.url);
                    } else e instanceof X ? i = e : ((i = new X(e.width, e.height, 1, !1, !1)).wrapModeU = t.WarpMode.Clamp, 
                    i.wrapModeV = t.WarpMode.Clamp, i.loadImageSource(e, !0), i._setCreateURL(e.src));
                    var a = new te(i);
                    a.url = this._url, this.complete(a);
                } else if (p === n.SOUND || "nativeimage" === p) this.complete(e); else if ("htmlimage" === p) {
                    var s = new X(e.width, e.height, 1, !1, !1);
                    s.wrapModeU = t.WarpMode.Clamp, s.wrapModeV = t.WarpMode.Clamp, s.loadImageSource(e, !0), 
                    s._setCreateURL(e.src), this.complete(s);
                } else if (p === n.ATLAS) {
                    if (e.frames) {
                        var o = [];
                        if (!this._data) {
                            if (this._data = e, e.meta && e.meta.image) {
                                o = e.meta.image.split(",");
                                var l = this._url.indexOf("/") >= 0 ? "/" : "\\", h = this._url.lastIndexOf(l), u = h >= 0 ? this._url.substr(0, h + 1) : "", c = null;
                                ae.onAndroid && e.meta.compressTextureAndroid && (c = ".ktx"), ae.onIOS && e.meta.compressTextureIOS && (c = e.meta.astc ? ".ktx" : ".pvr");
                                for (var _ = 0, d = o.length; _ < d; _++) o[_] = c ? u + o[_].replace(".png", c) : u + o[_];
                            } else o = [ this._url.replace(".json", ".png") ];
                            o.reverse(), e.toLoads = o, e.pics = [];
                        }
                        this.event(Jt.PROGRESS, .3 + 1 / o.length * .6);
                        var f = O.formatURL(o.pop()), v = st.getFileExtension(f), p = n.IMAGE;
                        return "pvr" != v && "ktx" != v || (p = n.BUFFER), this._loadResourceFilter(p, f);
                    }
                    if (!(e instanceof X)) if (e instanceof ArrayBuffer) {
                        var y, g = this._http ? this._http.url : this._url;
                        switch (v = st.getFileExtension(g)) {
                          case "ktx":
                            y = t.TextureFormat.ETC1RGB;
                            break;

                          case "pvr":
                            y = t.TextureFormat.PVRTCRGBA_4BPPV;
                            break;

                          default:
                            return void console.error("unknown format", v);
                        }
                        var m = new X(0, 0, y, !1, !1);
                        m.wrapModeU = t.WarpMode.Clamp, m.wrapModeV = t.WarpMode.Clamp, m.setCompressData(e), 
                        m._setCreateURL(g), e = m;
                    } else {
                        var T = new X(e.width, e.height, 1, !1, !1);
                        T.wrapModeU = t.WarpMode.Clamp, T.wrapModeV = t.WarpMode.Clamp, T.loadImageSource(e, !0), 
                        T._setCreateURL(e.src), e = T;
                    }
                    if (this._data.pics.push(e), this._data.toLoads.length > 0) return this.event(Jt.PROGRESS, .3 + 1 / this._data.toLoads.length * .6), 
                    f = O.formatURL(this._data.toLoads.pop()), v = st.getFileExtension(f), p = n.IMAGE, 
                    "pvr" != v && "ktx" != v || (p = n.BUFFER), this._loadResourceFilter(p, f);
                    var x = this._data.frames, k = this._url.split("?")[0], E = this._data.meta && this._data.meta.prefix ? this._data.meta.prefix : k.substring(0, k.lastIndexOf(".")) + "/", R = this._data.pics, A = O.formatURL(this._url), C = n.atlasMap[A] || (n.atlasMap[A] = []);
                    C.dir = E;
                    var b = 1;
                    if (this._data.meta && this._data.meta.scale && 1 != this._data.meta.scale) for (var S in b = parseFloat(this._data.meta.scale), 
                    x) {
                        var w, M = x[S], I = R[M.frame.idx ? M.frame.idx : 0];
                        f = O.formatURL(E + S), I.scaleRate = b, w = te._create(I, M.frame.x, M.frame.y, M.frame.w, M.frame.h, M.spriteSourceSize.x, M.spriteSourceSize.y, M.sourceSize.w, M.sourceSize.h, n.getRes(f)), 
                        n.cacheTexture(f, w), w.url = f, C.push(f);
                    } else for (S in x) I = R[(M = x[S]).frame.idx ? M.frame.idx : 0], f = O.formatURL(E + S), 
                    w = te._create(I, M.frame.x, M.frame.y, M.frame.w, M.frame.h, M.spriteSourceSize.x, M.spriteSourceSize.y, M.sourceSize.w, M.sourceSize.h, n.getRes(f)), 
                    n.cacheTexture(f, w), w.url = f, C.push(f);
                    delete this._data.pics, this.complete(this._data);
                } else if (p === n.FONT) {
                    if (!e._source) return this._data = e, this.event(Jt.PROGRESS, .5), this._loadResourceFilter(n.IMAGE, this._url.replace(".fnt", ".png"));
                    var P = new ti();
                    P.parseFont(this._data, new te(e));
                    var L = this._url.split(".fnt")[0].split("/"), D = L[L.length - 1];
                    Oe.registerBitmapFont(D, P), this._data = P, this.complete(this._data);
                } else if (p === n.PREFAB) {
                    var B = new Je();
                    B.json = e, this.complete(B);
                } else this.complete(e);
            }
        }, {
            key: "parsePLFData",
            value: function(t) {
                var e, i, r;
                for (e in t) switch (r = t[e], e) {
                  case "json":
                  case "text":
                    for (i in r) n.preLoadedMap[O.formatURL(i)] = r[i];
                    break;

                  default:
                    for (i in r) n.preLoadedMap[O.formatURL(i)] = r[i];
                }
            }
        }, {
            key: "parsePLFBData",
            value: function(t) {
                var e, i, n;
                for (n = (e = new W(t)).getInt32(), i = 0; i < n; i++) this.parseOnePLFBFile(e);
            }
        }, {
            key: "parseOnePLFBFile",
            value: function(t) {
                var e, i, r;
                i = t.getUTFString(), e = t.getInt32(), r = t.readArrayBuffer(e), n.preLoadedMap[O.formatURL(i)] = r;
            }
        }, {
            key: "complete",
            value: function(t) {
                this._data = t, this._customParse ? this.event(Jt.LOADED, t instanceof Array ? [ t ] : t) : (n._loaders.push(this), 
                n._isWorking || n.checkNext());
            }
        }, {
            key: "endLoad",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                t && (this._data = t), this._cache && n.cacheRes(this._url, this._data), this.event(Jt.PROGRESS, 1), 
                this.event(Jt.COMPLETE, this.data instanceof Array ? [ this.data ] : this.data);
            }
        }, {
            key: "url",
            get: function() {
                return this._url;
            }
        }, {
            key: "type",
            get: function() {
                return this._type;
            }
        }, {
            key: "cache",
            get: function() {
                return this._cache;
            }
        }, {
            key: "data",
            get: function() {
                return this._data;
            }
        } ], [ {
            key: "getTypeFromUrl",
            value: function(t) {
                var e = st.getFileExtension(t);
                return e ? n.typeMap[e] : (console.warn("Not recognize the resources suffix", t), 
                "text");
            }
        }, {
            key: "checkNext",
            value: function() {
                n._isWorking = !0;
                for (var t = ae.now(); n._startIndex < n._loaders.length; ) if (n._loaders[n._startIndex].endLoad(), 
                n._startIndex++, ae.now() - t > n.maxTimeOut) return console.warn("loader callback cost a long time:" + (ae.now() - t) + " url=" + n._loaders[n._startIndex - 1].url), 
                void u.systemTimer.frameOnce(1, null, n.checkNext);
                n._loaders.length = 0, n._startIndex = 0, n._isWorking = !1;
            }
        }, {
            key: "clearRes",
            value: function(t) {
                t = O.formatURL(t);
                var e = n.getAtlas(t);
                if (e) {
                    for (var i = 0, r = e.length; i < r; i++) {
                        var a = e[i], s = n.getRes(a);
                        delete n.textureMap[a], s && s.destroy();
                    }
                    e.length = 0, delete n.atlasMap[t];
                }
                var o = n.textureMap[t];
                o && (o.destroy(), delete n.textureMap[t]), n.loadedMap[t] && delete n.loadedMap[t];
            }
        }, {
            key: "clearTextureRes",
            value: function(t) {
                t = O.formatURL(t);
                var e = n.getAtlas(t);
                if (e && e.length > 0) e.forEach(function(t) {
                    var e = n.getRes(t);
                    e instanceof te && e.disposeBitmap();
                }); else {
                    var i = n.getRes(t);
                    i instanceof te && i.disposeBitmap();
                }
            }
        }, {
            key: "getRes",
            value: function(t) {
                return n.textureMap[O.formatURL(t)] || n.loadedMap[O.formatURL(t)];
            }
        }, {
            key: "getAtlas",
            value: function(t) {
                return n.atlasMap[O.formatURL(t)];
            }
        }, {
            key: "cacheRes",
            value: function(t, e) {
                t = O.formatURL(t), null != n.loadedMap[t] ? console.warn("Resources already exist,is repeated loading:", t) : e instanceof te ? (n.loadedMap[t] = e.bitmap, 
                n.textureMap[t] = e) : n.loadedMap[t] = e;
            }
        }, {
            key: "cacheResForce",
            value: function(t, e) {
                n.loadedMap[t] = e;
            }
        }, {
            key: "cacheTexture",
            value: function(t, e) {
                t = O.formatURL(t), null != n.textureMap[t] ? console.warn("Resources already exist,is repeated loading:", t) : n.textureMap[t] = e;
            }
        }, {
            key: "setGroup",
            value: function(t, e) {
                n.groupMap[e] || (n.groupMap[e] = []), n.groupMap[e].push(t);
            }
        }, {
            key: "clearResByGroup",
            value: function(t) {
                if (n.groupMap[t]) {
                    var e, i = n.groupMap[t], r = i.length;
                    for (e = 0; e < r; e++) n.clearRes(i[e]);
                    i.length = 0;
                }
            }
        } ]), n;
    }(B);
    ii.TEXT = "text", ii.JSON = "json", ii.PREFAB = "prefab", ii.XML = "xml", ii.BUFFER = "arraybuffer", 
    ii.IMAGE = "image", ii.SOUND = "sound", ii.ATLAS = "atlas", ii.FONT = "font", ii.TTF = "ttf", 
    ii.PLF = "plf", ii.PLFB = "plfb", ii.HIERARCHY = "HIERARCHY", ii.MESH = "MESH", 
    ii.MATERIAL = "MATERIAL", ii.TEXTURE2D = "TEXTURE2D", ii.TEXTURECUBE = "TEXTURECUBE", 
    ii.ANIMATIONCLIP = "ANIMATIONCLIP", ii.AVATAR = "AVATAR", ii.TERRAINHEIGHTDATA = "TERRAINHEIGHTDATA", 
    ii.TERRAINRES = "TERRAIN", ii.typeMap = {
        ttf: "ttf",
        png: "image",
        jpg: "image",
        jpeg: "image",
        ktx: "image",
        pvr: "image",
        txt: "text",
        json: "json",
        prefab: "prefab",
        xml: "xml",
        als: "atlas",
        atlas: "atlas",
        mp3: "sound",
        ogg: "sound",
        wav: "sound",
        part: "json",
        fnt: "font",
        plf: "plf",
        plfb: "plfb",
        scene: "json",
        ani: "json",
        sk: "arraybuffer",
        wasm: "arraybuffer"
    }, ii.parserMap = {}, ii.maxTimeOut = 100, ii.groupMap = {}, ii.loadedMap = {}, 
    ii.atlasMap = {}, ii.textureMap = {}, ii.preLoadedMap = {}, ii._imgCache = {}, ii._loaders = [], 
    ii._isWorking = !1, ii._startIndex = 0;
    var ni = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "enable",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                u.loader.load(e, D.create(null, t._onInfoLoaded, [ i ]), null, ii.JSON);
            }
        }, {
            key: "_onInfoLoaded",
            value: function(e, i) {
                var n, r, a, s, o;
                for (n in i) for (r = (a = i[n])[0], o = (a = a[1]).length, s = 0; s < o; s++) t._fileLoadDic[r + a[s]] = n;
                e && e.run();
            }
        }, {
            key: "getFileLoadPath",
            value: function(e) {
                return t._fileLoadDic[e] || e;
            }
        } ]), t;
    }();
    ni._fileLoadDic = {};
    var ri = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            (0, o.default)(this, i), (t = e.call(this)).retryNum = 1, t.retryDelay = 0, t.maxLoader = 5, 
            t._loaders = [], t._loaderCount = 0, t._resInfos = [], t._infoPool = [], t._maxPriority = 5, 
            t._failRes = {}, t._statInfo = {
                count: 1,
                loaded: 1
            };
            for (var n = 0; n < t._maxPriority; n++) t._resInfos[n] = [];
            return t;
        }
        return (0, s.default)(i, [ {
            key: "getProgress",
            value: function() {
                return this._statInfo.loaded / this._statInfo.count;
            }
        }, {
            key: "resetProgress",
            value: function() {
                this._statInfo.count = this._statInfo.loaded = 1;
            }
        }, {
            key: "create",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, o = !(arguments.length > 7 && void 0 !== arguments[7]) || arguments[7];
                this._create(t, !0, e, i, n, r, a, s, o);
            }
        }, {
            key: "_create",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, l = !(arguments.length > 8 && void 0 !== arguments[8]) || arguments[8];
                if (t instanceof Array) {
                    var h = !0, u = t, c = u.length, _ = 0;
                    if (n) var d = D.create(n.caller, n ? n.method : null, n.args, !1);
                    for (var f = 0; f < c; f++) {
                        var v = u[f];
                        "string" == typeof v && (v = u[f] = {
                            url: v
                        }), v.progress = 0;
                    }
                    for (f = 0; f < c; f++) {
                        v = u[f];
                        var p = n ? D.create(null, function(t, e) {
                            t.progress = e;
                            for (var i = 0, n = 0; n < c; n++) i += u[n].progress;
                            var r = i / c;
                            d.runWith(r);
                        }, [ v ], !1) : null, y = n || i ? D.create(null, function(t) {
                            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                            _++, t.progress = 1, e || (h = !1), _ === c && i && i.runWith(h);
                        }, [ v ]) : null;
                        this._createOne(v.url, e, y, p, v.type || r, v.constructParams || a, v.propertyParams || s, v.priority || o, l);
                    }
                } else this._createOne(t, e, i, n, r, a, s, o, l);
            }
        }, {
            key: "_createOne",
            value: function(t, e) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 1, h = !(arguments.length > 8 && void 0 !== arguments[8]) || arguments[8], c = this.getRes(t);
                if (c) !e && c instanceof N && c._addReference(), r && r.runWith(1), n && n.runWith(c); else {
                    var _ = i.createMap[st.getFilecompatibleExtension(t)] ? st.getFilecompatibleExtension(t) : st.getFileExtension(t);
                    if (a || (a = i.createMap[_] ? i.createMap[_][0] : null), !a) return void this.load(t, n, r, a, l, h);
                    if (!ii.parserMap[a]) return void this.load(t, n, r, a, l, h);
                    this._createLoad(t, D.create(null, function(i) {
                        i && (!e && i instanceof N && i._addReference(), i._setCreateURL(t)), n && n.runWith(i), 
                        u.loader.event(t);
                    }), r, a, s, o, l, h, !0);
                }
            }
        }, {
            key: "load",
            value: function(t) {
                var e, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, o = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, h = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : u.WorkerLoader.enable;
                if (t instanceof Array) return this._loadAssets(t, n, r, a, s, o, l);
                if (a || (a = 0 === t.indexOf("data:image") ? ii.IMAGE : ii.getTypeFromUrl(t)), 
                a === ii.IMAGE ? (e = ii.textureMap[O.formatURL(t)]) && e.bitmap && e.bitmap.destroyed && (e = null) : e = ii.loadedMap[O.formatURL(t)], 
                h || null == e) {
                    var _;
                    _ = t, (t = ni.getFileLoadPath(t)) != _ && "nativeimage" !== a ? a = ii.ATLAS : _ = null;
                    var d = i._resMap[t];
                    d ? (n && (_ ? n && d._createListener(Jt.COMPLETE, this, this._resInfoLoaded, [ _, n ], !1, !1) : n && d._createListener(Jt.COMPLETE, n.caller, n.method, n.args, !1, !1)), 
                    r && d._createListener(Jt.PROGRESS, r.caller, r.method, r.args, !1, !1)) : ((d = this._infoPool.length ? this._infoPool.pop() : new ai()).url = t, 
                    d.type = a, d.cache = o, d.group = l, d.ignoreCache = h, d.useWorkerLoader = c, 
                    d.originalUrl = _, n && d.on(Jt.COMPLETE, n.caller, n.method, n.args), r && d.on(Jt.PROGRESS, r.caller, r.method, r.args), 
                    i._resMap[t] = d, s = s < this._maxPriority ? s : this._maxPriority - 1, this._resInfos[s].push(d), 
                    this._statInfo.count++, this.event(Jt.PROGRESS, this.getProgress()), this._next());
                } else u.systemTimer.callLater(this, function() {
                    r && r.runWith(1), n && n.runWith(e instanceof Array ? [ e ] : e), this._loaderCount || this.event(Jt.COMPLETE);
                });
                return this;
            }
        }, {
            key: "_resInfoLoaded",
            value: function(t, e) {
                e.runWith(ii.getRes(t));
            }
        }, {
            key: "_createLoad",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, l = !(arguments.length > 7 && void 0 !== arguments[7]) || arguments[7], h = arguments.length > 8 && void 0 !== arguments[8] && arguments[8];
                if (t instanceof Array) return this._loadAssets(t, e, n, r, o, l);
                var c = ii.getRes(t);
                if (null != c) u.systemTimer.frameOnce(1, this, function() {
                    n && n.runWith(1), e && e.runWith(c), this._loaderCount || this.event(Jt.COMPLETE);
                }); else {
                    var _ = i._resMap[t];
                    _ ? (e && _._createListener(Jt.COMPLETE, e.caller, e.method, e.args, !1, !1), n && _._createListener(Jt.PROGRESS, n.caller, n.method, n.args, !1, !1)) : ((_ = this._infoPool.length ? this._infoPool.pop() : new ai()).url = t, 
                    _.type = r, _.cache = !1, _.ignoreCache = h, _.originalUrl = null, _.group = null, 
                    _.createCache = l, _.createConstructParams = a, _.createPropertyParams = s, e && _.on(Jt.COMPLETE, e.caller, e.method, e.args), 
                    n && _.on(Jt.PROGRESS, n.caller, n.method, n.args), i._resMap[t] = _, o = o < this._maxPriority ? o : this._maxPriority - 1, 
                    this._resInfos[o].push(_), this._statInfo.count++, this.event(Jt.PROGRESS, this.getProgress()), 
                    this._next());
                }
                return this;
            }
        }, {
            key: "_next",
            value: function() {
                if (!(this._loaderCount >= this.maxLoader)) {
                    for (var t = 0; t < this._maxPriority; t++) for (var e = this._resInfos[t]; e.length > 0; ) {
                        var i = e.shift();
                        if (i) return this._doLoad(i);
                    }
                    this._loaderCount || this.event(Jt.COMPLETE);
                }
            }
        }, {
            key: "_doLoad",
            value: function(t) {
                this._loaderCount++;
                var e = this._loaders.length ? this._loaders.pop() : new ii();
                e.on(Jt.COMPLETE, null, n), e.on(Jt.PROGRESS, null, function(e) {
                    t.event(Jt.PROGRESS, e);
                }), e.on(Jt.ERROR, null, function(t) {
                    n(null);
                });
                var i = this;
                function n() {
                    var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                    e.offAll(), e._data = null, e._customParse = !1, i._loaders.push(e), i._endLoad(t, n instanceof Array ? [ n ] : n), 
                    i._loaderCount--, i._next();
                }
                e._constructParams = t.createConstructParams, e._propertyParams = t.createPropertyParams, 
                e._createCache = t.createCache, e.load(t.url, t.type, t.cache, t.group, t.ignoreCache, t.useWorkerLoader);
            }
        }, {
            key: "_endLoad",
            value: function(t, e) {
                var n = t.url;
                if (null == e) {
                    var r = this._failRes[n] || 0;
                    if (r < this.retryNum) return console.warn("[warn]Retry to load:", n), this._failRes[n] = r + 1, 
                    void u.systemTimer.once(this.retryDelay, this, this._addReTry, [ t ], !1);
                    ii.clearRes(n), console.warn("[error]Failed to load:", n), this.event(Jt.ERROR, n);
                }
                this._failRes[n] && (this._failRes[n] = 0), delete i._resMap[n], t.originalUrl && (e = ii.getRes(t.originalUrl)), 
                t.event(Jt.COMPLETE, e), t.offAll(), this._infoPool.push(t), this._statInfo.loaded++, 
                this.event(Jt.PROGRESS, this.getProgress());
            }
        }, {
            key: "_addReTry",
            value: function(t) {
                this._resInfos[this._maxPriority - 1].push(t), this._next();
            }
        }, {
            key: "clearRes",
            value: function(t) {
                ii.clearRes(t);
            }
        }, {
            key: "clearTextureRes",
            value: function(t) {
                ii.clearTextureRes(t);
            }
        }, {
            key: "getRes",
            value: function(t) {
                return ii.getRes(t);
            }
        }, {
            key: "cacheRes",
            value: function(t, e) {
                ii.cacheRes(t, e);
            }
        }, {
            key: "setGroup",
            value: function(t, e) {
                ii.setGroup(t, e);
            }
        }, {
            key: "clearResByGroup",
            value: function(t) {
                ii.clearResByGroup(t);
            }
        }, {
            key: "clearUnLoaded",
            value: function() {
                for (var t = 0; t < this._maxPriority; t++) {
                    for (var e = this._resInfos[t], n = e.length - 1; n > -1; n--) {
                        var r = e[n];
                        r && (r.offAll(), this._infoPool.push(r));
                    }
                    e.length = 0;
                }
                this._loaderCount = 0, i._resMap = {};
            }
        }, {
            key: "cancelLoadByUrls",
            value: function(t) {
                if (t) for (var e = 0, i = t.length; e < i; e++) this.cancelLoadByUrl(t[e]);
            }
        }, {
            key: "cancelLoadByUrl",
            value: function(t) {
                for (var e = 0; e < this._maxPriority; e++) for (var n = this._resInfos[e], r = n.length - 1; r > -1; r--) {
                    var a = n[r];
                    a && a.url === t && (n[r] = null, a.offAll(), this._infoPool.push(a));
                }
                i._resMap[t] && delete i._resMap[t];
            }
        }, {
            key: "_loadAssets",
            value: function(t) {
                for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, a = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o = t.length, l = 0, h = 0, u = [], c = !0, _ = 0; _ < o; _++) {
                    var d = void 0, f = t[_];
                    (d = "string" == typeof f ? {
                        url: f,
                        type: n,
                        size: 1,
                        priority: r
                    } : f).size || (d.size = 1), d.progress = 0, h += d.size, u.push(d);
                    var v = i ? D.create(null, g, [ d ], !1) : null, p = e || i ? D.create(null, y, [ d ]) : null;
                    this.load(d.url, p, v, d.type, d.priority || 1, a, d.group || s, !1, d.useWorkerLoader);
                }
                function y(t) {
                    var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                    l++, t.progress = 1, i || (c = !1), l === o && e && e.runWith(c);
                }
                function g(t, e) {
                    if (null != i) {
                        t.progress = e;
                        for (var n = 0, r = 0; r < u.length; r++) {
                            var a = u[r];
                            if (a) {
                                var s = null == a.progress ? 0 : a.progress;
                                n += null == a.size ? 0 : a.size * s;
                            }
                        }
                        var o = n / h;
                        i.runWith(o);
                    }
                }
                return this;
            }
        }, {
            key: "decodeBitmaps",
            value: function(t) {
                var e, i, n = t.length;
                for (i = u.Render._context, e = 0; e < n; e++) {
                    var r, a;
                    (r = ii.getAtlas(t[e])) ? this._decodeTexture(r[0], i) : (a = this.getRes(t[e])) && a instanceof te && this._decodeTexture(a, i);
                }
            }
        }, {
            key: "_decodeTexture",
            value: function(t, e) {
                var i = t.bitmap;
                if (t && i) {
                    var n = i.source || i.image;
                    n && n instanceof HTMLImageElement && (e.drawImage(n, 0, 0, 1, 1), e.getImageData(0, 0, 1, 1));
                }
            }
        } ], [ {
            key: "cacheRes",
            value: function(t, e) {
                ii.cacheRes(t, e);
            }
        } ]), i;
    }(B);
    ri._resMap = {}, ri.createMap = {
        atlas: [ null, ii.ATLAS ]
    };
    var ai = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return i;
    }(B), si = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                return t._baseClass || (t._baseClass = oi, oi.init()), t.items = t._baseClass.items, 
                t.support = t._baseClass.support, t.support;
            }
        }, {
            key: "setItem",
            value: function(e, i) {
                t._baseClass.setItem(e, i);
            }
        }, {
            key: "getItem",
            value: function(e) {
                return t._baseClass.getItem(e);
            }
        }, {
            key: "setJSON",
            value: function(e, i) {
                t._baseClass.setJSON(e, i);
            }
        }, {
            key: "getJSON",
            value: function(e) {
                return t._baseClass.getJSON(e);
            }
        }, {
            key: "removeItem",
            value: function(e) {
                t._baseClass.removeItem(e);
            }
        }, {
            key: "clear",
            value: function() {
                t._baseClass.clear();
            }
        } ]), t;
    }();
    si.support = !1;
    var oi = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "init",
            value: function() {
                try {
                    t.support = !0, t.items = window.localStorage, t.setItem("laya", "1"), t.removeItem("laya");
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    t.support = !1;
                }
                t.support || console.log("LocalStorage is not supprot or browser is private mode.");
            }
        }, {
            key: "setItem",
            value: function(e, i) {
                try {
                    t.support && t.items.setItem(e, i);
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    console.warn("set localStorage failed", e);
                }
            }
        }, {
            key: "getItem",
            value: function(e) {
                return t.support ? t.items.getItem(e) : null;
            }
        }, {
            key: "setJSON",
            value: function(e, i) {
                try {
                    t.support && t.items.setItem(e, JSON.stringify(i));
                } catch (e) {
                    e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                    console.warn("set localStorage failed", e);
                }
            }
        }, {
            key: "getJSON",
            value: function(e) {
                try {
                    return JSON.parse(t.support ? t.items.getItem(e) : null);
                } catch (i) {
                    i = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(i);
                    return t.items.getItem(e);
                }
            }
        }, {
            key: "removeItem",
            value: function(e) {
                t.support && t.items.removeItem(e);
            }
        }, {
            key: "clear",
            value: function() {
                t.support && t.items.clear();
            }
        } ]), t;
    }();
    oi.support = !1;
    var li = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "load",
            value: function(t) {
                this._url = t;
                var e = t.toLowerCase().split(".ttf")[0].split("/");
                this.fontName = e[e.length - 1], u.Render.isConchApp ? this._loadConch() : window.FontFace ? this._loadWithFontFace() : this._loadWithCSS();
            }
        }, {
            key: "_loadConch",
            value: function() {
                this._http = new ei(), this._http.on(Jt.ERROR, this, this._onErr), this._http.on(Jt.COMPLETE, this, this._onHttpLoaded), 
                this._http.send(this._url, null, "get", ii.BUFFER);
            }
        }, {
            key: "_onHttpLoaded",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                window.conchTextCanvas.setFontFaceFromBuffer(this.fontName, t), this._clearHttp(), 
                this._complete();
            }
        }, {
            key: "_clearHttp",
            value: function() {
                this._http && (this._http.off(Jt.ERROR, this, this._onErr), this._http.off(Jt.COMPLETE, this, this._onHttpLoaded), 
                this._http = null);
            }
        }, {
            key: "_onErr",
            value: function() {
                this._clearHttp(), this.err && (this.err.runWith("fail:" + this._url), this.err = null);
            }
        }, {
            key: "_complete",
            value: function() {
                u.systemTimer.clear(this, this._complete), u.systemTimer.clear(this, this._checkComplete), 
                this._div && this._div.parentNode && (this._div.parentNode.removeChild(this._div), 
                this._div = null), this.complete && (this.complete.runWith(this), this.complete = null);
            }
        }, {
            key: "_checkComplete",
            value: function() {
                u.Browser.measureText(t._testString, this._fontTxt).width != this._txtWidth && this._complete();
            }
        }, {
            key: "_loadWithFontFace",
            value: function() {
                var t = new window.FontFace(this.fontName, "url('" + this._url + "')");
                document.fonts.add(t);
                var e = this;
                t.loaded.then(function() {
                    e._complete();
                }), t.load();
            }
        }, {
            key: "_createDiv",
            value: function() {
                this._div = ae.createElement("div"), this._div.innerHTML = "laya";
                var t = this._div.style;
                t.fontFamily = this.fontName, t.position = "absolute", t.left = "-100px", t.top = "-100px", 
                document.body.appendChild(this._div);
            }
        }, {
            key: "_loadWithCSS",
            value: function() {
                var e = ae.createElement("style");
                e.type = "text/css", document.body.appendChild(e), e.textContent = "@font-face { font-family:'" + this.fontName + "'; src:url('" + this._url + "');}", 
                this._fontTxt = "40px " + this.fontName, this._txtWidth = ae.measureText(t._testString, this._fontTxt).width;
                var i = this;
                e.onload = function() {
                    u.systemTimer.once(1e4, i, i._complete);
                }, u.systemTimer.loop(20, this, this._checkComplete), this._createDiv();
            }
        } ]), t;
    }();
    li._testString = "LayaTTFFont";
    var hi = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "linearNone",
            value: function(t, e, i, n) {
                return i * t / n + e;
            }
        }, {
            key: "linearIn",
            value: function(t, e, i, n) {
                return i * t / n + e;
            }
        }, {
            key: "linearInOut",
            value: function(t, e, i, n) {
                return i * t / n + e;
            }
        }, {
            key: "linearOut",
            value: function(t, e, i, n) {
                return i * t / n + e;
            }
        }, {
            key: "bounceIn",
            value: function(e, i, n, r) {
                return n - t.bounceOut(r - e, 0, n, r) + i;
            }
        }, {
            key: "bounceInOut",
            value: function(e, i, n, r) {
                return e < .5 * r ? .5 * t.bounceIn(2 * e, 0, n, r) + i : .5 * t.bounceOut(2 * e - r, 0, n, r) + .5 * n + i;
            }
        }, {
            key: "bounceOut",
            value: function(t, e, i, n) {
                return (t /= n) < 1 / 2.75 ? i * (7.5625 * t * t) + e : t < 2 / 2.75 ? i * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + e : t < 2.5 / 2.75 ? i * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + e : i * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + e;
            }
        }, {
            key: "backIn",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;
                return i * (t /= n) * t * ((r + 1) * t - r) + e;
            }
        }, {
            key: "backInOut",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;
                return (t /= .5 * n) < 1 ? .5 * i * (t * t * ((1 + (r *= 1.525)) * t - r)) + e : i / 2 * ((t -= 2) * t * ((1 + (r *= 1.525)) * t + r) + 2) + e;
            }
        }, {
            key: "backOut",
            value: function(t, e, i, n) {
                var r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;
                return i * ((t = t / n - 1) * t * ((r + 1) * t + r) + 1) + e;
            }
        }, {
            key: "elasticIn",
            value: function(e, i, n, r) {
                var a, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                return 0 == e ? i : 1 == (e /= r) ? i + n : (o || (o = .3 * r), !s || n > 0 && s < n || n < 0 && s < -n ? (s = n, 
                a = o / 4) : a = o / t.PI2 * Math.asin(n / s), -s * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - a) * t.PI2 / o) + i);
            }
        }, {
            key: "elasticInOut",
            value: function(e, i, n, r) {
                var a, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                return 0 == e ? i : 2 == (e /= .5 * r) ? i + n : (o || (o = r * (.3 * 1.5)), !s || n > 0 && s < n || n < 0 && s < -n ? (s = n, 
                a = o / 4) : a = o / t.PI2 * Math.asin(n / s), e < 1 ? s * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - a) * t.PI2 / o) * -.5 + i : s * Math.pow(2, -10 * (e -= 1)) * Math.sin((e * r - a) * t.PI2 / o) * .5 + n + i);
            }
        }, {
            key: "elasticOut",
            value: function(e, i, n, r) {
                var a, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                return 0 == e ? i : 1 == (e /= r) ? i + n : (o || (o = .3 * r), !s || n > 0 && s < n || n < 0 && s < -n ? (s = n, 
                a = o / 4) : a = o / t.PI2 * Math.asin(n / s), s * Math.pow(2, -10 * e) * Math.sin((e * r - a) * t.PI2 / o) + n + i);
            }
        }, {
            key: "strongIn",
            value: function(t, e, i, n) {
                return i * (t /= n) * t * t * t * t + e;
            }
        }, {
            key: "strongInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * i * t * t * t * t * t + e : .5 * i * ((t -= 2) * t * t * t * t + 2) + e;
            }
        }, {
            key: "strongOut",
            value: function(t, e, i, n) {
                return i * ((t = t / n - 1) * t * t * t * t + 1) + e;
            }
        }, {
            key: "sineInOut",
            value: function(t, e, i, n) {
                return .5 * -i * (Math.cos(Math.PI * t / n) - 1) + e;
            }
        }, {
            key: "sineIn",
            value: function(e, i, n, r) {
                return -n * Math.cos(e / r * t.HALF_PI) + n + i;
            }
        }, {
            key: "sineOut",
            value: function(e, i, n, r) {
                return n * Math.sin(e / r * t.HALF_PI) + i;
            }
        }, {
            key: "quintIn",
            value: function(t, e, i, n) {
                return i * (t /= n) * t * t * t * t + e;
            }
        }, {
            key: "quintInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * i * t * t * t * t * t + e : .5 * i * ((t -= 2) * t * t * t * t + 2) + e;
            }
        }, {
            key: "quintOut",
            value: function(t, e, i, n) {
                return i * ((t = t / n - 1) * t * t * t * t + 1) + e;
            }
        }, {
            key: "quartIn",
            value: function(t, e, i, n) {
                return i * (t /= n) * t * t * t + e;
            }
        }, {
            key: "quartInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * i * t * t * t * t + e : .5 * -i * ((t -= 2) * t * t * t - 2) + e;
            }
        }, {
            key: "quartOut",
            value: function(t, e, i, n) {
                return -i * ((t = t / n - 1) * t * t * t - 1) + e;
            }
        }, {
            key: "cubicIn",
            value: function(t, e, i, n) {
                return i * (t /= n) * t * t + e;
            }
        }, {
            key: "cubicInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * i * t * t * t + e : .5 * i * ((t -= 2) * t * t + 2) + e;
            }
        }, {
            key: "cubicOut",
            value: function(t, e, i, n) {
                return i * ((t = t / n - 1) * t * t + 1) + e;
            }
        }, {
            key: "quadIn",
            value: function(t, e, i, n) {
                return i * (t /= n) * t + e;
            }
        }, {
            key: "quadInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * i * t * t + e : .5 * -i * (--t * (t - 2) - 1) + e;
            }
        }, {
            key: "quadOut",
            value: function(t, e, i, n) {
                return -i * (t /= n) * (t - 2) + e;
            }
        }, {
            key: "expoIn",
            value: function(t, e, i, n) {
                return 0 == t ? e : i * Math.pow(2, 10 * (t / n - 1)) + e - .001 * i;
            }
        }, {
            key: "expoInOut",
            value: function(t, e, i, n) {
                return 0 == t ? e : t == n ? e + i : (t /= .5 * n) < 1 ? .5 * i * Math.pow(2, 10 * (t - 1)) + e : .5 * i * (2 - Math.pow(2, -10 * --t)) + e;
            }
        }, {
            key: "expoOut",
            value: function(t, e, i, n) {
                return t == n ? e + i : i * (1 - Math.pow(2, -10 * t / n)) + e;
            }
        }, {
            key: "circIn",
            value: function(t, e, i, n) {
                return -i * (Math.sqrt(1 - (t /= n) * t) - 1) + e;
            }
        }, {
            key: "circInOut",
            value: function(t, e, i, n) {
                return (t /= .5 * n) < 1 ? .5 * -i * (Math.sqrt(1 - t * t) - 1) + e : .5 * i * (Math.sqrt(1 - (t -= 2) * t) + 1) + e;
            }
        }, {
            key: "circOut",
            value: function(t, e, i, n) {
                return i * Math.sqrt(1 - (t = t / n - 1) * t) + e;
            }
        } ]), t;
    }();
    hi.HALF_PI = .5 * Math.PI, hi.PI2 = 2 * Math.PI;
    var ui = function() {
        function t() {
            (0, o.default)(this, t), this.gid = 0, this.repeat = 1, this._count = 0;
        }
        return (0, s.default)(t, [ {
            key: "to",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, s = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                return this._create(t, e, i, n, r, a, s, !0, !1, !0);
            }
        }, {
            key: "from",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, s = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                return this._create(t, e, i, n, r, a, s, !1, !1, !0);
            }
        }, {
            key: "_create",
            value: function(e, i, n, r, a, s, o, l, h, c) {
                if (!e) throw new Error("Tween:target is null");
                this._target = e, this._duration = n, this._ease = r || i.ease || t.easeNone, this._complete = a || i.complete, 
                this._delay = s, this._props = [], this._usedTimer = 0, this._startTimer = ae.now(), 
                this._usedPool = h, this._delayParam = null, this.update = i.update;
                var _ = e.$_GID || (e.$_GID = st.getGID());
                return t.tweenMap[_] ? (o && t.clearTween(e), t.tweenMap[_].push(this)) : t.tweenMap[_] = [ this ], 
                c ? s <= 0 ? this.firstStart(e, i, l) : (this._delayParam = [ e, i, l ], u.timer.once(s, this, this.firstStart, this._delayParam)) : this._initProps(e, i, l), 
                this;
            }
        }, {
            key: "firstStart",
            value: function(t, e, i) {
                this._delayParam = null, t.destroyed ? this.clear() : (this._initProps(t, e, i), 
                this._beginLoop());
            }
        }, {
            key: "_initProps",
            value: function(t, e, i) {
                for (var n in e) if ("number" == typeof t[n]) {
                    var r = i ? t[n] : e[n], a = i ? e[n] : t[n];
                    this._props.push([ n, r, a - r ]), i || (t[n] = r);
                }
            }
        }, {
            key: "_beginLoop",
            value: function() {
                u.timer.frameLoop(1, this, this._doEase);
            }
        }, {
            key: "_doEase",
            value: function() {
                this._updateEase(ae.now());
            }
        }, {
            key: "_updateEase",
            value: function(e) {
                var i = this._target;
                if (i) {
                    if (i.destroyed) return t.clearTween(i);
                    var n = this._usedTimer = e - this._startTimer - this._delay;
                    if (!(n < 0)) {
                        if (n >= this._duration) return this.complete();
                        for (var r = n > 0 ? this._ease(n, 0, 1, this._duration) : 0, a = this._props, s = 0, o = a.length; s < o; s++) {
                            var l = a[s];
                            i[l[0]] = l[1] + r * l[2];
                        }
                        this.update && this.update.run();
                    }
                }
            }
        }, {
            key: "complete",
            value: function() {
                if (this._target) {
                    u.timer.runTimer(this, this.firstStart);
                    for (var t = this._target, e = this._props, i = this._complete, n = 0, r = e.length; n < r; n++) {
                        var a = e[n];
                        t[a[0]] = a[1] + a[2];
                    }
                    this.update && this.update.run(), this._count++, 0 != this.repeat && this._count >= this.repeat ? (this.clear(), 
                    i && i.run()) : this.restart();
                }
            }
        }, {
            key: "pause",
            value: function() {
                var t;
                u.timer.clear(this, this._beginLoop), u.timer.clear(this, this._doEase), u.timer.clear(this, this.firstStart), 
                (t = ae.now() - this._startTimer - this._delay) < 0 && (this._usedTimer = t);
            }
        }, {
            key: "setStartTime",
            value: function(t) {
                this._startTimer = t;
            }
        }, {
            key: "clear",
            value: function() {
                this._target && (this._remove(), this._clear());
            }
        }, {
            key: "_clear",
            value: function() {
                this.pause(), u.timer.clear(this, this.firstStart), this._complete = null, this._target = null, 
                this._ease = null, this._props = null, this._delayParam = null, this.repeat = 1, 
                this._usedPool && (this.update = null, c.recover("tween", this));
            }
        }, {
            key: "recover",
            value: function() {
                this._usedPool = !0, this._clear();
            }
        }, {
            key: "_remove",
            value: function() {
                var e = t.tweenMap[this._target.$_GID];
                if (e) for (var i = 0, n = e.length; i < n; i++) if (e[i] === this) {
                    e.splice(i, 1);
                    break;
                }
            }
        }, {
            key: "restart",
            value: function() {
                if (this.pause(), this._usedTimer = 0, this._startTimer = ae.now(), this._delayParam) u.timer.once(this._delay, this, this.firstStart, this._delayParam); else {
                    for (var t = this._props, e = 0, i = t.length; e < i; e++) {
                        var n = t[e];
                        this._target[n[0]] = n[1];
                    }
                    u.timer.once(this._delay, this, this._beginLoop);
                }
            }
        }, {
            key: "resume",
            value: function() {
                this._usedTimer >= this._duration || (this._startTimer = ae.now() - this._usedTimer - this._delay, 
                this._delayParam ? this._usedTimer < 0 ? u.timer.once(-this._usedTimer, this, this.firstStart, this._delayParam) : this.firstStart.apply(this, this._delayParam) : this._beginLoop());
            }
        }, {
            key: "progress",
            set: function(t) {
                var e = t * this._duration;
                this._startTimer = ae.now() - this._delay - e;
            }
        } ], [ {
            key: "to",
            value: function(e, i, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6], l = !(arguments.length > 7 && void 0 !== arguments[7]) || arguments[7];
                return c.getItemByClass("tween", t)._create(e, i, n, r, a, s, o, !0, l, !0);
            }
        }, {
            key: "from",
            value: function(e, i, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6], l = !(arguments.length > 7 && void 0 !== arguments[7]) || arguments[7];
                return c.getItemByClass("tween", t)._create(e, i, n, r, a, s, o, !1, l, !0);
            }
        }, {
            key: "clearAll",
            value: function(e) {
                if (e && e.$_GID) {
                    var i = t.tweenMap[e.$_GID];
                    if (i) {
                        for (var n = 0, r = i.length; n < r; n++) i[n]._clear();
                        i.length = 0;
                    }
                }
            }
        }, {
            key: "clear",
            value: function(t) {
                t.clear();
            }
        }, {
            key: "clearTween",
            value: function(e) {
                t.clearAll(e);
            }
        }, {
            key: "easeNone",
            value: function(t, e, i, n) {
                return i * t / n + e;
            }
        } ]), t;
    }();
    ui.tweenMap = [];
    var ci = function() {
        function t() {
            (0, o.default)(this, t), this.ratio = .92, this.maxOffset = 60, this._dragging = !1, 
            this._clickOnly = !0;
        }
        return (0, s.default)(t, [ {
            key: "start",
            value: function(t, e, i, n, r, a, s) {
                var o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : .92;
                this.clearTimer(), this.target = t, this.area = e, this.hasInertia = i, this.elasticDistance = e ? n : 0, 
                this.elasticBackTime = r, this.data = a, this._disableMouseEvent = s, this.ratio = o, 
                this._parent = t.parent, this._clickOnly = !0, this._dragging = !0, this._elasticRateX = this._elasticRateY = 1, 
                this._lastX = this._parent.mouseX, this._lastY = this._parent.mouseY, u.stage.on(Jt.MOUSE_UP, this, this.onStageMouseUp), 
                u.stage.on(Jt.MOUSE_OUT, this, this.onStageMouseUp), u.systemTimer.frameLoop(1, this, this.loop);
            }
        }, {
            key: "clearTimer",
            value: function() {
                u.systemTimer.clear(this, this.loop), u.systemTimer.clear(this, this.tweenMove), 
                this._tween && (this._tween.recover(), this._tween = null);
            }
        }, {
            key: "stop",
            value: function() {
                this._dragging && (Ge.instance.disableMouseEvent = !1, u.stage.off(Jt.MOUSE_UP, this, this.onStageMouseUp), 
                u.stage.off(Jt.MOUSE_OUT, this, this.onStageMouseUp), this._dragging = !1, this.target && this.area && this.backToArea(), 
                this.clear());
            }
        }, {
            key: "loop",
            value: function() {
                var t = this._parent.getMousePoint(), e = t.x, i = t.y, n = e - this._lastX, r = i - this._lastY;
                if (this._clickOnly) {
                    if (!(Math.abs(n * u.stage._canvasTransform.getScaleX()) > 1 || Math.abs(r * u.stage._canvasTransform.getScaleY()) > 1)) return;
                    this._clickOnly = !1, this._offsets || (this._offsets = []), this._offsets.length = 0, 
                    this.target.event(Jt.DRAG_START, this.data), Ge.instance.disableMouseEvent = this._disableMouseEvent;
                } else this._offsets.push(n, r);
                0 === n && 0 === r || (this._lastX = e, this._lastY = i, this.target.x += n * this._elasticRateX, 
                this.target.y += r * this._elasticRateY, this.area && this.checkArea(), this.target.event(Jt.DRAG_MOVE, this.data));
            }
        }, {
            key: "checkArea",
            value: function() {
                if (this.elasticDistance <= 0) this.backToArea(); else {
                    if (this.target._x < this.area.x) var t = this.area.x - this.target._x; else t = this.target._x > this.area.x + this.area.width ? this.target._x - this.area.x - this.area.width : 0;
                    if (this._elasticRateX = Math.max(0, 1 - t / this.elasticDistance), this.target._y < this.area.y) var e = this.area.y - this.target.y; else e = this.target._y > this.area.y + this.area.height ? this.target._y - this.area.y - this.area.height : 0;
                    this._elasticRateY = Math.max(0, 1 - e / this.elasticDistance);
                }
            }
        }, {
            key: "backToArea",
            value: function() {
                this.target.x = Math.min(Math.max(this.target._x, this.area.x), this.area.x + this.area.width), 
                this.target.y = Math.min(Math.max(this.target._y, this.area.y), this.area.y + this.area.height);
            }
        }, {
            key: "onStageMouseUp",
            value: function(t) {
                if (Ge.instance.disableMouseEvent = !1, u.stage.off(Jt.MOUSE_UP, this, this.onStageMouseUp), 
                u.stage.off(Jt.MOUSE_OUT, this, this.onStageMouseUp), u.systemTimer.clear(this, this.loop), 
                !this._clickOnly && this.target) if (this.hasInertia) {
                    this._offsets.length < 1 && this._offsets.push(this._parent.mouseX - this._lastX, this._parent.mouseY - this._lastY), 
                    this._offsetX = this._offsetY = 0;
                    for (var e = this._offsets.length, i = Math.min(e, 6), n = this._offsets.length - i, r = e - 1; r > n; r--) this._offsetY += this._offsets[r--], 
                    this._offsetX += this._offsets[r];
                    this._offsetX = this._offsetX / i * 2, this._offsetY = this._offsetY / i * 2, Math.abs(this._offsetX) > this.maxOffset && (this._offsetX = this._offsetX > 0 ? this.maxOffset : -this.maxOffset), 
                    Math.abs(this._offsetY) > this.maxOffset && (this._offsetY = this._offsetY > 0 ? this.maxOffset : -this.maxOffset), 
                    u.systemTimer.frameLoop(1, this, this.tweenMove);
                } else this.elasticDistance > 0 ? this.checkElastic() : this.clear();
            }
        }, {
            key: "checkElastic",
            value: function() {
                var t = NaN, e = NaN;
                if (this.target.x < this.area.x ? t = this.area.x : this.target._x > this.area.x + this.area.width && (t = this.area.x + this.area.width), 
                this.target.y < this.area.y ? e = this.area.y : this.target._y > this.area.y + this.area.height && (e = this.area.y + this.area.height), 
                isNaN(t) && isNaN(e)) this.clear(); else {
                    var i = {};
                    isNaN(t) || (i.x = t), isNaN(e) || (i.y = e), this._tween = ui.to(this.target, i, this.elasticBackTime, hi.sineOut, D.create(this, this.clear), 0, !1, !1);
                }
            }
        }, {
            key: "tweenMove",
            value: function() {
                this._offsetX *= this.ratio * this._elasticRateX, this._offsetY *= this.ratio * this._elasticRateY, 
                this.target.x += this._offsetX, this.target.y += this._offsetY, this.area && this.checkArea(), 
                this.target.event(Jt.DRAG_MOVE, this.data), (Math.abs(this._offsetX) < 1 && Math.abs(this._offsetY) < 1 || this._elasticRateX < .5 || this._elasticRateY < .5) && (u.systemTimer.clear(this, this.tweenMove), 
                this.elasticDistance > 0 ? this.checkElastic() : this.clear());
            }
        }, {
            key: "clear",
            value: function() {
                if (this.target) {
                    this.clearTimer();
                    var t = this.target;
                    this.target = null, this._parent = null, t.event(Jt.DRAG_END, this.data);
                }
            }
        } ]), t;
    }(), _i = function() {
        function t() {
            (0, o.default)(this, t), this._id = st.getGID(), this._resetComp();
        }
        return (0, s.default)(t, [ {
            key: "_isScript",
            value: function() {
                return !1;
            }
        }, {
            key: "_resetComp",
            value: function() {
                this._indexInList = -1, this._enabled = !0, this._awaked = !1, this.owner = null;
            }
        }, {
            key: "_getIndexInList",
            value: function() {
                return this._indexInList;
            }
        }, {
            key: "_setIndexInList",
            value: function(t) {
                this._indexInList = t;
            }
        }, {
            key: "_onAdded",
            value: function() {}
        }, {
            key: "_onAwake",
            value: function() {}
        }, {
            key: "_onEnable",
            value: function() {}
        }, {
            key: "_onDisable",
            value: function() {}
        }, {
            key: "_onDestroy",
            value: function() {}
        }, {
            key: "onReset",
            value: function() {}
        }, {
            key: "_parse",
            value: function(t) {}
        }, {
            key: "_parseInteractive",
            value: function() {}
        }, {
            key: "_cloneTo",
            value: function(t) {}
        }, {
            key: "_setActive",
            value: function(t) {
                t ? (this._awaked || (this._awaked = !0, this._onAwake()), this._enabled && this._onEnable()) : this._enabled && this._onDisable();
            }
        }, {
            key: "destroy",
            value: function() {
                this.owner && this.owner._destroyComponent(this);
            }
        }, {
            key: "_destroy",
            value: function() {
                this.owner.activeInHierarchy && this._enabled && this._setActive(!1), this._onDestroy(), 
                this._destroyed = !0, this.onReset !== t.prototype.onReset ? (this.onReset(), this._resetComp(), 
                c.recoverByClass(this)) : this._resetComp();
            }
        }, {
            key: "id",
            get: function() {
                return this._id;
            }
        }, {
            key: "enabled",
            get: function() {
                return this._enabled;
            },
            set: function(t) {
                this._enabled != t && (this._enabled = t, this.owner && (t ? this.owner.activeInHierarchy && this._onEnable() : this.owner.activeInHierarchy && this._onDisable()));
            }
        }, {
            key: "isSingleton",
            get: function() {
                return !0;
            }
        }, {
            key: "destroyed",
            get: function() {
                return this._destroyed;
            }
        } ]), t;
    }(), di = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this)).wrapMode = 0, t._interval = h.animationInterval, 
            t._isReverse = !1, t._frameRateChanged = !1, t._setBitUp(Ae.DISPLAY), t;
        }
        return (0, s.default)(n, [ {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
                this._isPlaying = !0, this._actionName = i, this.index = "string" == typeof t ? this._getFrameByLabel(t) : t, 
                this.loop = e, this._isReverse = this.wrapMode === n.WRAP_REVERSE, 0 == this.index && this._isReverse && (this.index = this.count - 1), 
                this.interval > 0 && this.timerLoop(this.interval, this, this._frameLoop, null, !0, !0);
            }
        }, {
            key: "_getFrameByLabel",
            value: function(t) {
                for (var e = 0; e < this._count; e++) {
                    var i = this._labels[e];
                    if (i && i.indexOf(t) > -1) return e;
                }
                return 0;
            }
        }, {
            key: "_frameLoop",
            value: function() {
                if (this._controlNode && !this._controlNode.destroyed) {
                    if (this._isReverse) {
                        if (this._index--, this._index < 0) {
                            if (!this.loop) return this._index = 0, this.stop(), void this.event(Jt.COMPLETE);
                            this.wrapMode == n.WRAP_PINGPONG ? (this._index = this._count > 0 ? 1 : 0, this._isReverse = !1) : this._index = this._count - 1, 
                            this.event(Jt.COMPLETE);
                        }
                    } else if (this._index++, this._index >= this._count) {
                        if (!this.loop) return this._index--, this.stop(), void this.event(Jt.COMPLETE);
                        this.wrapMode == n.WRAP_PINGPONG ? (this._index = this._count - 2 >= 0 ? this._count - 2 : 0, 
                        this._isReverse = !0) : this._index = 0, this.event(Jt.COMPLETE);
                    }
                    this.index = this._index;
                } else this.clearTimer(this, this._frameLoop);
            }
        }, {
            key: "_setControlNode",
            value: function(t) {
                this._controlNode && (this._controlNode.off(Jt.DISPLAY, this, this._resumePlay), 
                this._controlNode.off(Jt.UNDISPLAY, this, this._resumePlay)), this._controlNode = t, 
                t && t != this && (t.on(Jt.DISPLAY, this, this._resumePlay), t.on(Jt.UNDISPLAY, this, this._resumePlay));
            }
        }, {
            key: "_setDisplay",
            value: function(t) {
                (0, e.default)((0, r.default)(n.prototype), "_setDisplay", this).call(this, t), 
                this._resumePlay();
            }
        }, {
            key: "_resumePlay",
            value: function() {
                this._isPlaying && (this._controlNode.displayedInStage ? this.play(this._index, this.loop, this._actionName) : this.clearTimer(this, this._frameLoop));
            }
        }, {
            key: "stop",
            value: function() {
                this._isPlaying = !1, this.clearTimer(this, this._frameLoop);
            }
        }, {
            key: "addLabel",
            value: function(t, e) {
                this._labels || (this._labels = {}), this._labels[e] || (this._labels[e] = []), 
                this._labels[e].push(t);
            }
        }, {
            key: "removeLabel",
            value: function(t) {
                if (t) {
                    if (this._labels) for (var e in this._labels) this._removeLabelFromList(this._labels[e], t);
                } else this._labels = null;
            }
        }, {
            key: "_removeLabelFromList",
            value: function(t, e) {
                if (t) for (var i = t.length - 1; i >= 0; i--) t[i] == e && t.splice(i, 1);
            }
        }, {
            key: "gotoAndStop",
            value: function(t) {
                this.index = "string" == typeof t ? this._getFrameByLabel(t) : t, this.stop();
            }
        }, {
            key: "_displayToIndex",
            value: function(t) {}
        }, {
            key: "clear",
            value: function() {
                return this.stop(), this._labels = null, this;
            }
        }, {
            key: "interval",
            get: function() {
                return this._interval;
            },
            set: function(t) {
                this._interval != t && (this._frameRateChanged = !0, this._interval = t, this._isPlaying && t > 0 && this.timerLoop(t, this, this._frameLoop, null, !0, !0));
            }
        }, {
            key: "isPlaying",
            get: function() {
                return this._isPlaying;
            }
        }, {
            key: "index",
            get: function() {
                return this._index;
            },
            set: function(t) {
                if (this._index = t, this._displayToIndex(t), this._labels && this._labels[t]) for (var e = this._labels[t], i = 0, n = e.length; i < n; i++) this.event(Jt.LABEL, e[i]);
            }
        }, {
            key: "count",
            get: function() {
                return this._count;
            }
        } ]), n;
    }(Be);
    di.WRAP_POSITIVE = 0, di.WRAP_REVERSE = 1, di.WRAP_PINGPONG = 2, Me.regClass("laya.display.AnimationBase", di), 
    Me.regClass("Laya.AnimationBase", di);
    var fi = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "subtractVector3",
            value: function(t, e, i) {
                i[0] = t[0] - e[0], i[1] = t[1] - e[1], i[2] = t[2] - e[2];
            }
        }, {
            key: "lerp",
            value: function(t, e, i) {
                return t * (1 - i) + e * i;
            }
        }, {
            key: "scaleVector3",
            value: function(t, e, i) {
                i[0] = t[0] * e, i[1] = t[1] * e, i[2] = t[2] * e;
            }
        }, {
            key: "lerpVector3",
            value: function(t, e, i, n) {
                var r = t[0], a = t[1], s = t[2];
                n[0] = r + i * (e[0] - r), n[1] = a + i * (e[1] - a), n[2] = s + i * (e[2] - s);
            }
        }, {
            key: "lerpVector4",
            value: function(t, e, i, n) {
                var r = t[0], a = t[1], s = t[2], o = t[3];
                n[0] = r + i * (e[0] - r), n[1] = a + i * (e[1] - a), n[2] = s + i * (e[2] - s), 
                n[3] = o + i * (e[3] - o);
            }
        }, {
            key: "slerpQuaternionArray",
            value: function(t, e, i, n, r, a, s) {
                var o, l, h, u, c, _ = t[e + 0], d = t[e + 1], f = t[e + 2], v = t[e + 3], p = i[n + 0], y = i[n + 1], g = i[n + 2], m = i[n + 3];
                return (l = _ * p + d * y + f * g + v * m) < 0 && (l = -l, p = -p, y = -y, g = -g, 
                m = -m), 1 - l > 1e-6 ? (o = Math.acos(l), h = Math.sin(o), u = Math.sin((1 - r) * o) / h, 
                c = Math.sin(r * o) / h) : (u = 1 - r, c = r), a[s + 0] = u * _ + c * p, a[s + 1] = u * d + c * y, 
                a[s + 2] = u * f + c * g, a[s + 3] = u * v + c * m, a;
            }
        }, {
            key: "getRotation",
            value: function(t, e, i, n) {
                return Math.atan2(n - e, i - t) / Math.PI * 180;
            }
        }, {
            key: "sortBigFirst",
            value: function(t, e) {
                return t == e ? 0 : e > t ? 1 : -1;
            }
        }, {
            key: "sortSmallFirst",
            value: function(t, e) {
                return t == e ? 0 : e > t ? -1 : 1;
            }
        }, {
            key: "sortNumBigFirst",
            value: function(t, e) {
                return parseFloat(e) - parseFloat(t);
            }
        }, {
            key: "sortNumSmallFirst",
            value: function(t, e) {
                return parseFloat(t) - parseFloat(e);
            }
        }, {
            key: "sortByKey",
            value: function(e) {
                var i, n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                return i = n ? r ? t.sortNumBigFirst : t.sortBigFirst : r ? t.sortNumSmallFirst : t.sortSmallFirst, 
                function(t, n) {
                    return i(t[e], n[e]);
                };
            }
        } ]), t;
    }(), vi = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), t = i.call(this), void 0 === n._sortIndexFun && (n._sortIndexFun = fi.sortByKey("index", !1, !0)), 
            t;
        }
        return (0, s.default)(n, [ {
            key: "_setUp",
            value: function(t, e) {
                this._targetDic = t, this._animationData = e, this.interval = 1e3 / e.frameRate, 
                e.parsed ? (this._count = e.count, this._labels = e.labels, this._usedFrames = e.animationNewFrames) : (this._usedFrames = [], 
                this._calculateDatas(), e.parsed = !0, e.labels = this._labels, e.count = this._count, 
                e.animationNewFrames = this._usedFrames);
            }
        }, {
            key: "clear",
            value: function() {
                return (0, e.default)((0, r.default)(n.prototype), "clear", this).call(this), this._targetDic = null, 
                this._animationData = null, this;
            }
        }, {
            key: "_displayToIndex",
            value: function(t) {
                if (this._animationData) {
                    t < 0 && (t = 0), t > this._count && (t = this._count);
                    var e, i = this._animationData.nodes, n = i.length;
                    for (e = 0; e < n; e++) this._displayNodeToFrame(i[e], t);
                }
            }
        }, {
            key: "_displayNodeToFrame",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                i || (i = this._targetDic);
                var n = i[t.target];
                if (n) {
                    var r, a, s, o, l = t.frames, h = t.keys, u = h.length;
                    for (o = 0; o < u; o++) s = (a = l[r = h[o]]).length > e ? a[e] : a[a.length - 1], 
                    n[r] = s;
                    var c, _ = t.funkeys;
                    if (0 != (u = _.length)) for (o = 0; o < u; o++) void 0 !== (c = l[r = _[o]])[e] && n[r] && n[r].apply(n, c[e]);
                }
            }
        }, {
            key: "_calculateDatas",
            value: function() {
                if (this._animationData) {
                    var t, e, i = this._animationData.nodes, n = i.length;
                    for (this._count = 0, t = 0; t < n; t++) e = i[t], this._calculateKeyFrames(e);
                    this._count += 1;
                }
            }
        }, {
            key: "_calculateKeyFrames",
            value: function(t) {
                var e, i, r = t.keyframes, a = t.target;
                for (e in t.frames || (t.frames = {}), t.keys ? t.keys.length = 0 : t.keys = [], 
                t.funkeys ? t.funkeys.length = 0 : t.funkeys = [], t.initValues || (t.initValues = {}), 
                r) {
                    var s = -1 != e.indexOf("()");
                    if (i = r[e], s && (e = e.substr(0, e.length - 2)), t.frames[e] || (t.frames[e] = []), 
                    s) {
                        t.funkeys.push(e);
                        for (var o = t.frames[e], l = 0; l < i.length; l++) {
                            var h = i[l];
                            o[h.index] = h.value, h.index > this._count && (this._count = h.index);
                        }
                    } else this._targetDic && this._targetDic[a] && (t.initValues[e] = this._targetDic[a][e]), 
                    i.sort(n._sortIndexFun), t.keys.push(e), this._calculateNodePropFrames(i, t.frames[e], e, a);
                }
            }
        }, {
            key: "resetNodes",
            value: function() {
                if (this._targetDic && this._animationData) {
                    var t, e, i, n = this._animationData.nodes, r = n.length;
                    for (t = 0; t < r; t++) if (i = (e = n[t]).initValues) {
                        var a, s = this._targetDic[e.target];
                        if (s) for (a in i) s[a] = i[a];
                    }
                }
            }
        }, {
            key: "_calculateNodePropFrames",
            value: function(t, e, i, n) {
                var r, a = t.length - 1;
                for (e.length = t[a].index + 1, r = 0; r < a; r++) this._dealKeyFrame(t[r]), this._calculateFrameValues(t[r], t[r + 1], e);
                0 == a && (e[0] = t[0].value, this._usedFrames && (this._usedFrames[t[0].index] = !0)), 
                this._dealKeyFrame(t[r]);
            }
        }, {
            key: "_dealKeyFrame",
            value: function(t) {
                t.label && "" != t.label && this.addLabel(t.label, t.index);
            }
        }, {
            key: "_calculateFrameValues",
            value: function(t, e, i) {
                var n, r, a = t.index, s = e.index, o = t.value, l = e.value - t.value, h = s - a, u = this._usedFrames;
                if (s > this._count && (this._count = s), t.tween) for (null == (r = hi[t.tweenMethod]) && (r = hi.linearNone), 
                n = a; n < s; n++) i[n] = r(n - a, o, l, h), u && (u[n] = !0); else for (n = a; n < s; n++) i[n] = o;
                u && (u[t.index] = !0, u[e.index] = !0), i[e.index] = e.value;
            }
        } ], [ {
            key: "_sortIndexFun",
            value: function(t, e) {
                return t.index - e.index;
            }
        } ]), n;
    }(di);
    Me.regClass("laya.display.FrameAnimation", vi), Me.regClass("Laya.FrameAnimation", vi);
    var pi = function() {
        function t() {
            (0, o.default)(this, t), this._obj = {}, t._maps.push(this);
        }
        return (0, s.default)(t, [ {
            key: "set",
            value: function(e, i) {
                null != e && (t.supportWeakMap || ("string" == typeof e || "number" == typeof e ? this._obj[e] = i : (e.$_GID || (e.$_GID = st.getGID()), 
                this._obj[e.$_GID] = i)));
            }
        }, {
            key: "get",
            value: function(e) {
                return null == e ? null : t.supportWeakMap ? void 0 : "string" == typeof e || "number" == typeof e ? this._obj[e] : this._obj[e.$_GID];
            }
        }, {
            key: "del",
            value: function(e) {
                null != e && (t.supportWeakMap || ("string" == typeof e || "number" == typeof e ? delete this._obj[e] : delete this._obj[this._obj.$_GID]));
            }
        }, {
            key: "has",
            value: function(e) {
                return null != e && !t.supportWeakMap && ("string" == typeof e || "number" == typeof e ? null != this._obj[e] : null != this._obj[this._obj.$_GID]);
            }
        } ], [ {
            key: "__init__",
            value: function() {
                t.I = new t(), t.supportWeakMap || u.systemTimer.loop(t.delInterval, null, t.clearCache);
            }
        }, {
            key: "clearCache",
            value: function() {
                for (var e = 0, i = t._maps.length; e < i; e++) t._maps[e]._obj = {};
            }
        } ]), t;
    }();
    pi.supportWeakMap = !1, pi.delInterval = 6e5, pi._maps = [];
    var yi = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init",
            value: function() {
                t._funMap = new pi();
            }
        }, {
            key: "getBindFun",
            value: function(e) {
                var i = t._funMap.get(e);
                if (null == i) {
                    var n = '"' + e + '"', r = "(function(data){if(data==null)return;with(data){try{\nreturn " + (n = n.replace(/^"\${|}"$/g, "").replace(/\${/g, '"+').replace(/}/g, '+"')) + "\n}catch(e){}}})";
                    i = window.Laya._runScript(r), t._funMap.set(e, i);
                }
                return i;
            }
        }, {
            key: "createByData",
            value: function(e, i) {
                var n = mi.create();
                if ((e = t.createComp(i, e, e, null, n))._setBit(Ae.NOT_READY, !0), "_idMap" in e && (e._idMap = n._idMap), 
                i.animations) {
                    var r, a, s, o = [], l = i.animations, h = l.length;
                    for (r = 0; r < h; r++) {
                        switch (a = new vi(), s = l[r], a._setUp(n._idMap, s), e[s.name] = a, a._setControlNode(e), 
                        s.action) {
                          case 1:
                            a.play(0, !1);
                            break;

                          case 2:
                            a.play(0, !0);
                        }
                        o.push(a);
                    }
                    e._aniList = o;
                }
                return "Scene" === e._$componentType && e._width > 0 && null == i.props.hitTestPrior && !e.mouseThrough && (e.hitTestPrior = !0), 
                n.beginLoad(e), e;
            }
        }, {
            key: "createInitTool",
            value: function() {
                return mi.create();
            }
        }, {
            key: "createComp",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                if ("Scene3D" == e.type || "Sprite3D" == e.type) {
                    var s = [], o = u.Laya.Utils3D._createSceneByJsonForMaker(e, s, a);
                    return "Sprite3D" == e.type ? u.Laya.StaticBatchManager.combine(o, s) : u.Laya.StaticBatchManager.combine(null, s), 
                    o;
                }
                if (!(i = i || t.getCompInstance(e))) return e.props && e.props.runtime ? console.warn("runtime not found:" + e.props.runtime) : console.warn("can not create:" + e.type), 
                null;
                var l = e.child;
                if (l) for (var h = "List" == i._$componentType, c = 0, _ = l.length; c < _; c++) {
                    var d = l[c];
                    if (!("itemRender" in i) || "render" != d.props.name && "render" !== d.props.renderType) if ("Graphic" == d.type) u.ClassUtils._addGraphicsToSprite(d, i); else if (u.ClassUtils._isDrawType(d.type)) u.ClassUtils._addGraphicToSprite(d, i, !0); else {
                        if (h) {
                            var f = [], v = t.createComp(d, null, n, f, a);
                            f.length && (v._$bindData = f);
                        } else v = t.createComp(d, null, n, r, a);
                        "Script" == d.type ? v instanceof _i ? i._addComponentInstance(v) : "owner" in v ? v.owner = i : "target" in v && (v.target = i) : "mask" == d.props.renderType || "mask" == d.props.name ? i.mask = v : v instanceof De && i.addChild(v);
                    } else i.itemRender = d;
                }
                var p = e.props;
                for (var y in p) {
                    var g = p[y];
                    "string" == typeof g && (g.indexOf("@node:") >= 0 || g.indexOf("@Prefab:") >= 0) ? a && a.addNodeRef(i, y, g) : t.setCompValue(i, y, g, n, r);
                }
                return i._afterInited && i._afterInited(), e.compId && a && a._idMap && (a._idMap[e.compId] = i), 
                i;
            }
        }, {
            key: "setCompValue",
            value: function(e, i, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                if ("string" == typeof n && n.indexOf("${") > -1) {
                    if (t._sheet || (t._sheet = u.ClassUtils.getClass("laya.data.Table")), !t._sheet) return void console.warn("Can not find class Sheet");
                    if (a) a.push(e, i, n); else if (r) {
                        -1 == n.indexOf("].") && (n = n.replace(".", "[0]."));
                        var s, o, l = new gi(e, i, n);
                        l.exe(r);
                        for (var h = n.replace(/\[.*?\]\./g, "."); null != (s = t._parseWatchData.exec(h)); ) {
                            for (var c = s[1]; null != (o = t._parseKeyWord.exec(c)); ) {
                                var _ = o[0], d = r._watchMap[_] || (r._watchMap[_] = []);
                                d.push(l), t._sheet.I.notifer.on(_, r, r.changeData, [ _ ]);
                            }
                            (d = r._watchMap[c] || (r._watchMap[c] = [])).push(l), t._sheet.I.notifer.on(c, r, r.changeData, [ c ]);
                        }
                    }
                } else "var" === i && r ? r[n] = e : e[i] = "true" === n || "false" !== n && n;
            }
        }, {
            key: "getCompInstance",
            value: function(e) {
                if ("UIView" == e.type && e.props && e.props.pageData) return t.createByData(null, e.props.pageData);
                var i = e.props && e.props.runtime || e.type, n = u.ClassUtils.getClass(i);
                if (!n) throw "Can not find class " + i;
                if ("Script" === e.type && n.prototype._doAwake) {
                    var r = c.createByClass(n);
                    return r._destroyed = !1, r;
                }
                return e.props && "renderType" in e.props && "instance" == e.props.renderType ? (n.instance || (n.instance = new n()), 
                n.instance) : new n();
            }
        } ]), t;
    }();
    yi._parseWatchData = /\${(.*?)}/g, yi._parseKeyWord = /[a-zA-Z_][a-zA-Z0-9_]*(?:(?:\.[a-zA-Z_][a-zA-Z0-9_]*)+)/g;
    var gi = function() {
        function t(e, i, n) {
            (0, o.default)(this, t), this.comp = e, this.prop = i, this.value = n;
        }
        return (0, s.default)(t, [ {
            key: "exe",
            value: function(t) {
                var e = yi.getBindFun(this.value);
                this.comp[this.prop] = e.call(this, t);
            }
        } ]), t;
    }(), mi = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "reset",
            value: function() {
                this._nodeRefList = null, this._initList = null, this._idMap = null, this._loadList = null, 
                this._scene = null;
            }
        }, {
            key: "recover",
            value: function() {
                this.reset(), c.recover("InitTool", this);
            }
        }, {
            key: "addLoadRes",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                this._loadList || (this._loadList = []), u.loader.getRes(t) || (e ? this._loadList.push({
                    url: t,
                    type: e
                }) : this._loadList.push(t));
            }
        }, {
            key: "addNodeRef",
            value: function(t, e, i) {
                this._nodeRefList || (this._nodeRefList = []), this._nodeRefList.push([ t, e, i ]), 
                i.indexOf("@Prefab:") >= 0 && this.addLoadRes(i.replace("@Prefab:", ""), ii.PREFAB);
            }
        }, {
            key: "setNodeRef",
            value: function() {
                if (this._nodeRefList) if (this._idMap) {
                    var t, e, i;
                    for (e = this._nodeRefList.length, t = 0; t < e; t++) (i = this._nodeRefList[t])[0][i[1]] = this.getReferData(i[2]);
                    this._nodeRefList = null;
                } else this._nodeRefList = null;
            }
        }, {
            key: "getReferData",
            value: function(t) {
                if (t.indexOf("@Prefab:") >= 0) return ii.getRes(t.replace("@Prefab:", ""));
                if (t.indexOf("@arr:") >= 0) {
                    var e, i, n, r;
                    for (n = (e = (t = t.replace("@arr:", "")).split(",")).length, i = 0; i < n; i++) r = e[i], 
                    e[i] = r ? this._idMap[r.replace("@node:", "")] : null;
                    return e;
                }
                return this._idMap[t.replace("@node:", "")];
            }
        }, {
            key: "addInitItem",
            value: function(t) {
                this._initList || (this._initList = []), this._initList.push(t);
            }
        }, {
            key: "doInits",
            value: function() {
                this._initList && (this._initList = null);
            }
        }, {
            key: "finish",
            value: function() {
                this.setNodeRef(), this.doInits(), this._scene._setBit(Ae.NOT_READY, !1), this._scene.parent && this._scene.parent.activeInHierarchy && this._scene.active && this._scene._processActive(), 
                this._scene.event("onViewCreated"), this.recover();
            }
        }, {
            key: "beginLoad",
            value: function(t) {
                this._scene = t, !this._loadList || this._loadList.length < 1 ? this.finish() : u.loader.load(this._loadList, D.create(this, this.finish));
            }
        } ], [ {
            key: "create",
            value: function() {
                var e = c.getItemByClass("InitTool", t);
                return e._idMap = {}, e;
            }
        } ]), t;
    }(), Ti = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "show",
            value: function() {}
        }, {
            key: "enable",
            value: function() {}
        }, {
            key: "hide",
            value: function() {}
        }, {
            key: "set_onclick",
            value: function(t) {}
        }, {
            key: "isCanvasRender",
            value: function() {
                return !0;
            }
        }, {
            key: "renderNotCanvas",
            value: function(t, e, i) {}
        } ]), t;
    }(), xi = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments))._show = !1, t._useCanvas = !1, 
            t._height = 100, t._view = [], t;
        }
        return (0, s.default)(i, [ {
            key: "show",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                ae._isMiniGame || u.Render.isConchApp || (this._useCanvas = !0), this._show = !0, 
                $._fpsData.length = 60, this._view[0] = {
                    title: "FPS(WebGL)",
                    value: "_fpsStr",
                    color: "yellow",
                    units: "int"
                }, this._view[1] = {
                    title: "Sprite",
                    value: "_spriteStr",
                    color: "white",
                    units: "int"
                }, this._view[2] = {
                    title: "RenderBatches",
                    value: "renderBatches",
                    color: "white",
                    units: "int"
                }, this._view[3] = {
                    title: "SavedRenderBatches",
                    value: "savedRenderBatches",
                    color: "white",
                    units: "int"
                }, this._view[4] = {
                    title: "CPUMemory",
                    value: "cpuMemory",
                    color: "yellow",
                    units: "M"
                }, this._view[5] = {
                    title: "GPUMemory",
                    value: "gpuMemory",
                    color: "yellow",
                    units: "M"
                }, this._view[6] = {
                    title: "Shader",
                    value: "shaderCall",
                    color: "white",
                    units: "int"
                }, this._view[7] = {
                    title: "Canvas",
                    value: "_canvasStr",
                    color: "white",
                    units: "int"
                }, de.is3DMode && (this._view[0].title = "FPS(3D)", this._view[8] = {
                    title: "TriFaces",
                    value: "trianglesFaces",
                    color: "white",
                    units: "int"
                }, this._view[9] = {
                    title: "FrustumCulling",
                    value: "frustumCulling",
                    color: "white",
                    units: "int"
                }, this._view[10] = {
                    title: "OctreeNodeCulling",
                    value: "octreeNodeCulling",
                    color: "white",
                    units: "int"
                }), this._useCanvas ? this.createUIPre(t, e) : this.createUI(t, e), this.enable();
            }
        }, {
            key: "createUIPre",
            value: function(t, e) {
                var n = ae.pixelRatio;
                this._width = 180 * n, this._vx = 120 * n, this._height = n * (12 * this._view.length + 3 * n) + 4, 
                i._fontSize = 12 * n;
                for (var r = 0; r < this._view.length; r++) this._view[r].x = 4, this._view[r].y = r * i._fontSize + 2 * n;
                this._canvas || (this._canvas = new Se(!0), this._canvas.size(this._width, this._height), 
                this._ctx = this._canvas.getContext("2d"), this._ctx.textBaseline = "top", this._ctx.font = i._fontSize + "px Arial", 
                this._canvas.source.style.cssText = "pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:" + t + "px;top:" + e + "px;width:" + this._width / n + "px;height:" + this._height / n + "px;"), 
                ae.onKGMiniGame || ae.container.appendChild(this._canvas.source), this._first = !0, 
                this.loop(), this._first = !1;
            }
        }, {
            key: "createUI",
            value: function(t, e) {
                var n = this._sp, r = ae.pixelRatio;
                n || (n = new Be(), this._leftText = new Oe(), this._leftText.pos(5, 5), this._leftText.color = "#ffffff", 
                n.addChild(this._leftText), this._txt = new Oe(), this._txt.pos(130 * r, 5), this._txt.color = "#ffffff", 
                n.addChild(this._txt), this._sp = n), n.pos(t, e);
                for (var a = "", s = 0; s < this._view.length; s++) a += this._view[s].title + "\n";
                this._leftText.text = a;
                var o = 138 * r, l = r * (12 * this._view.length + 3 * r) + 4;
                this._txt.fontSize = i._fontSize * r, this._leftText.fontSize = i._fontSize * r, 
                n.size(o, l), n.graphics.clear(), n.graphics.alpha(.5), n.graphics.drawRect(0, 0, o + 110, l + 30, "#999999"), 
                n.graphics.alpha(2), this.loop();
            }
        }, {
            key: "enable",
            value: function() {
                u.systemTimer.frameLoop(1, this, this.loop);
            }
        }, {
            key: "hide",
            value: function() {
                this._show = !1, u.systemTimer.clear(this, this.loop), this._canvas && ae.removeElement(this._canvas.source);
            }
        }, {
            key: "set_onclick",
            value: function(t) {
                this._sp && this._sp.on("click", this._sp, t), this._canvas && (this._canvas.source.onclick = t, 
                this._canvas.source.style.pointerEvents = "");
            }
        }, {
            key: "loop",
            value: function() {
                $._count++;
                var t = ae.now();
                if (!(t - $._timer < 1e3)) {
                    var e = $._count;
                    if ($.FPS = Math.round(1e3 * e / (t - $._timer)), this._show) {
                        $.trianglesFaces = Math.round($.trianglesFaces / e), this._useCanvas ? $.renderBatches = Math.round($.renderBatches / e) : $.renderBatches = Math.round($.renderBatches / e) - 1, 
                        $.savedRenderBatches = Math.round($.savedRenderBatches / e), $.shaderCall = Math.round($.shaderCall / e), 
                        $.spriteRenderUseCacheCount = Math.round($.spriteRenderUseCacheCount / e), $.canvasNormal = Math.round($.canvasNormal / e), 
                        $.canvasBitmap = Math.round($.canvasBitmap / e), $.canvasReCache = Math.ceil($.canvasReCache / e), 
                        $.frustumCulling = Math.round($.frustumCulling / e), $.octreeNodeCulling = Math.round($.octreeNodeCulling / e);
                        var i = $.FPS > 0 ? Math.floor(1e3 / $.FPS).toString() : " ";
                        $._fpsStr = $.FPS + ($.renderSlow ? " slow" : "") + " " + i, $._spriteStr = $.spriteCount + ($.spriteRenderUseCacheCount ? "/" + $.spriteRenderUseCacheCount : ""), 
                        $._canvasStr = $.canvasReCache + "/" + $.canvasNormal + "/" + $.canvasBitmap, $.cpuMemory = N.cpuMemory, 
                        $.gpuMemory = N.gpuMemory, this._useCanvas ? this.renderInfoPre() : this.renderInfo(), 
                        $.clear();
                    }
                    $._count = 0, $._timer = t;
                }
            }
        }, {
            key: "renderInfoPre",
            value: function() {
                var t, e, i = 0;
                if (this._canvas) {
                    var n = this._ctx;
                    for (n.clearRect(this._first ? 0 : this._vx, 0, this._width, this._height), i = 0; i < this._view.length; i++) t = this._view[i], 
                    this._first && (n.fillStyle = "white", n.fillText(t.title, t.x, t.y)), n.fillStyle = t.color, 
                    e = $[t.value], "M" == t.units && (e = Math.floor(e / 1048576 * 100) / 100 + " M"), 
                    n.fillText(e + "", t.x + this._vx, t.y);
                }
            }
        }, {
            key: "renderInfo",
            value: function() {
                for (var t = "", e = 0; e < this._view.length; e++) {
                    var i = this._view[e], n = $[i.value];
                    "M" == i.units && (n = Math.floor(n / 1048576 * 100) / 100 + " M"), "K" == i.units && (n = Math.floor(n / 1024 * 100) / 100 + " K"), 
                    t += n + "\n";
                }
                this._txt.text = t;
            }
        }, {
            key: "isCanvasRender",
            value: function() {
                return this._useCanvas;
            }
        }, {
            key: "renderNotCanvas",
            value: function(t, e, i) {
                this._show && this._sp && this._sp.render(t, 0, 0);
            }
        } ]), i;
    }(Ti);
    xi._fontSize = 12;
    var ki = function() {
        function t() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            (0, o.default)(this, t), this.scale = 1, this.currTimer = Date.now(), this.currFrame = 0, 
            this._delta = 0, this._lastTimer = Date.now(), this._map = [], this._handlers = [], 
            this._temp = [], this._count = 0, e && t.gSysTimer && t.gSysTimer.frameLoop(1, this, this._update);
        }
        return (0, s.default)(t, [ {
            key: "_update",
            value: function() {
                if (this.scale <= 0) return this._lastTimer = Date.now(), void (this._delta = 0);
                var t = this.currFrame = this.currFrame + this.scale, e = Date.now(), i = e - this._lastTimer > 3e4;
                this._delta = (e - this._lastTimer) * this.scale;
                var n = this.currTimer = this.currTimer + this._delta;
                this._lastTimer = e;
                var r = this._handlers;
                this._count = 0;
                for (var a = 0, s = r.length; a < s; a++) {
                    var o = r[a];
                    if (null !== o.method) {
                        var l = o.userFrame ? t : n;
                        if (l >= o.exeTime) if (o.repeat) if (!o.jumpFrame || i) o.exeTime += o.delay, o.run(!1), 
                        l > o.exeTime && (o.exeTime += Math.ceil((l - o.exeTime) / o.delay) * o.delay); else for (;l >= o.exeTime; ) o.exeTime += o.delay, 
                        o.run(!1); else o.run(!0);
                    } else this._count++;
                }
                (this._count > 30 || t % 200 == 0) && this._clearHandlers();
            }
        }, {
            key: "_clearHandlers",
            value: function() {
                for (var t = this._handlers, e = 0, i = t.length; e < i; e++) {
                    var n = t[e];
                    null !== n.method ? this._temp.push(n) : this._recoverHandler(n);
                }
                this._handlers = this._temp, t.length = 0, this._temp = t;
            }
        }, {
            key: "_recoverHandler",
            value: function(e) {
                this._map[e.key] == e && (this._map[e.key] = null), e.clear(), t._pool.push(e);
            }
        }, {
            key: "_create",
            value: function(e, i, n, r, a, s, o) {
                if (!n) return a.apply(r, s), null;
                if (o) {
                    var l = this._getHandler(r, a);
                    if (l) return l.repeat = i, l.userFrame = e, l.delay = n, l.caller = r, l.method = a, 
                    l.args = s, l.exeTime = n + (e ? this.currFrame : this.currTimer + Date.now() - this._lastTimer), 
                    l;
                }
                return (l = t._pool.length > 0 ? t._pool.pop() : new Ei()).repeat = i, l.userFrame = e, 
                l.delay = n, l.caller = r, l.method = a, l.args = s, l.exeTime = n + (e ? this.currFrame : this.currTimer + Date.now() - this._lastTimer), 
                this._indexHandler(l), this._handlers.push(l), l;
            }
        }, {
            key: "_indexHandler",
            value: function(e) {
                var i = e.caller, n = e.method, r = i ? i.$_GID || (i.$_GID = u.Utils.getGID()) : 0, a = n.$_TID || (n.$_TID = 1e5 * t._mid++);
                e.key = r + a, this._map[e.key] = e;
            }
        }, {
            key: "once",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                this._create(!1, !1, t, e, i, n, r);
            }
        }, {
            key: "loop",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], s = this._create(!1, !0, t, e, i, n, r);
                s && (s.jumpFrame = a);
            }
        }, {
            key: "frameOnce",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                this._create(!0, !1, t, e, i, n, r);
            }
        }, {
            key: "frameLoop",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                this._create(!0, !0, t, e, i, n, r);
            }
        }, {
            key: "toString",
            value: function() {
                return " handlers:" + this._handlers.length + " pool:" + t._pool.length;
            }
        }, {
            key: "clear",
            value: function(t, e) {
                var i = this._getHandler(t, e);
                i && (this._map[i.key] = null, i.key = 0, i.clear());
            }
        }, {
            key: "clearAll",
            value: function(t) {
                if (t) for (var e = 0, i = this._handlers.length; e < i; e++) {
                    var n = this._handlers[e];
                    n.caller === t && (this._map[n.key] = null, n.key = 0, n.clear());
                }
            }
        }, {
            key: "_getHandler",
            value: function(e, i) {
                var n = e ? e.$_GID || (e.$_GID = u.Utils.getGID()) : 0, r = i.$_TID || (i.$_TID = 1e5 * t._mid++);
                return this._map[n + r];
            }
        }, {
            key: "callLater",
            value: function(t, e) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                We.I.callLater(t, e, i);
            }
        }, {
            key: "runCallLater",
            value: function(t, e) {
                We.I.runCallLater(t, e);
            }
        }, {
            key: "runTimer",
            value: function(t, e) {
                var i = this._getHandler(t, e);
                i && null != i.method && (this._map[i.key] = null, i.run(!0));
            }
        }, {
            key: "pause",
            value: function() {
                this.scale = 0;
            }
        }, {
            key: "resume",
            value: function() {
                this.scale = 1;
            }
        }, {
            key: "delta",
            get: function() {
                return this._delta;
            }
        } ]), t;
    }();
    ki.gSysTimer = null, ki._pool = [], ki._mid = 1;
    var Ei = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "clear",
            value: function() {
                this.caller = null, this.method = null, this.args = null;
            }
        }, {
            key: "run",
            value: function(t) {
                var e = this.caller;
                if (e && e.destroyed) return this.clear();
                var i = this.method, n = this.args;
                t && this.clear(), null != i && (n ? i.apply(e, n) : i.call(e));
            }
        } ]), t;
    }(), Ri = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t) {
            var n;
            (0, o.default)(this, i), (n = e.call(this, Q.SKINMESH, 0)).offsetX = 300, n.offsetY = 0;
            var r = L.mainContext, a = 8 * Xt.BYTES_PE;
            return n.position = [ 2, r.FLOAT, !1, a, 0 ], n.texcoord = [ 2, r.FLOAT, !1, a, 2 * Xt.BYTES_PE ], 
            n.color = [ 4, r.FLOAT, !1, a, 4 * Xt.BYTES_PE ], n;
        }
        return i;
    }(it), Ai = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t) {
            var n;
            return (0, o.default)(this, i), (n = e.call(this, Q.PRIMITIVE, 0))._attribLocation = [ "position", 0, "attribColor", 1 ], 
            n;
        }
        return i;
    }(it), Ci = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
            return (0, o.default)(this, i), (t = e.call(this, Q.TEXTURE2D, n)).strength = 0, 
            t.blurInfo = null, t.colorMat = null, t.colorAlpha = null, t._attribLocation = [ "posuv", 0, "attribColor", 1, "attribFlags", 2 ], 
            t;
        }
        return (0, s.default)(i, [ {
            key: "clear",
            value: function() {
                this.texture = null, this.shader = null, this.defines._value = this.subID;
            }
        } ]), i;
    }(it), bi = function() {
        function t(e) {
            (0, o.default)(this, t), this.codes = {}, this.funs = {}, this.curUseID = -1, this.funnames = "", 
            this.script = e;
            for (var i, n, r = 0; !((r = e.indexOf("#begin", r)) < 0); ) {
                for (n = r + 5; !((n = e.indexOf("#end", n)) < 0) && "i" === e.charAt(n + 4); ) n += 5;
                if (n < 0) throw "add include err,no #end:" + e;
                i = e.indexOf("\n", r);
                var a = u.ShaderCompile.splitToWords(e.substr(r, i - r), null);
                "code" == a[1] ? this.codes[a[2]] = e.substr(i + 1, n - i - 1) : "function" == a[1] && (i = e.indexOf("function", r), 
                i += "function".length, this.funs[a[3]] = e.substr(i + 1, n - i - 1), this.funnames += a[3] + ";"), 
                r = n + 1;
            }
        }
        return (0, s.default)(t, [ {
            key: "getWith",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = t ? this.codes[t] : this.script;
                if (!e) throw "get with error:" + t;
                return e;
            }
        }, {
            key: "getFunsScript",
            value: function(t) {
                var e = "";
                for (var i in this.funs) t.indexOf(i + ";") >= 0 && (e += this.funs[i]);
                return e;
            }
        } ]), t;
    }(), Si = function() {
        function t(e) {
            (0, o.default)(this, t), this.childs = [], this.text = "", this.useFuns = "", this.z = 0, 
            this.includefiles = e;
        }
        return (0, s.default)(t, [ {
            key: "setParent",
            value: function(t) {
                t.childs.push(this), this.z = t.z + 1, this.parent = t;
            }
        }, {
            key: "setCondition",
            value: function(t, e) {
                t && (this.conditionType = e, t = t.replace(/(\s*$)/g, ""), this.condition = function() {
                    return this[t];
                }, this.condition.__condition = t);
            }
        }, {
            key: "toscript",
            value: function(e, i) {
                return this._toscript(e, i, ++t.__id);
            }
        }, {
            key: "_toscript",
            value: function(t, e, i) {
                if (this.childs.length < 1 && !this.text) return e;
                if (e.length, this.condition) {
                    var n = !!this.condition.call(t);
                    if (this.conditionType === u.ShaderCompile.IFDEF_ELSE && (n = !n), !n) return e;
                }
                if (this.noCompile && this.text && e.push(this.text), this.childs.length > 0 && this.childs.forEach(function(n, r, a) {
                    n._toscript(t, e, i);
                }), this.includefiles.length > 0 && this.useFuns.length > 0) for (var r, a = 0, s = this.includefiles.length; a < s; a++) this.includefiles[a].curUseID != i && (r = this.includefiles[a].file.getFunsScript(this.useFuns)).length > 0 && (this.includefiles[a].curUseID = i, 
                e[0] = r + e[0]);
                return e;
            }
        } ]), t;
    }();
    Si.__id = 1;
    var wi = function() {
        function t(e, i, n) {
            (0, o.default)(this, t), this.defs = {};
            var r = this;
            function a(e) {
                e = e.replace(t._clearCR, "");
                var i = [], n = new Si(i);
                return r._compileToTree(n, e.split("\n"), 0, i, r.defs), n;
            }
            var s = Date.now();
            this._VS = a(e), this._PS = a(i), this._nameMap = n, Date.now() - s > 2 && console.log("ShaderCompile use time:" + (Date.now() - s) + "  size:" + e.length + "/" + i.length);
        }
        return (0, s.default)(t, [ {
            key: "_compileToTree",
            value: function(e, i, n, r, a) {
                var s, o, l, h, u, c, _, d, f, v, p;
                for (f = n; f < i.length; f++) if (!((l = i[f]).length < 1) && 0 !== (c = l.indexOf("//"))) {
                    if (c >= 0 && (l = l.substr(0, c)), s = d || new Si(r), d = null, s.text = l, s.noCompile = !0, 
                    (c = l.indexOf("#")) >= 0) {
                        for (h = "#", p = c + 1, v = l.length; p < v; p++) {
                            var y = l.charAt(p);
                            if (" " === y || "\t" === y || "?" === y) break;
                            h += y;
                        }
                        switch (s.name = h, h) {
                          case "#ifdef":
                          case "#ifndef":
                            if (s.src = l, s.noCompile = null != l.match(/[!&|()=<>]/), s.noCompile ? console.log("function():Boolean{return " + l.substr(c + s.name.length) + "}") : (_ = l.replace(/^\s*/, "").split(/\s+/), 
                            s.setCondition(_[1], "#ifdef" === h ? t.IFDEF_YES : t.IFDEF_ELSE), s.text = "//" + s.text), 
                            s.setParent(e), e = s, a) for (_ = l.substr(p).split(t._splitToWordExps3), p = 0; p < _.length; p++) (l = _[p]).length && (a[l] = !0);
                            continue;

                          case "#if":
                            if (s.src = l, s.noCompile = !0, s.setParent(e), e = s, a) for (_ = l.substr(p).split(t._splitToWordExps3), 
                            p = 0; p < _.length; p++) (l = _[p]).length && "defined" != l && (a[l] = !0);
                            continue;

                          case "#else":
                            s.src = l, o = (e = e.parent).childs[e.childs.length - 1], s.noCompile = o.noCompile, 
                            s.noCompile || (s.condition = o.condition, s.conditionType = o.conditionType == t.IFDEF_YES ? t.IFDEF_ELSE : t.IFDEF_YES, 
                            s.text = "//" + s.text + " " + o.text + " " + s.conditionType), s.setParent(e), 
                            e = s;
                            continue;

                          case "#endif":
                            o = (e = e.parent).childs[e.childs.length - 1], s.noCompile = o.noCompile, s.noCompile || (s.text = "//" + s.text), 
                            s.setParent(e);
                            continue;

                          case "#include":
                            _ = t.splitToWords(l, null);
                            var g = t.includes[_[1]];
                            if (!g) throw "ShaderCompile error no this include file:" + _[1];
                            if ((c = _[0].indexOf("?")) < 0) {
                                s.setParent(e), l = g.getWith("with" == _[2] ? _[3] : null), this._compileToTree(s, l.split("\n"), 0, r, a), 
                                s.text = "";
                                continue;
                            }
                            s.setCondition(_[0].substr(c + 1), t.IFDEF_YES), s.text = g.getWith("with" == _[2] ? _[3] : null);
                            break;

                          case "#import":
                            u = (_ = t.splitToWords(l, null))[1], r.push({
                                node: s,
                                file: t.includes[u],
                                ofs: s.text.length
                            });
                            continue;
                        }
                    } else {
                        if ((o = e.childs[e.childs.length - 1]) && !o.name) {
                            r.length > 0 && t.splitToWords(l, o), d = s, o.text += "\n" + l;
                            continue;
                        }
                        r.length > 0 && t.splitToWords(l, s);
                    }
                    s.setParent(e);
                }
            }
        }, {
            key: "createShader",
            value: function(t, e, i, n) {
                var r = {}, a = "";
                if (t) for (var s in t) a += "#define " + s + "\n", r[s] = !0;
                var o = this._VS.toscript(r, []), l = this._PS.toscript(r, []);
                return (i || tt.create)(a + o.join("\n"), a + l.join("\n"), e, this._nameMap, n);
            }
        } ], [ {
            key: "__init__",
            value: function() {
                var e = A.instance;
                t.shaderParamsMap = {
                    float: e.FLOAT,
                    int: e.INT,
                    bool: e.BOOL,
                    vec2: e.FLOAT_VEC2,
                    vec3: e.FLOAT_VEC3,
                    vec4: e.FLOAT_VEC4,
                    ivec2: e.INT_VEC2,
                    ivec3: e.INT_VEC3,
                    ivec4: e.INT_VEC4,
                    bvec2: e.BOOL_VEC2,
                    bvec3: e.BOOL_VEC3,
                    bvec4: e.BOOL_VEC4,
                    mat2: e.FLOAT_MAT2,
                    mat3: e.FLOAT_MAT3,
                    mat4: e.FLOAT_MAT4,
                    sampler2D: e.SAMPLER_2D,
                    samplerCube: e.SAMPLER_CUBE
                };
            }
        }, {
            key: "_parseOne",
            value: function(e, i, n, r, a, s) {
                var o = {
                    type: t.shaderParamsMap[n[r + 1]],
                    name: n[r + 2],
                    size: isNaN(parseInt(n[r + 3])) ? 1 : parseInt(n[r + 3])
                };
                return s && ("attribute" == a ? e.push(o) : i.push(o)), ":" == n[r + 3] && (o.type = n[r + 4], 
                r += 2), r + 2;
            }
        }, {
            key: "addInclude",
            value: function(e, i) {
                if (!i || 0 === i.length) throw new Error("add shader include file err:" + e);
                if (t.includes[e]) throw new Error("add shader include file err, has add:" + e);
                t.includes[e] = new bi(i);
            }
        }, {
            key: "preGetParams",
            value: function(e, i) {
                var n, r, a = [ e, i ], s = {}, o = [], l = [], h = {}, u = {};
                s.attributes = o, s.uniforms = l, s.defines = h;
                for (var c = 0; c < 2; c++) {
                    a[c] = a[c].replace(t._removeAnnotation, "");
                    var _, d = a[c].match(t._reg);
                    for (n = 0, r = d.length; n < r; n++) {
                        var f = d[n];
                        if ("attribute" == f || "uniform" == f) n = t._parseOne(o, l, d, n, f, !0); else {
                            if ("#define" == f) {
                                u[f = d[++n]] = 1;
                                continue;
                            }
                            if ("#ifdef" == f) for (h[_ = d[++n]] = h[_] || [], n++; n < r; n++) if ("attribute" == (f = d[n]) || "uniform" == f) n = t._parseOne(o, l, d, n, f, !!u[_]); else if ("#else" == f) for (n++; n < r; n++) if ("attribute" == (f = d[n]) || "uniform" == f) n = t._parseOne(o, l, d, n, f, !u[_]); else if ("#endif" == f) break;
                        }
                    }
                }
                return s;
            }
        }, {
            key: "splitToWords",
            value: function(t, e) {
                for (var i, n, r = [], a = -1, s = 0, o = t.length; s < o; s++) if (i = t.charAt(s), 
                " \t=+-*/&%!<>()'\",;".indexOf(i) >= 0) {
                    if (a >= 0 && s - a > 1 && (n = t.substr(a, s - a), r.push(n)), '"' == i || "'" == i) {
                        var l = t.indexOf(i, s + 1);
                        if (l < 0) throw "Sharder err:" + t;
                        r.push(t.substr(s + 1, l - s - 1)), s = l, a = -1;
                        continue;
                    }
                    "(" == i && e && r.length > 0 && (n = r[r.length - 1] + ";", "vec4;main;".indexOf(n) < 0 && (e.useFuns += n)), 
                    a = -1;
                } else a < 0 && (a = s);
                return a < o && o - a > 1 && (n = t.substr(a, o - a), r.push(n)), r;
            }
        } ]), t;
    }();
    wi.IFDEF_NO = 0, wi.IFDEF_YES = 1, wi.IFDEF_ELSE = 2, wi.IFDEF_PARENT = 3, wi._removeAnnotation = new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)", "g"), 
    wi._reg = new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])", "g"), 
    wi._splitToWordExps = new RegExp("[(\".*\")]+|[('.*')]+|([ \\t=\\+\\-*/&%!<>!%(),;])", "g"), 
    wi.includes = {}, wi._clearCR = new RegExp("\r", "g"), wi._splitToWordExps3 = new RegExp("[ \\t=\\+\\-*/&%!<>!%(),;\\|]", "g");
    var Mi = function(t) {
        (0, a.default)(n, t);
        var e = l(n);
        function n() {
            var t;
            (0, o.default)(this, n), (t = e.call(this)).worker = new Worker(n.workerPath);
            var r = (0, i.default)(t);
            return t.worker.onmessage = function(t) {
                r.workerMessage(t.data);
            }, t;
        }
        return (0, s.default)(n, [ {
            key: "workerMessage",
            value: function(t) {
                if (t) switch (t.type) {
                  case "Image":
                    this.imageLoaded(t);
                    break;

                  case "Disable":
                    n.enable = !1;
                }
            }
        }, {
            key: "imageLoaded",
            value: function(t) {
                if (t.dataType && "imageBitmap" == t.dataType) {
                    var e = t.imageBitmap;
                    console.log("load:", t.url), this.event(t.url, e);
                } else this.event(t.url, null);
            }
        }, {
            key: "loadImage",
            value: function(t) {
                this.worker.postMessage(t);
            }
        }, {
            key: "_loadImage",
            value: function(t) {
                var e = this, i = e.type;
                if (this._useWorkerLoader && n._enable) {
                    t = O.formatURL(t);
                    n.I.on(t, e, function r(a) {
                        if (n.I.off(t, e, r), a) {
                            var s = a;
                            "nativeimage" !== i && (s = new X()).loadImageSource(a), e.onLoaded(s);
                        } else n._preLoadFun.call(e, t);
                    }), n.I.loadImage(t);
                } else n._preLoadFun.call(e, t);
            }
        } ], [ {
            key: "__init__",
            value: function() {
                return null == n._preLoadFun && !!Worker && (n._preLoadFun = ii.prototype._loadImage, 
                ii.prototype._loadImage = n.prototype._loadImage, n.I || (n.I = new n()), !0);
            }
        }, {
            key: "workerSupported",
            value: function() {
                return !!Worker;
            }
        }, {
            key: "enableWorkerLoader",
            value: function() {
                n._tryEnabled || (n.enable = !0, n._tryEnabled = !0);
            }
        }, {
            key: "enable",
            set: function(t) {
                n._enable != t && (n._enable = t, t && null == n._preLoadFun && (n._enable = n.__init__()));
            },
            get: function() {
                return n._enable;
            }
        } ]), n;
    }(B);
    Mi.workerPath = "libs/workerloader.js", Mi._enable = !1, Mi._tryEnabled = !1;
    var Ii = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "__init__",
            value: function() {
                t._style = ae.document.body.style;
            }
        }, {
            key: "hide",
            value: function() {
                "none" != t.cursor && (t._preCursor = t.cursor, t.cursor = "none");
            }
        }, {
            key: "show",
            value: function() {
                "none" == t.cursor && (t._preCursor ? t.cursor = t._preCursor : t.cursor = "auto");
            }
        }, {
            key: "cursor",
            set: function(e) {
                t._style.cursor = e;
            },
            get: function() {
                return t._style.cursor;
            }
        } ]), t;
    }(), Pi = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t) {
            var n;
            return (0, o.default)(this, i), (n = e.call(this, i.const_stride, 4 * t * i.const_stride, 4)).canReuse = !0, 
            n.setAttributes(i._fixattriInfo), n.createQuadIB(t), n._quadNum = t, n;
        }
        return (0, s.default)(i, [ {
            key: "setMaxParticleNum",
            value: function(t) {
                this._vb._resizeBuffer(4 * t * i.const_stride, !1), this.createQuadIB(t);
            }
        }, {
            key: "releaseMesh",
            value: function() {
                this._vb.setByteLength(0), this.vertNum = 0, this.indexNum = 0, i._POOL.push(this);
            }
        }, {
            key: "destroy",
            value: function() {
                this._ib.destroy(), this._vb.destroy(), this._vb.deleteBuffer();
            }
        } ], [ {
            key: "__init__",
            value: function() {
                var t = A.instance;
                i._fixattriInfo = [ t.FLOAT, 4, 0, t.FLOAT, 3, 16, t.FLOAT, 3, 28, t.FLOAT, 4, 40, t.FLOAT, 4, 56, t.FLOAT, 3, 72, t.FLOAT, 2, 84, t.FLOAT, 4, 92, t.FLOAT, 1, 108, t.FLOAT, 1, 112 ];
            }
        }, {
            key: "getAMesh",
            value: function(t) {
                if (i._POOL.length) {
                    var e = i._POOL.pop();
                    return e.setMaxParticleNum(t), e;
                }
                return new i(t);
            }
        } ]), i;
    }(Dt);
    Pi.const_stride = 116, Pi._POOL = [];
    var Li = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return i;
    }(U);
    Li.create = function(e, i, n) {
        var r = new X(e, i, n, !1, !1);
        return r.wrapModeU = t.WarpMode.Clamp, r.wrapModeV = t.WarpMode.Clamp, r;
    };
    var Di = function() {
        function e() {
            (0, o.default)(this, e);
        }
        return (0, s.default)(e, null, [ {
            key: "__init",
            value: function(t) {
                t.forEach(function(t) {
                    t.__init$ && t.__init$();
                });
            }
        }, {
            key: "init",
            value: function(i, n) {
                if (!e._isinit) {
                    e._isinit = !0, ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice = e._arrayBufferSlice), 
                    ae.__init__();
                    for (var r = ae.mainCanvas = new Se(!0), a = r.source.style, s = arguments.length, o = new Array(s > 2 ? s - 2 : 0), l = 2; l < s; l++) o[l - 2] = arguments[l];
                    if (a.position = "absolute", a.top = a.left = "0px", a.background = "#000000", ae.onKGMiniGame || ae.onAlipayMiniGame || ae.container.appendChild(r.source), 
                    ae.canvas = new Se(!0), ae.context = ae.canvas.getContext("2d"), ae.supportWebAudio = $e.__init__(), 
                    ae.supportLocalStorage = si.__init__(), e.systemTimer = new ki(!1), t.systemTimer = ki.gSysTimer = e.systemTimer, 
                    e.startTimer = new ki(!1), e.physicsTimer = new ki(!1), e.updateTimer = new ki(!1), 
                    e.lateTimer = new ki(!1), e.timer = new ki(!1), t.startTimer = u.startTimer = e.startTimer, 
                    t.lateTimer = u.lateTimer = e.lateTimer, t.updateTimer = u.updateTimer = e.updateTimer, 
                    u.systemTimer = e.systemTimer, t.timer = u.timer = e.timer, t.physicsTimer = u.physicsTimer = e.physicsTimer, 
                    e.loader = new ri(), u.Laya = e, t.loader = u.loader = e.loader, pi.__init__(), 
                    yi.__init(), Ii.__init__(), ce.inner_enable(), o) for (var h = 0, c = o.length; h < c; h++) o[h] && o[h].enable && o[h].enable();
                    return u.Render.isConchApp && e.enableNative(), e.enableWebGLPlus(), ke.beginCheck(), 
                    t.stage = e.stage = new He(), u.stage = e.stage, st.gStage = e.stage, O.rootPath = O._basePath = e._getUrlPath(), 
                    Bt.__int__(), Ot.__init__(), Ft.__init__(), e.render = new de(0, 0, ae.mainCanvas), 
                    t.render = e.render, e.stage.size(i, n), window.stage = e.stage, L.__init__(), Pi.__init__(), 
                    wi.__init__(), be.__init__(), ze.__init__(), Ge.instance.__init__(e.stage, de.canvas), 
                    Ne.__init__(), $e.autoStopMusic = !0, $._StatRender = new xi(), it._initone(Q.TEXTURE2D, Ci), 
                    it._initone(Q.TEXTURE2D | Q.FILTERGLOW, Ci), it._initone(Q.PRIMITIVE, Ai), it._initone(Q.SKINMESH, Ri), 
                    de.canvas;
                }
            }
        }, {
            key: "_getUrlPath",
            value: function() {
                return O.getPath(location.protocol + "//" + location.host + location.pathname);
            }
        }, {
            key: "_arrayBufferSlice",
            value: function(t, e) {
                var i = new Uint8Array(this, t, e - t), n = new Uint8Array(i.length);
                return n.set(i), n.buffer;
            }
        }, {
            key: "alertGlobalError",
            value: function(t) {
                var e = 0;
                ae.window.onerror = t ? function(t, i, n, r, a) {
                    e++ < 5 && a && this.alert("出错啦，请把此信息截图给研发商\n" + t + "\n" + a.stack);
                } : null;
            }
        }, {
            key: "_runScript",
            value: function(t) {
                return ae.window[e._evcode](t);
            }
        }, {
            key: "enableDebugPanel",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "libs/laya.debugtool.js";
                if (window.Laya.DebugPanel) window.Laya.DebugPanel.enable(); else {
                    var e = ae.createElement("script");
                    e.onload = function() {
                        window.Laya.DebugPanel.enable();
                    }, e.src = t, ae.document.body.appendChild(e);
                }
            }
        }, {
            key: "enableWebGLPlus",
            value: function() {
                L.__init_native();
            }
        }, {
            key: "enableNative",
            value: function() {
                e.isNativeRender_enable || (e.isNativeRender_enable = !0, de.supportWebGLPlusRendering && (tt.prototype.uploadTexture2D = function(t) {
                    var e = A.instance;
                    e.bindTexture(e.TEXTURE_2D, t);
                }), z.width = ae.window.innerWidth, z.height = ae.window.innerHeight, ae.measureText = function(t, e) {
                    return window.conchTextCanvas.font = e, window.conchTextCanvas.measureText(t);
                }, He.clear = function(t) {
                    he.set2DRenderConfig();
                    var e = ot.create(t).arrColor, i = A.instance;
                    e && i.clearColor(e[0], e[1], e[2], e[3]), i.clear(i.COLOR_BUFFER_BIT | i.DEPTH_BUFFER_BIT | i.STENCIL_BUFFER_BIT), 
                    z.clear();
                }, Be.drawToCanvas = Be.drawToTexture = function(t, e, i, n, r, a) {
                    r -= t.x, a -= t.y, r |= 0, a |= 0, i |= 0, n |= 0;
                    var s = new Se(!1), o = s.getContext("2d");
                    return s.size(i, n), o.asBitmap = !0, o._targets.start(), be.renders[e]._fun(t, o, r, a), 
                    o.flush(), o._targets.end(), o._targets.restore(), s;
                }, Object.defineProperty(K.prototype, "uv", {
                    get: function() {
                        return this._uv;
                    },
                    set: function(t) {
                        this._uv = t;
                    }
                }), Se.prototype.getTexture = function() {
                    return this._texture || (this._texture = this.context._targets, this._texture.uv = K.flipyuv, 
                    this._texture.bitmap = this._texture), this._texture;
                });
            }
        } ]), e;
    }();
    Di.stage = null, Di.systemTimer = null, Di.startTimer = null, Di.physicsTimer = null, 
    Di.updateTimer = null, Di.lateTimer = null, Di.timer = null, Di.loader = null, Di.version = "2.12.0", 
    Di._isinit = !1, Di.isWXOpenDataContext = !1, Di.isWXPosMsg = !1, Di.__classmap = null, 
    Di.Config = h, Di.TextRender = le, Di.EventDispatcher = B, Di.SoundChannel = Ke, 
    Di.Stage = He, Di.Render = de, Di.Browser = ae, Di.Sprite = Be, Di.Node = De, Di.Context = he, 
    Di.WebGL = ce, Di.Handler = D, Di.RunDriver = Ve, Di.Utils = st, Di.Input = Ne, 
    Di.Loader = ii, Di.LocalStorage = si, Di.SoundManager = $e, Di.URL = O, Di.Event = Jt, 
    Di.Matrix = k, Di.HTMLImage = Li, Di.Laya = Di, Di._evcode = "eval", Di.isNativeRender_enable = !1, 
    Di.__classmap = u.__classMap, u.Timer = ki, u.Dragging = ci, u.GraphicsBounds = ye, 
    u.Sprite = Be, u.TextRender = le, u.Loader = ii, u.TTFLoader = li, u.WebAudioSound = Qe, 
    u.SoundManager = $e, u.ShaderCompile = wi, u.ClassUtils = Me, u.SceneUtils = yi, 
    u.Context = he, u.Render = de, u.MouseManager = Ge, u.Text = Oe, u.Browser = ae, 
    u.WebGL = ce, u.AudioSound = qe, u.Pool = c, u.Utils = st, u.Graphics = Re, u.Submit = Ht, 
    u.Stage = He, u.Resource = N, u.WorkerLoader = Mi;
    var Bi = window._layalibs;
    if (Bi) {
        Bi.sort(function(t, e) {
            return t.i - e.i;
        });
        for (var Fi = 0; Fi < Bi.length; Fi++) Bi[Fi].f(window, window.document, Di);
    }
    var Oi = window;
    Oi.Laya ? (Oi.Laya.Laya = Di, Object.assign(Oi.Laya, Di)) : Oi.Laya = Di;
    var Ni, Ui = Di.__init, Gi = Di.init, Wi = Di.version, Yi = Di.alertGlobalError, Vi = Di.enableDebugPanel;
    function Xi(t, e) {
        for (var i = 0, n = e.length; i < n; i += 2) if ("length" == e[i]) t.length = e[i + 1].call(t); else {
            !function() {
                var n = e[i], r = e[i + 1];
                Object.defineProperty(t, n, {
                    get: function() {
                        return delete this[n], this[n] = r.call(this);
                    },
                    set: function(t) {
                        delete this[n], this[n] = t;
                    },
                    enumerable: !0,
                    configurable: !0
                });
            }();
        }
    }
    var Hi = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return (0, s.default)(i, [ {
            key: "_onAwake",
            value: function() {
                this.onAwake(), this.onStart !== i.prototype.onStart && u.startTimer.callLater(this, this.onStart);
            }
        }, {
            key: "_onEnable",
            value: function() {
                var t = i.prototype;
                this.onTriggerEnter !== t.onTriggerEnter && this.owner.on(Jt.TRIGGER_ENTER, this, this.onTriggerEnter), 
                this.onTriggerStay !== t.onTriggerStay && this.owner.on(Jt.TRIGGER_STAY, this, this.onTriggerStay), 
                this.onTriggerExit !== t.onTriggerExit && this.owner.on(Jt.TRIGGER_EXIT, this, this.onTriggerExit), 
                this.onMouseDown !== t.onMouseDown && this.owner.on(Jt.MOUSE_DOWN, this, this.onMouseDown), 
                this.onMouseUp !== t.onMouseUp && this.owner.on(Jt.MOUSE_UP, this, this.onMouseUp), 
                this.onClick !== t.onClick && this.owner.on(Jt.CLICK, this, this.onClick), this.onStageMouseDown !== t.onStageMouseDown && u.stage.on(Jt.MOUSE_DOWN, this, this.onStageMouseDown), 
                this.onStageMouseUp !== t.onStageMouseUp && u.stage.on(Jt.MOUSE_UP, this, this.onStageMouseUp), 
                this.onStageClick !== t.onStageClick && u.stage.on(Jt.CLICK, this, this.onStageClick), 
                this.onStageMouseMove !== t.onStageMouseMove && u.stage.on(Jt.MOUSE_MOVE, this, this.onStageMouseMove), 
                this.onDoubleClick !== t.onDoubleClick && this.owner.on(Jt.DOUBLE_CLICK, this, this.onDoubleClick), 
                this.onRightClick !== t.onRightClick && this.owner.on(Jt.RIGHT_CLICK, this, this.onRightClick), 
                this.onMouseMove !== t.onMouseMove && this.owner.on(Jt.MOUSE_MOVE, this, this.onMouseMove), 
                this.onMouseOver !== t.onMouseOver && this.owner.on(Jt.MOUSE_OVER, this, this.onMouseOver), 
                this.onMouseOut !== t.onMouseOut && this.owner.on(Jt.MOUSE_OUT, this, this.onMouseOut), 
                this.onKeyDown !== t.onKeyDown && u.stage.on(Jt.KEY_DOWN, this, this.onKeyDown), 
                this.onKeyPress !== t.onKeyPress && u.stage.on(Jt.KEY_PRESS, this, this.onKeyPress), 
                this.onKeyUp !== t.onKeyUp && u.stage.on(Jt.KEY_UP, this, this.onKeyUp), this.onUpdate !== t.onUpdate && u.updateTimer.frameLoop(1, this, this.onUpdate), 
                this.onLateUpdate !== t.onLateUpdate && u.lateTimer.frameLoop(1, this, this.onLateUpdate), 
                this.onPreRender !== t.onPreRender && u.lateTimer.frameLoop(1, this, this.onPreRender), 
                this.onEnable();
            }
        }, {
            key: "_onDisable",
            value: function() {
                this.owner.offAllCaller(this), u.stage.offAllCaller(this), u.startTimer.clearAll(this), 
                u.updateTimer.clearAll(this), u.lateTimer.clearAll(this);
            }
        }, {
            key: "_isScript",
            value: function() {
                return !0;
            }
        }, {
            key: "_onDestroy",
            value: function() {
                this.onDestroy();
            }
        }, {
            key: "onAwake",
            value: function() {}
        }, {
            key: "onEnable",
            value: function() {}
        }, {
            key: "onStart",
            value: function() {}
        }, {
            key: "onTriggerEnter",
            value: function(t, e, i) {}
        }, {
            key: "onTriggerStay",
            value: function(t, e, i) {}
        }, {
            key: "onTriggerExit",
            value: function(t, e, i) {}
        }, {
            key: "onMouseDown",
            value: function(t) {}
        }, {
            key: "onMouseUp",
            value: function(t) {}
        }, {
            key: "onClick",
            value: function(t) {}
        }, {
            key: "onStageMouseDown",
            value: function(t) {}
        }, {
            key: "onStageMouseUp",
            value: function(t) {}
        }, {
            key: "onStageClick",
            value: function(t) {}
        }, {
            key: "onStageMouseMove",
            value: function(t) {}
        }, {
            key: "onDoubleClick",
            value: function(t) {}
        }, {
            key: "onRightClick",
            value: function(t) {}
        }, {
            key: "onMouseMove",
            value: function(t) {}
        }, {
            key: "onMouseOver",
            value: function(t) {}
        }, {
            key: "onMouseOut",
            value: function(t) {}
        }, {
            key: "onKeyDown",
            value: function(t) {}
        }, {
            key: "onKeyPress",
            value: function(t) {}
        }, {
            key: "onKeyUp",
            value: function(t) {}
        }, {
            key: "onUpdate",
            value: function() {}
        }, {
            key: "onLateUpdate",
            value: function() {}
        }, {
            key: "onPreRender",
            value: function() {}
        }, {
            key: "onPostRender",
            value: function() {}
        }, {
            key: "onDisable",
            value: function() {}
        }, {
            key: "onDestroy",
            value: function() {}
        }, {
            key: "isSingleton",
            get: function() {
                return !1;
            }
        } ]), i;
    }(_i), zi = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.apply(this, arguments))._nodeIDAniDic = {}, 
            t;
        }
        return (0, s.default)(n, [ {
            key: "_parseNodeList",
            value: function(t) {
                this._nodeList || (this._nodeList = []), this._nodeDefaultProps[t.compId] = t.props, 
                t.compId && this._nodeList.push(t.compId);
                var e = t.child;
                if (e) {
                    var i, n = e.length;
                    for (i = 0; i < n; i++) this._parseNodeList(e[i]);
                }
            }
        }, {
            key: "_calGraphicData",
            value: function(t) {
                var e;
                if (this._setUp(null, t), this._createGraphicData(), this._nodeIDAniDic) for (e in this._nodeIDAniDic) this._nodeIDAniDic[e] = null;
            }
        }, {
            key: "_createGraphicData",
            value: function() {
                var t, e, i = [], n = this.count, r = this._usedFrames;
                for (r || (r = []), t = 0; t < n; t++) !r[t] && e || (e = this._createFrameGraphic(t)), 
                i.push(e);
                this._gList = i;
            }
        }, {
            key: "_createFrameGraphic",
            value: function(t) {
                var e = new Re();
                return n._rootMatrix || (n._rootMatrix = new k()), this._updateNodeGraphic(this._rootNode, t, n._rootMatrix, e), 
                e;
            }
        }, {
            key: "_updateNodeGraphic",
            value: function(t, e, i, n) {
                var r, a, s, o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                (r = this._nodeGDic[t.compId] = this._getNodeGraphicData(t.compId, e, this._nodeGDic[t.compId])).resultTransform || (r.resultTransform = new k()), 
                a = r.resultTransform, k.mul(r.transform, i, a);
                var l = r.alpha * o;
                if (!(l < .01)) {
                    r.skin && (s = this._getTextureByUrl(r.skin)) && (a._checkTransform() ? (n.drawTexture(s, 0, 0, r.width, r.height, a, l), 
                    r.resultTransform = null) : n.drawTexture(s, a.tx, a.ty, r.width, r.height, null, l));
                    var h, u, c = t.child;
                    if (c) for (u = c.length, h = 0; h < u; h++) this._updateNodeGraphic(c[h], e, a, n, l);
                }
            }
        }, {
            key: "_updateNoChilds",
            value: function(t, e) {
                if (t.skin) {
                    var i = this._getTextureByUrl(t.skin);
                    if (i) {
                        var n = t.transform;
                        n._checkTransform(), n._bTransform ? e.drawTexture(i, 0, 0, t.width, t.height, n.clone(), t.alpha) : e.drawTexture(i, n.tx, n.ty, t.width, t.height, null, t.alpha);
                    }
                }
            }
        }, {
            key: "_updateNodeGraphic2",
            value: function(t, e, i) {
                var n;
                if (n = this._nodeGDic[t.compId] = this._getNodeGraphicData(t.compId, e, this._nodeGDic[t.compId]), 
                t.child) {
                    var r, a, s, o = n.transform;
                    o._checkTransform(), a = (r = !o._bTransform) && (0 != o.tx || 0 != o.ty), (s = o._bTransform || 1 != n.alpha) && i.save(), 
                    1 != n.alpha && i.alpha(n.alpha), r ? a && i.translate(o.tx, o.ty) : i.transform(o.clone());
                    var l, h, u, c = t.child;
                    if (n.skin && (l = this._getTextureByUrl(n.skin)) && i.drawImage(l, 0, 0, n.width, n.height), 
                    c) for (u = c.length, h = 0; h < u; h++) this._updateNodeGraphic2(c[h], e, i);
                    s ? i.restore() : r ? a && i.translate(-o.tx, -o.ty) : i.transform(o.clone().invert());
                } else this._updateNoChilds(n, i);
            }
        }, {
            key: "_calculateKeyFrames",
            value: function(t) {
                (0, e.default)((0, r.default)(n.prototype), "_calculateKeyFrames", this).call(this, t), 
                this._nodeIDAniDic[t.target] = t;
            }
        }, {
            key: "getNodeDataByID",
            value: function(t) {
                return this._nodeIDAniDic[t];
            }
        }, {
            key: "_getParams",
            value: function(t, e, i, r) {
                var a = n._temParam;
                a.length = e.length;
                var s, o = e.length;
                for (s = 0; s < o; s++) a[s] = this._getObjVar(t, e[s][0], i, e[s][1], r);
                return a;
            }
        }, {
            key: "_getObjVar",
            value: function(t, e, i, n, r) {
                if (e in t) {
                    var a = t[e];
                    return i >= a.length && (i = a.length - 1), t[e][i];
                }
                return e in r ? r[e] : n;
            }
        }, {
            key: "_getNodeGraphicData",
            value: function(t, e, i) {
                i || (i = new Ki()), i.transform ? i.transform.identity() : i.transform = new k();
                var r = this.getNodeDataByID(t);
                if (!r) return i;
                var a, s, o, l = r.frames, h = this._getParams(l, n._drawTextureCmd, e, this._nodeDefaultProps[t]), u = h[0], c = h[5], _ = h[6], d = h[13], f = h[14], v = h[7], p = h[8], y = h[9], g = h[11], m = h[12];
                a = h[3], s = h[4], 0 != a && 0 != s || (u = null), -1 == a && (a = 0), -1 == s && (s = 0), 
                i.skin = u, i.width = a, i.height = s, u && ((o = this._getTextureByUrl(u)) ? (a || (a = o.sourceWidth), 
                s || (s = o.sourceHeight)) : console.warn("lost skin:", u, ",you may load pics first")), 
                i.alpha = h[10];
                var T = i.transform;
                0 != d && (c = d * a), 0 != f && (_ = f * s), 0 == c && 0 == _ || T.translate(-c, -_);
                var x = null;
                if (y || 1 !== v || 1 !== p || g || m) {
                    (x = n._tempMt).identity(), x._bTransform = !0;
                    var E = .0174532922222222 * (y - g), R = .0174532922222222 * (y + m), A = Math.cos(R), C = Math.sin(R), b = Math.sin(E), S = Math.cos(E);
                    x.a = v * A, x.b = v * C, x.c = -p * b, x.d = p * S, x.tx = x.ty = 0;
                }
                return x && (T = k.mul(T, x, T)), T.translate(h[1], h[2]), i;
            }
        }, {
            key: "_getTextureByUrl",
            value: function(t) {
                return ii.getRes(t);
            }
        }, {
            key: "setAniData",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                if (t.animations) {
                    this._nodeDefaultProps = {}, this._nodeGDic = {}, this._nodeList && (this._nodeList.length = 0), 
                    this._rootNode = t, this._parseNodeList(t);
                    var i, r, a = {}, s = [], o = t.animations, l = o.length;
                    for (i = 0; i < l; i++) if (r = o[i], this._labels = null, (!e || e == r.name) && r) {
                        try {
                            this._calGraphicData(r);
                        } catch (t) {
                            t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                            console.warn("parse animation fail:" + r.name + ",empty animation created"), this._gList = [];
                        }
                        var h = {};
                        h.interval = 1e3 / r.frameRate, h.frames = this._gList, h.labels = this._labels, 
                        h.name = r.name, s.push(h), a[r.name] = h;
                    }
                    this.animationList = s, this.animationDic = a;
                }
                n._temParam.length = 0;
            }
        }, {
            key: "parseByData",
            value: function(t) {
                var e, i;
                e = t.nodeRoot, i = t.aniO, delete t.nodeRoot, delete t.aniO, this._nodeDefaultProps = {}, 
                this._nodeGDic = {}, this._nodeList && (this._nodeList.length = 0), this._rootNode = e, 
                this._parseNodeList(e), this._labels = null;
                try {
                    this._calGraphicData(i);
                } catch (t) {
                    t = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(t);
                    console.warn("parse animation fail:" + i.name + ",empty animation created"), this._gList = [];
                }
                var n = t;
                return n.interval = 1e3 / i.frameRate, n.frames = this._gList, n.labels = this._labels, 
                n.name = i.name, n;
            }
        }, {
            key: "setUpAniData",
            value: function(t) {
                if (t.animations) {
                    var e, i, n = {}, r = [], a = t.animations, s = a.length;
                    for (e = 0; e < s; e++) if (i = a[e]) {
                        var o = {};
                        o.name = i.name, o.aniO = i, o.nodeRoot = t, r.push(o), n[i.name] = o;
                    }
                    this.animationList = r, this.animationDic = n;
                }
            }
        }, {
            key: "_clear",
            value: function() {
                this.animationList = null, this.animationDic = null, this._gList = null, this._nodeGDic = null;
            }
        } ], [ {
            key: "parseAnimationByData",
            value: function(t) {
                var e;
                return n._I || (n._I = new n()), e = n._I.parseByData(t), n._I._clear(), e;
            }
        }, {
            key: "parseAnimationData",
            value: function(t) {
                var e;
                return n._I || (n._I = new n()), n._I.setUpAniData(t), (e = {}).animationList = n._I.animationList, 
                e.animationDic = n._I.animationDic, n._I._clear(), e;
            }
        } ]), n;
    }(vi);
    zi._drawTextureCmd = [ [ "skin", null ], [ "x", 0 ], [ "y", 0 ], [ "width", -1 ], [ "height", -1 ], [ "pivotX", 0 ], [ "pivotY", 0 ], [ "scaleX", 1 ], [ "scaleY", 1 ], [ "rotation", 0 ], [ "alpha", 1 ], [ "skewX", 0 ], [ "skewY", 0 ], [ "anchorX", 0 ], [ "anchorY", 0 ] ], 
    zi._temParam = [], zi._tempMt = new k();
    var Ki = function t() {
        (0, o.default)(this, t), this.alpha = 1;
    }, ji = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h() {
            var t;
            return (0, o.default)(this, h), (t = n.call(this))._setControlNode((0, i.default)(t)), 
            t;
        }
        return (0, s.default)(h, [ {
            key: "destroy",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                this.stop(), (0, e.default)((0, r.default)(h.prototype), "destroy", this).call(this, t), 
                this._frames = null, this._labels = null;
            }
        }, {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
                n && this._setFramesFromCache(n, !0), (0, e.default)((0, r.default)(h.prototype), "play", this).call(this, t, i, n);
            }
        }, {
            key: "_setFramesFromCache",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (this._url && (t = this._url + "#" + t), t && h.framesMap[t]) {
                    var i = h.framesMap[t];
                    return i instanceof Array ? (this._frames = h.framesMap[t], this._count = this._frames.length) : (i.nodeRoot && (h.framesMap[t] = zi.parseAnimationByData(i), 
                    i = h.framesMap[t]), this._frames = i.frames, this._count = this._frames.length, 
                    this._frameRateChanged || (this._interval = i.interval), this._labels = this._copyLabels(i.labels)), 
                    !0;
                }
                return e && console.log("ani not found:", t), !1;
            }
        }, {
            key: "_copyLabels",
            value: function(t) {
                if (!t) return null;
                var e, i;
                for (i in e = {}, t) e[i] = st.copyArray([], t[i]);
                return e;
            }
        }, {
            key: "_frameLoop",
            value: function() {
                this._visible && this._style.alpha > .01 && this._frames && (0, e.default)((0, r.default)(h.prototype), "_frameLoop", this).call(this);
            }
        }, {
            key: "_displayToIndex",
            value: function(t) {
                this._frames && (this.graphics = this._frames[t]);
            }
        }, {
            key: "clear",
            value: function() {
                return (0, e.default)((0, r.default)(h.prototype), "clear", this).call(this), this.stop(), 
                this.graphics = null, this._frames = null, this._labels = null, this;
            }
        }, {
            key: "loadImages",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                return this._url = "", this._setFramesFromCache(e) || (this.frames = h.framesMap[e] ? h.framesMap[e] : h.createFrames(t, e)), 
                this;
            }
        }, {
            key: "loadAtlas",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
                this._url = "";
                var n = this;
                if (!n._setFramesFromCache(i)) {
                    var r = function(r) {
                        t === r && (n.frames = h.framesMap[i] ? h.framesMap[i] : h.createFrames(t, i), e && e.run());
                    };
                    ii.getAtlas(t) ? r(t) : u.loader.load(t, D.create(null, r, [ t ]), null, ii.ATLAS);
                }
                return this;
            }
        }, {
            key: "loadAnimation",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                return this._url = t, this._actionName || (this._actionName = ""), this._setFramesFromCache(this._actionName) ? (this._setFramesFromCache(this._actionName, !0), 
                this.index = 0, e && e.run()) : !i || ii.getAtlas(i) ? this._loadAnimationData(t, e, i) : u.loader.load(i, D.create(this, this._loadAnimationData, [ t, e, i ]), null, ii.ATLAS), 
                this;
            }
        }, {
            key: "_loadAnimationData",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                if (!i || ii.getAtlas(i)) {
                    var n = this;
                    ii.getRes(t) ? r(t) : u.loader.load(t, D.create(null, r, [ t ]), null, ii.JSON);
                } else console.warn("atlas load fail:" + i);
                function r(i) {
                    if (ii.getRes(i)) {
                        if (t === i) {
                            var r;
                            if (h.framesMap[t + "#"]) n._setFramesFromCache(n._actionName, !0), n.index = 0, 
                            n._resumePlay(); else {
                                var a = zi.parseAnimationData(ii.getRes(t));
                                if (!a) return;
                                var s, o, l = a.animationList, u = l.length;
                                for (s = 0; s < u; s++) r = l[s], h.framesMap[t + "#" + r.name] = r, o || (o = r);
                                o && (h.framesMap[t + "#"] = o, n._setFramesFromCache(n._actionName, !0), n.index = 0), 
                                n._resumePlay();
                            }
                            e && e.run();
                        }
                        ii.clearRes(t);
                    } else h.framesMap[t + "#"] && (n._setFramesFromCache(n._actionName, !0), n.index = 0, 
                    n._resumePlay(), e && e.run());
                }
            }
        }, {
            key: "frames",
            get: function() {
                return this._frames;
            },
            set: function(t) {
                this._frames = t, t && (this._count = t.length, this._actionName && this._setFramesFromCache(this._actionName, !0), 
                this.index = this._index);
            }
        }, {
            key: "source",
            set: function(t) {
                t.indexOf(".ani") > -1 ? this.loadAnimation(t) : t.indexOf(".json") > -1 || t.indexOf("als") > -1 || t.indexOf("atlas") > -1 ? this.loadAtlas(t) : this.loadImages(t.split(","));
            }
        }, {
            key: "autoAnimation",
            set: function(t) {
                this.play(0, !0, t);
            }
        }, {
            key: "autoPlay",
            set: function(t) {
                t ? this.play() : this.stop();
            }
        } ], [ {
            key: "createFrames",
            value: function(t, e) {
                var i;
                if ("string" == typeof t) {
                    var n = ii.getAtlas(t);
                    if (n && n.length) {
                        i = [];
                        for (var r = 0, a = n.length; r < a; r++) {
                            var s = new Re();
                            s.drawImage(ii.getRes(n[r]), 0, 0), i.push(s);
                        }
                    }
                } else if (t instanceof Array) for (i = [], r = 0, a = t.length; r < a; r++) (s = new Re()).loadImage(t[r], 0, 0), 
                i.push(s);
                return e && (h.framesMap[e] = i), i;
            }
        }, {
            key: "clearCache",
            value: function(t) {
                var e, i = h.framesMap, n = t + "#";
                for (e in i) e !== t && 0 !== e.indexOf(n) || delete h.framesMap[e];
            }
        } ]), h;
    }(di);
    ji.framesMap = {}, u.regClass(ji), Me.regClass("laya.display.Animation", ji), Me.regClass("Laya.Animation", ji);
    var qi = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.apply(this, arguments))._initData = {}, t;
        }
        return (0, s.default)(n, [ {
            key: "_onOtherBegin",
            value: function(t) {
                t !== this && this.stop();
            }
        }, {
            key: "_addEvent",
            value: function() {
                this._target && this._playEvent && (this._setControlNode(this._target), this._target.on(this._playEvent, this, this._onPlayAction));
            }
        }, {
            key: "_onPlayAction",
            value: function() {
                this.play(0, !1);
            }
        }, {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
                this._target && (this._target.event(n.EFFECT_BEGIN, [ this ]), this._recordInitData(), 
                (0, e.default)((0, r.default)(n.prototype), "play", this).call(this, t, i, a));
            }
        }, {
            key: "_recordInitData",
            value: function() {
                var t, e, i;
                if (this._aniKeys) for (e = this._aniKeys.length, t = 0; t < e; t++) i = this._aniKeys[t], 
                this._initData[i] = this._target[i];
            }
        }, {
            key: "_displayToIndex",
            value: function(t) {
                if (this._animationData) {
                    t < 0 && (t = 0), t > this._count && (t = this._count);
                    var e, i = this._animationData.nodes, n = i.length;
                    for (n = n > 1 ? 1 : n, e = 0; e < n; e++) this._displayNodeToFrame(i[e], t);
                }
            }
        }, {
            key: "_displayNodeToFrame",
            value: function(t, e) {
                if (this._target) {
                    var i, n, r, a, s, o, l, h, u, c = this._target, _ = t.frames, d = t.keys, f = d.length, v = t.secondFrames;
                    for (a = 0; a < f; a++) n = _[i = d[a]], -1 == (s = v[i]) ? r = this._initData[i] : e < s ? (h = (l = t.keyframes[i])[0]).tween ? (null == (o = hi[h.tweenMethod]) && (o = hi.linearNone), 
                    u = l[1], r = o(e, this._initData[i], u.value - this._initData[i], u.index)) : r = this._initData[i] : r = n.length > e ? n[e] : n[n.length - 1], 
                    c[i] = r;
                }
            }
        }, {
            key: "_calculateKeyFrames",
            value: function(t) {
                (0, e.default)((0, r.default)(n.prototype), "_calculateKeyFrames", this).call(this, t);
                var i, a, s = t.keyframes, o = (t.target, {});
                for (i in t.secondFrames = o, s) (a = s[i]).length <= 1 ? o[i] = -1 : o[i] = a[1].index;
            }
        }, {
            key: "target",
            set: function(t) {
                this._target && this._target.off(n.EFFECT_BEGIN, this, this._onOtherBegin), this._target = t, 
                this._target && this._target.on(n.EFFECT_BEGIN, this, this._onOtherBegin), this._addEvent();
            },
            get: function() {
                return this._target;
            }
        }, {
            key: "playEvent",
            set: function(t) {
                this._playEvent = t, t && this._addEvent();
            }
        }, {
            key: "effectClass",
            set: function(t) {
                if (this._effectClass = Me.getClass(t), this._effectClass) {
                    var e = this._effectClass.uiView;
                    if (e) {
                        var i = e.animations;
                        if (i && i[0]) {
                            var n = i[0];
                            this._setUp({}, n), n.nodes && n.nodes[0] && (this._aniKeys = n.nodes[0].keys);
                        }
                    }
                }
            }
        }, {
            key: "effectData",
            set: function(t) {
                if (t) {
                    var e = t.animations;
                    if (e && e[0]) {
                        var i = e[0];
                        this._setUp({}, i), i.nodes && i.nodes[0] && (this._aniKeys = i.nodes[0].keys);
                    }
                }
            }
        } ]), n;
    }(vi);
    qi.EFFECT_BEGIN = "effectbegin", Me.regClass("laya.display.EffectAnimation", qi), 
    Me.regClass("Laya.EffectAnimation", qi);
    var Zi = function(t) {
        (0, a.default)(n, t);
        var e = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = e.call(this))._completeHandler = new D((0, 
            i.default)(t), t.onOneLoadComplete), t.reset(), t;
        }
        return (0, s.default)(n, [ {
            key: "reset",
            value: function() {
                this._toLoadList = [], this._isLoading = !1, this.totalCount = 0;
            }
        }, {
            key: "load",
            value: function(t) {
                var e, i, n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                if (t instanceof Array) for (i = t.length, e = 0; e < i; e++) this._addToLoadList(t[e], n); else this._addToLoadList(t, n);
                r && this._checkNext();
            }
        }, {
            key: "_addToLoadList",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                this._toLoadList.indexOf(t) >= 0 || ii.getRes(t) || (e ? this._toLoadList.push({
                    url: t
                }) : this._toLoadList.push(t), this.totalCount++);
            }
        }, {
            key: "_checkNext",
            value: function() {
                if (!this._isLoading) {
                    if (0 == this._toLoadList.length) return void this.event(Jt.COMPLETE);
                    var t;
                    "string" == typeof (t = this._toLoadList.pop()) ? this.loadOne(t) : this.loadOne(t.url, !0);
                }
            }
        }, {
            key: "loadOne",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                this._curUrl = t;
                var i = st.getFileExtension(this._curUrl);
                e ? u.loader.create(t, this._completeHandler) : n.LoadableExtensions[i] ? u.loader.load(t, this._completeHandler, null, n.LoadableExtensions[i]) : t != ni.getFileLoadPath(t) || n.No3dLoadTypes[i] || !ri.createMap[i] ? u.loader.load(t, this._completeHandler) : u.loader.create(t, this._completeHandler);
            }
        }, {
            key: "onOneLoadComplete",
            value: function() {
                this._isLoading = !1, ii.getRes(this._curUrl) || console.log("Fail to load:", this._curUrl);
                var t, e = st.getFileExtension(this._curUrl);
                n.LoadableExtensions[e] && ((t = ii.getRes(this._curUrl)) && t instanceof Je && (t = t.json), 
                t && (t.loadList && this.load(t.loadList, !1, !1), t.loadList3D && this.load(t.loadList3D, !0, !1))), 
                "sk" == e && this.load(this._curUrl.replace(".sk", ".png"), !1, !1), this.event(Jt.PROGRESS, this.getProgress()), 
                this._checkNext();
            }
        }, {
            key: "getProgress",
            value: function() {
                return this.loadedCount / this.totalCount;
            }
        }, {
            key: "leftCount",
            get: function() {
                return this._isLoading ? this._toLoadList.length + 1 : this._toLoadList.length;
            }
        }, {
            key: "loadedCount",
            get: function() {
                return this.totalCount - this.leftCount;
            }
        } ]), n;
    }(B);
    Zi.LoadableExtensions = {
        scene: ii.JSON,
        scene3d: ii.JSON,
        ani: ii.JSON,
        ui: ii.JSON,
        prefab: ii.PREFAB
    }, Zi.No3dLoadTypes = {
        png: !0,
        jpg: !0,
        txt: !0
    };
    var Qi = function(t) {
        (0, a.default)(h, t);
        var n = l(h);
        function h() {
            var t, e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return (0, o.default)(this, h), (t = n.call(this)).autoDestroyAtClosed = !1, t.url = null, 
            t._viewCreated = !1, t._idMap = null, t._$componentType = "Scene", h.unDestroyedScenes.push((0, 
            i.default)(t)), t._scene = (0, i.default)(t), e && t.createChildren(), t;
        }
        return (0, s.default)(h, [ {
            key: "createChildren",
            value: function() {}
        }, {
            key: "loadScene",
            value: function(t) {
                var e = t.indexOf(".") > -1 ? t : t + ".scene", i = u.loader.getRes(e);
                if (i) this.createView(i); else {
                    this._setBit(Ae.NOT_READY, !0), u.loader.resetProgress();
                    var n = new Zi();
                    n.on(Jt.COMPLETE, this, this._onSceneLoaded, [ e ]), n.load(e);
                }
            }
        }, {
            key: "_onSceneLoaded",
            value: function(t) {
                this.createView(u.Loader.getRes(t));
            }
        }, {
            key: "createView",
            value: function(t) {
                t && !this._viewCreated && (this._viewCreated = !0, yi.createByData(this, t));
            }
        }, {
            key: "getNodeByID",
            value: function(t) {
                return this._idMap ? this._idMap[t] : null;
            }
        }, {
            key: "open",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                t && h.closeAll(), h.root.addChild(this), this.onOpened(e);
            }
        }, {
            key: "onOpened",
            value: function(t) {}
        }, {
            key: "close",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                this.onClosed(t), this.autoDestroyAtClosed ? this.destroy() : this.removeSelf();
            }
        }, {
            key: "onClosed",
            value: function() {}
        }, {
            key: "destroy",
            value: function() {
                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                this._idMap = null, (0, e.default)((0, r.default)(h.prototype), "destroy", this).call(this, t);
                for (var i = h.unDestroyedScenes, n = i.length - 1; n > -1; n--) if (i[n] === this) return void i.splice(n, 1);
            }
        }, {
            key: "_sizeChanged",
            value: function() {
                this.event(Jt.RESIZE);
            }
        }, {
            key: "scaleX",
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "get_scaleX", this).call(this) != t && ((0, 
                e.default)((0, r.default)(h.prototype), "set_scaleX", this).call(this, t), this.event(Jt.RESIZE));
            },
            get: function() {
                return (0, e.default)((0, r.default)(h.prototype), "scaleX", this);
            }
        }, {
            key: "scaleY",
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "get_scaleY", this).call(this) != t && ((0, 
                e.default)((0, r.default)(h.prototype), "set_scaleY", this).call(this, t), this.event(Jt.RESIZE));
            },
            get: function() {
                return (0, e.default)((0, r.default)(h.prototype), "scaleY", this);
            }
        }, {
            key: "width",
            get: function() {
                if (this._width) return this._width;
                for (var t = 0, e = this.numChildren - 1; e > -1; e--) {
                    var i = this.getChildAt(e);
                    i._visible && (t = Math.max(i._x + i.width * i.scaleX, t));
                }
                return t;
            },
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "get_width", this).call(this) != t && ((0, 
                e.default)((0, r.default)(h.prototype), "set_width", this).call(this, t), this.callLater(this._sizeChanged));
            }
        }, {
            key: "height",
            get: function() {
                if (this._height) return this._height;
                for (var t = 0, e = this.numChildren - 1; e > -1; e--) {
                    var i = this.getChildAt(e);
                    i._visible && (t = Math.max(i._y + i.height * i.scaleY, t));
                }
                return t;
            },
            set: function(t) {
                (0, e.default)((0, r.default)(h.prototype), "get_height", this).call(this) != t && ((0, 
                e.default)((0, r.default)(h.prototype), "set_height", this).call(this, t), this.callLater(this._sizeChanged));
            }
        }, {
            key: "timer",
            get: function() {
                return this._timer || u.timer;
            },
            set: function(t) {
                this._timer = t;
            }
        } ], [ {
            key: "setUIMap",
            value: function(t) {
                var e = u.loader.getRes(t);
                if (!e) throw "请提前加载uimap的json，再使用该接口设置！";
                for (var i in e) u.Loader.loadedMap[O.formatURL(i + ".scene")] = e[i];
            }
        }, {
            key: "load",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                u.loader.resetProgress();
                var n = new Zi();
                function r(t) {
                    h._loadPage && h._loadPage.event("progress", t), i && i.runWith(t);
                }
                n.on(Jt.PROGRESS, null, r), n.once(Jt.COMPLETE, null, function() {
                    n.off(Jt.PROGRESS, null, r);
                    var i = u.Loader.getRes(t);
                    if (!i) throw "Can not find scene:" + t;
                    if (!i.props) throw "Scene data is error:" + t;
                    var a = i.props.runtime ? i.props.runtime : i.type, s = u.ClassUtils.getClass(a);
                    if ("instance" == i.props.renderType) var o = s.instance || (s.instance = new s()); else o = new s();
                    if (!(o && o instanceof De)) throw "Can not find scene:" + a;
                    o.url = t, o._viewCreated ? e && e.runWith(o) : (o.on("onViewCreated", null, function() {
                        e && e.runWith(o);
                    }), o.createView(i)), h.hideLoadingPage();
                }), n.load(t);
            }
        }, {
            key: "open",
            value: function(t) {
                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                if (i instanceof D) {
                    var a = n;
                    n = i, i = a;
                }
                h.showLoadingPage(), h.load(t, D.create(null, this._onSceneLoaded, [ e, n, i ]), r);
            }
        }, {
            key: "_onSceneLoaded",
            value: function(t, e, i, n) {
                n.open(t, i), e && e.runWith(n);
            }
        }, {
            key: "close",
            value: function(t) {
                for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i = !1, n = h.unDestroyedScenes, r = 0, a = n.length; r < a; r++) {
                    var s = n[r];
                    s && s.parent && s.url === t && s.name == e && (s.close(), i = !0);
                }
                return i;
            }
        }, {
            key: "closeAll",
            value: function() {
                for (var t = h.root, e = 0, i = t.numChildren; e < i; e++) {
                    var n = t.getChildAt(0);
                    n instanceof h ? n.close() : n.removeSelf();
                }
            }
        }, {
            key: "destroy",
            value: function(t) {
                for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i = !1, n = [].concat(h.unDestroyedScenes), r = 0, a = n.length; r < a; r++) {
                    var s = n[r];
                    s.url !== t || s.name != e || s.destroyed || (s.destroy(), i = !0);
                }
                return i;
            }
        }, {
            key: "gc",
            value: function() {
                N.destroyUnusedResources();
            }
        }, {
            key: "setLoadingPage",
            value: function(t) {
                h._loadPage != t && (h._loadPage = t);
            }
        }, {
            key: "showLoadingPage",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 500;
                h._loadPage && (u.systemTimer.clear(null, h._showLoading), u.systemTimer.clear(null, h._hideLoading), 
                u.systemTimer.once(e, null, h._showLoading, [ t ], !1));
            }
        }, {
            key: "_showLoading",
            value: function(t) {
                u.stage.addChild(h._loadPage), h._loadPage.onOpened(t);
            }
        }, {
            key: "_hideLoading",
            value: function() {
                h._loadPage.close();
            }
        }, {
            key: "hideLoadingPage",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 500;
                h._loadPage && (u.systemTimer.clear(null, h._showLoading), u.systemTimer.clear(null, h._hideLoading), 
                u.systemTimer.once(t, null, h._hideLoading));
            }
        }, {
            key: "root",
            get: function() {
                return h._root || (h._root = u.stage.addChild(new Be()), h._root.name = "root", 
                u.stage.on("resize", null, function() {
                    h._root.size(u.stage.width, u.stage.height), h._root.event(Jt.RESIZE);
                }), h._root.size(u.stage.width, u.stage.height), h._root.event(Jt.RESIZE)), h._root;
            }
        } ]), h;
    }(Be);
    Qi.unDestroyedScenes = [], u.regClass(Qi), Me.regClass("laya.display.Scene", Qi), 
    Me.regClass("Laya.Scene", Qi);
    var $i = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "recover",
            value: function() {
                this._templ = null, c.recover("DrawParticleCmd", this);
            }
        }, {
            key: "run",
            value: function(t, e, i) {
                t.drawParticle(e, i, this._templ);
            }
        }, {
            key: "cmdID",
            get: function() {
                return t.ID;
            }
        } ], [ {
            key: "create",
            value: function(e) {
                var i = c.getItemByClass("DrawParticleCmd", t);
                return i._templ = e, i;
            }
        } ]), t;
    }();
    $i.ID = "DrawParticleCmd";
    var Ji = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "paramChanged",
            value: function() {
                Di.systemTimer.callLater(this, this.buildFilter);
            }
        }, {
            key: "buildFilter",
            value: function() {
                this._target && this.addFilter(this._target);
            }
        }, {
            key: "addFilter",
            value: function(t) {
                var e;
                t && (t.filters ? (e = t.filters).indexOf(this._filter) < 0 && (e.push(this._filter), 
                t.filters = st.copyArray([], e)) : t.filters = [ this._filter ]);
            }
        }, {
            key: "removeFilter",
            value: function(t) {
                t && (t.filters = null);
            }
        }, {
            key: "target",
            set: function(t) {
                this._target != t && (this._target = t, this.paramChanged());
            }
        } ]), t;
    }(), tn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "render",
            value: function(t, e, i, n, r) {
                var a = it.create(Q.TEXTURE2D, 0);
                this.setShaderInfo(a, r, t.width, t.height), e.drawTarget(t, 0, 0, i, n, k.EMPTY.identity(), a);
            }
        }, {
            key: "setShaderInfo",
            value: function(e, i, n, r) {
                e.defines.add(at.BLUR);
                var a = e;
                t.blurinfo[0] = n, t.blurinfo[1] = r, a.blurInfo = t.blurinfo;
                var s = i.strength / 3, o = s * s;
                i.strength_sig2_2sig2_gauss1[0] = i.strength, i.strength_sig2_2sig2_gauss1[1] = o, 
                i.strength_sig2_2sig2_gauss1[2] = 2 * o, i.strength_sig2_2sig2_gauss1[3] = 1 / (2 * Math.PI * o), 
                a.strength_sig2_2sig2_gauss1 = i.strength_sig2_2sig2_gauss1;
            }
        } ]), t;
    }();
    tn.blurinfo = new Array(2);
    var en = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 4;
            return (0, o.default)(this, i), (t = e.call(this)).strength_sig2_2sig2_gauss1 = [], 
            t.strength = n, t._glRender = new tn(), t;
        }
        return (0, s.default)(i, [ {
            key: "getStrenth_sig2_2sig2_native",
            value: function() {
                this.strength_sig2_native || (this.strength_sig2_native = new Float32Array(4));
                var t = this.strength / 3, e = t * t;
                return this.strength_sig2_native[0] = this.strength, this.strength_sig2_native[1] = e, 
                this.strength_sig2_native[2] = 2 * e, this.strength_sig2_native[3] = 1 / (2 * Math.PI * e), 
                this.strength_sig2_native;
            }
        }, {
            key: "type",
            get: function() {
                return at.BLUR;
            }
        } ]), i;
    }(at), nn = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this))._strength = 4, t._filter = new en(t.strength), 
            t;
        }
        return (0, s.default)(n, [ {
            key: "buildFilter",
            value: function() {
                this._filter = new en(this.strength), (0, e.default)((0, r.default)(n.prototype), "buildFilter", this).call(this);
            }
        }, {
            key: "strength",
            get: function() {
                return this._strength;
            },
            set: function(t) {
                this._strength = t;
            }
        } ]), n;
    }(Ji);
    Me.regClass("laya.effect.BlurFilterSetter", nn), Me.regClass("Laya.BlurFilterSetter", nn);
    var rn = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this))._brightness = 0, t._contrast = 0, 
            t._saturation = 0, t._hue = 0, t._red = 0, t._green = 0, t._blue = 0, t._alpha = 0, 
            t._filter = new lt(), t;
        }
        return (0, s.default)(n, [ {
            key: "buildFilter",
            value: function() {
                this._filter.reset(), this._filter.color(this.red, this.green, this.blue, this.alpha), 
                this._filter.adjustHue(this.hue), this._filter.adjustContrast(this.contrast), this._filter.adjustBrightness(this.brightness), 
                this._filter.adjustSaturation(this.saturation), (0, e.default)((0, r.default)(n.prototype), "buildFilter", this).call(this);
            }
        }, {
            key: "brightness",
            get: function() {
                return this._brightness;
            },
            set: function(t) {
                this._brightness = t, this.paramChanged();
            }
        }, {
            key: "contrast",
            get: function() {
                return this._contrast;
            },
            set: function(t) {
                this._contrast = t, this.paramChanged();
            }
        }, {
            key: "saturation",
            get: function() {
                return this._saturation;
            },
            set: function(t) {
                this._saturation = t, this.paramChanged();
            }
        }, {
            key: "hue",
            get: function() {
                return this._hue;
            },
            set: function(t) {
                this._hue = t, this.paramChanged();
            }
        }, {
            key: "red",
            get: function() {
                return this._red;
            },
            set: function(t) {
                this._red = t, this.paramChanged();
            }
        }, {
            key: "green",
            get: function() {
                return this._green;
            },
            set: function(t) {
                this._green = t, this.paramChanged();
            }
        }, {
            key: "blue",
            get: function() {
                return this._blue;
            },
            set: function(t) {
                this._blue = t, this.paramChanged();
            }
        }, {
            key: "color",
            get: function() {
                return this._color;
            },
            set: function(t) {
                var e;
                this._color = t, e = ot.create(t), this._red = 255 * e.arrColor[0], this._green = 255 * e.arrColor[1], 
                this._blue = 255 * e.arrColor[2], this.paramChanged();
            }
        }, {
            key: "alpha",
            get: function() {
                return this._alpha;
            },
            set: function(t) {
                this._alpha = t, this.paramChanged();
            }
        } ]), n;
    }(Ji);
    Me.regClass("laya.effect.ColorFilterSetter", rn), Me.regClass("Laya.ColorFilterSetter", rn);
    var an = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments)).duration = 1e3, t.delay = 0, 
            t.repeat = 0, t.autoDestroyAtComplete = !0, t;
        }
        return (0, s.default)(i, [ {
            key: "_onAwake",
            value: function() {
                this.target = this.target || this.owner, this.autoDestroyAtComplete && (this._comlete = D.create(this.target, this.target.destroy, null, !1)), 
                this.eventName ? this.owner.on(this.eventName, this, this._exeTween) : this._exeTween();
            }
        }, {
            key: "_exeTween",
            value: function() {
                this._tween = this._doTween(), this._tween.repeat = this.repeat;
            }
        }, {
            key: "_doTween",
            value: function() {
                return null;
            }
        }, {
            key: "onReset",
            value: function() {
                this.duration = 1e3, this.delay = 0, this.repeat = 0, this.ease = null, this.target = null, 
                this.eventName && (this.owner.off(this.eventName, this, this._exeTween), this.eventName = null), 
                this._comlete && (this._comlete.recover(), this._comlete = null), this._tween && (this._tween.clear(), 
                this._tween = null);
            }
        } ]), i;
    }(_i), sn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "setShaderInfo",
            value: function(t, e, i, n) {
                t.defines.add(n.type);
                var r = t;
                r.u_blurInfo1 = n._sv_blurInfo1;
                var a = n._sv_blurInfo2;
                a[0] = e, a[1] = i, r.u_blurInfo2 = a, r.u_color = n.getColor();
            }
        }, {
            key: "render",
            value: function(t, e, i, n, r) {
                var a = i, s = n, o = it.create(Q.TEXTURE2D, 0);
                this.setShaderInfo(o, a, s, r);
                var l = it.create(Q.TEXTURE2D, 0), h = k.TEMP.identity();
                e.drawTarget(t, 0, 0, a, s, h, o), e.drawTarget(t, 0, 0, a, s, h, l);
            }
        } ]), t;
    }(), on = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i(t) {
            var n, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 6, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 6;
            return (0, o.default)(this, i), (n = e.call(this))._elements = new Float32Array(9), 
            n._sv_blurInfo1 = new Array(4), n._sv_blurInfo2 = [ 0, 0, 1, 0 ], n._color = new ot(t), 
            n.blur = Math.min(r, 20), n.offX = a, n.offY = s, n._sv_blurInfo1[0] = n._sv_blurInfo1[1] = n.blur, 
            n._sv_blurInfo1[2] = a, n._sv_blurInfo1[3] = -s, n._glRender = new sn(), n;
        }
        return (0, s.default)(i, [ {
            key: "getColor",
            value: function() {
                return this._color.arrColor;
            }
        }, {
            key: "getColorNative",
            value: function() {
                this._color_native || (this._color_native = new Float32Array(4));
                var t = this.getColor();
                return this._color_native[0] = t[0], this._color_native[1] = t[1], this._color_native[2] = t[2], 
                this._color_native[3] = t[3], this._color_native;
            }
        }, {
            key: "getBlurInfo1Native",
            value: function() {
                return this._blurInof1_native || (this._blurInof1_native = new Float32Array(4)), 
                this._blurInof1_native[0] = this._blurInof1_native[1] = this.blur, this._blurInof1_native[2] = this.offX, 
                this._blurInof1_native[3] = this.offY, this._blurInof1_native;
            }
        }, {
            key: "getBlurInfo2Native",
            value: function() {
                return this._blurInof2_native || (this._blurInof2_native = new Float32Array(4)), 
                this._blurInof2_native[2] = 1, this._blurInof2_native;
            }
        }, {
            key: "type",
            get: function() {
                return en.GLOW;
            }
        }, {
            key: "offY",
            get: function() {
                return this._elements[6];
            },
            set: function(t) {
                this._elements[6] = t, this._sv_blurInfo1[3] = -t;
            }
        }, {
            key: "offX",
            get: function() {
                return this._elements[5];
            },
            set: function(t) {
                this._elements[5] = t, this._sv_blurInfo1[2] = t;
            }
        }, {
            key: "blur",
            get: function() {
                return this._elements[4];
            },
            set: function(t) {
                this._elements[4] = t, this._sv_blurInfo1[0] = this._sv_blurInfo1[1] = t;
            }
        } ]), i;
    }(at), ln = function(t) {
        (0, a.default)(n, t);
        var i = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = i.call(this))._color = "#ff0000", t._blur = 4, 
            t._offX = 6, t._offY = 6, t._filter = new on(t._color), t;
        }
        return (0, s.default)(n, [ {
            key: "buildFilter",
            value: function() {
                this._filter = new on(this.color, this.blur, this.offX, this.offY), (0, e.default)((0, 
                r.default)(n.prototype), "buildFilter", this).call(this);
            }
        }, {
            key: "color",
            get: function() {
                return this._color;
            },
            set: function(t) {
                this._color = t, this.paramChanged();
            }
        }, {
            key: "blur",
            get: function() {
                return this._blur;
            },
            set: function(t) {
                this._blur = t, this.paramChanged();
            }
        }, {
            key: "offX",
            get: function() {
                return this._offX;
            },
            set: function(t) {
                this._offX = t, this.paramChanged();
            }
        }, {
            key: "offY",
            get: function() {
                return this._offY;
            },
            set: function(t) {
                this._offY = t, this.paramChanged();
            }
        } ]), n;
    }(Ji);
    Me.regClass("laya.effect.GlowFilterSetter", ln), Me.regClass("Laya.GlowFilterSetter", ln);
    var hn = function t() {
        (0, o.default)(this, t);
    };
    hn.STANDARD = 0, hn.LEFT = 1, hn.RIGHT = 2, hn.NUM_PAD = 3;
    var un = function t() {
        (0, o.default)(this, t);
    };
    un.NUMBER_0 = 48, un.NUMBER_1 = 49, un.NUMBER_2 = 50, un.NUMBER_3 = 51, un.NUMBER_4 = 52, 
    un.NUMBER_5 = 53, un.NUMBER_6 = 54, un.NUMBER_7 = 55, un.NUMBER_8 = 56, un.NUMBER_9 = 57, 
    un.A = 65, un.B = 66, un.C = 67, un.D = 68, un.E = 69, un.F = 70, un.G = 71, un.H = 72, 
    un.I = 73, un.J = 74, un.K = 75, un.L = 76, un.M = 77, un.N = 78, un.O = 79, un.P = 80, 
    un.Q = 81, un.R = 82, un.S = 83, un.T = 84, un.U = 85, un.V = 86, un.W = 87, un.X = 88, 
    un.Y = 89, un.Z = 90, un.F1 = 112, un.F2 = 113, un.F3 = 114, un.F4 = 115, un.F5 = 116, 
    un.F6 = 117, un.F7 = 118, un.F8 = 119, un.F9 = 120, un.F10 = 121, un.F11 = 122, 
    un.F12 = 123, un.F13 = 124, un.F14 = 125, un.F15 = 126, un.NUMPAD = 21, un.NUMPAD_0 = 96, 
    un.NUMPAD_1 = 97, un.NUMPAD_2 = 98, un.NUMPAD_3 = 99, un.NUMPAD_4 = 100, un.NUMPAD_5 = 101, 
    un.NUMPAD_6 = 102, un.NUMPAD_7 = 103, un.NUMPAD_8 = 104, un.NUMPAD_9 = 105, un.NUMPAD_ADD = 107, 
    un.NUMPAD_DECIMAL = 110, un.NUMPAD_DIVIDE = 111, un.NUMPAD_ENTER = 108, un.NUMPAD_MULTIPLY = 106, 
    un.NUMPAD_SUBTRACT = 109, un.SEMICOLON = 186, un.EQUAL = 187, un.COMMA = 188, un.MINUS = 189, 
    un.PERIOD = 190, un.SLASH = 191, un.BACKQUOTE = 192, un.LEFTBRACKET = 219, un.BACKSLASH = 220, 
    un.RIGHTBRACKET = 221, un.QUOTE = 222, un.ALTERNATE = 18, un.BACKSPACE = 8, un.CAPS_LOCK = 20, 
    un.COMMAND = 15, un.CONTROL = 17, un.DELETE = 46, un.ENTER = 13, un.ESCAPE = 27, 
    un.PAGE_UP = 33, un.PAGE_DOWN = 34, un.END = 35, un.HOME = 36, un.LEFT = 37, un.UP = 38, 
    un.RIGHT = 39, un.DOWN = 40, un.SHIFT = 16, un.SPACE = 32, un.TAB = 9, un.INSERT = 45;
    var cn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "render",
            value: function(e, i, n) {
                t._addType(this._renderType), t.showRenderTypeInfo(this._renderType), be.renders[this._renderType]._fun(this, e, i + this._x, n + this._y), 
                this._repaint = 0;
            }
        }, {
            key: "_stageRender",
            value: function(e, i, n) {
                t._countStart(), t._PreStageRender.call(u.stage, e, i, n), t._countEnd();
            }
        } ], [ {
            key: "getMCDName",
            value: function(e) {
                return t._typeToNameDic[e];
            }
        }, {
            key: "showRenderTypeInfo",
            value: function(e) {
                var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (i || !t.showedDic[e]) {
                    if (t.showedDic[e] = !0, !t._rendertypeToStrDic[e]) {
                        var n, r = [];
                        for (n = 1; n <= e; ) n & e && r.push(t.getMCDName(n & e)), n <<= 1;
                        t._rendertypeToStrDic[e] = r.join(",");
                    }
                    console.log("cmd:", t._rendertypeToStrDic[e]);
                }
            }
        }, {
            key: "__init__",
            value: function() {
                t._typeToNameDic[ge.ALPHA] = "ALPHA", t._typeToNameDic[ge.TRANSFORM] = "TRANSFORM", 
                t._typeToNameDic[ge.TEXTURE] = "TEXTURE", t._typeToNameDic[ge.GRAPHICS] = "GRAPHICS", 
                t._typeToNameDic[ge.ONECHILD] = "ONECHILD", t._typeToNameDic[ge.CHILDS] = "CHILDS", 
                t._typeToNameDic[ge.TRANSFORM | ge.ALPHA] = "TRANSFORM|ALPHA", t._typeToNameDic[ge.CANVAS] = "CANVAS", 
                t._typeToNameDic[ge.BLEND] = "BLEND", t._typeToNameDic[ge.FILTERS] = "FILTERS", 
                t._typeToNameDic[ge.MASK] = "MASK", t._typeToNameDic[ge.CLIP] = "CLIP", t._typeToNameDic[ge.LAYAGL3D] = "LAYAGL3D";
            }
        }, {
            key: "_countStart",
            value: function() {
                var e;
                for (e in t._countDic) t._countDic[e] = 0;
            }
        }, {
            key: "_countEnd",
            value: function() {
                t._i++, t._i > 60 && (t.showCountInfo(), t._i = 0);
            }
        }, {
            key: "_addType",
            value: function(e) {
                t._countDic[e] ? t._countDic[e] += 1 : t._countDic[e] = 1;
            }
        }, {
            key: "showCountInfo",
            value: function() {
                var e;
                for (e in console.log("==================="), t._countDic) console.log("count:" + t._countDic[e]), 
                t.showRenderTypeInfo(e, !0);
            }
        }, {
            key: "enableQuickTest",
            value: function() {
                t.__init__(), Be.prototype.render = t.prototype.render, t._PreStageRender = He.prototype.render, 
                He.prototype.render = t.prototype._stageRender;
            }
        } ]), t;
    }();
    cn.showedDic = {}, cn._rendertypeToStrDic = {}, cn._typeToNameDic = {}, cn._countDic = {}, 
    cn._i = 0;
    var _n = function(t) {
        (0, a.default)(n, t);
        var e = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = e.call(this)).visible = !1, t.on(Jt.ADDED, (0, 
            i.default)(t), t._onParentChange), t.on(Jt.REMOVED, (0, i.default)(t), t._onParentChange), 
            t;
        }
        return (0, s.default)(n, [ {
            key: "_onParentChange",
            value: function() {
                this.target = this.parent;
            }
        }, {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                isNaN(t) && (t = 1), this.url && (this.stop(), this._channel = $e.playSound(this.url, t, e));
            }
        }, {
            key: "stop",
            value: function() {
                this._channel && !this._channel.isStopped && this._channel.stop(), this._channel = null;
            }
        }, {
            key: "_setPlayAction",
            value: function(t, e, i) {
                var n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
                this[i] && t && (n ? t.on(e, this, this[i]) : t.off(e, this, this[i]));
            }
        }, {
            key: "_setPlayActions",
            value: function(t, e, i) {
                var n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
                if (t && e) {
                    var r, a, s = e.split(",");
                    for (a = s.length, r = 0; r < a; r++) this._setPlayAction(t, s[r], i, n);
                }
            }
        }, {
            key: "playEvent",
            set: function(t) {
                this._playEvents = t, t && this._tar && this._setPlayActions(this._tar, t, "play");
            }
        }, {
            key: "target",
            set: function(t) {
                this._tar && (this._setPlayActions(this._tar, this._playEvents, "play", !1), this._setPlayActions(this._tar, this._stopEvents, "stop", !1)), 
                this._tar = t, this._tar && (this._setPlayActions(this._tar, this._playEvents, "play", !0), 
                this._setPlayActions(this._tar, this._stopEvents, "stop", !0));
            }
        }, {
            key: "stopEvent",
            set: function(t) {
                this._stopEvents = t, t && this._tar && this._setPlayActions(this._tar, t, "stop");
            }
        } ]), n;
    }(Be);
    Me.regClass("laya.media.SoundNode", _n), Me.regClass("Laya.SoundNode", _n);
    var dn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "enable",
            value: function(e, i) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 2;
                t.type = n, u.loader.load(e, D.create(null, t.onManifestLoaded, [ i ]), null, ii.JSON);
            }
        }, {
            key: "onManifestLoaded",
            value: function(e, i) {
                t.manifest = i, O.customFormat = t.addVersionPrefix, e.run(), i || console.warn("资源版本清单文件不存在，不使用资源版本管理。忽略ERR_FILE_NOT_FOUND错误。");
            }
        }, {
            key: "addVersionPrefix",
            value: function(e) {
                return t.manifest && t.manifest[e] ? t.type == t.FILENAME_VERSION ? t.manifest[e] : t.manifest[e] + "/" + e : e;
            }
        } ]), t;
    }();
    dn.FOLDER_VERSION = 1, dn.FILENAME_VERSION = 2, dn.type = dn.FOLDER_VERSION;
    var fn = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
            return (0, o.default)(this, i), (t = e.call(this)).disableInput = !1, t.protocols = [], 
            t._byteClass = a || W, t.protocols = s, t.endian = i.BIG_ENDIAN, n && r > 0 && r < 65535 && t.connect(n, r), 
            t;
        }
        return (0, s.default)(i, [ {
            key: "connect",
            value: function(t, e) {
                var i = "ws://" + t + ":" + e;
                this.connectByUrl(i);
            }
        }, {
            key: "connectByUrl",
            value: function(t) {
                var e = this;
                null != this._socket && this.close(), this._socket && this.cleanSocket(), this.protocols && 0 != this.protocols.length ? this._socket = new ae.window.WebSocket(t, this.protocols) : this._socket = new ae.window.WebSocket(t), 
                this._socket.binaryType = "arraybuffer", this._output = new this._byteClass(), this._output.endian = this.endian, 
                this._input = new this._byteClass(), this._input.endian = this.endian, this._addInputPosition = 0, 
                this._socket.onopen = function(t) {
                    e._onOpen(t);
                }, this._socket.onmessage = function(t) {
                    e._onMessage(t);
                }, this._socket.onclose = function(t) {
                    e._onClose(t);
                }, this._socket.onerror = function(t) {
                    e._onError(t);
                };
            }
        }, {
            key: "cleanSocket",
            value: function() {
                this.close(), this._connected = !1, this._socket.onopen = null, this._socket.onmessage = null, 
                this._socket.onclose = null, this._socket.onerror = null, this._socket = null;
            }
        }, {
            key: "close",
            value: function() {
                if (null != this._socket) try {
                    this._socket.close();
                } catch (t) {}
            }
        }, {
            key: "_onOpen",
            value: function(t) {
                this._connected = !0, this.event(Jt.OPEN, t);
            }
        }, {
            key: "_onMessage",
            value: function(t) {
                if (t && t.data) {
                    var e = t.data;
                    if (this.disableInput && e) this.event(Jt.MESSAGE, e); else {
                        this._input.length > 0 && this._input.bytesAvailable < 1 && (this._input.clear(), 
                        this._addInputPosition = 0);
                        var i = this._input.pos;
                        !this._addInputPosition && (this._addInputPosition = 0), this._input.pos = this._addInputPosition, 
                        e && ("string" == typeof e ? this._input.writeUTFBytes(e) : this._input.writeArrayBuffer(e), 
                        this._addInputPosition = this._input.pos, this._input.pos = i), this.event(Jt.MESSAGE, e);
                    }
                }
            }
        }, {
            key: "_onClose",
            value: function(t) {
                this._connected = !1, this.event(Jt.CLOSE, t);
            }
        }, {
            key: "_onError",
            value: function(t) {
                this.event(Jt.ERROR, t);
            }
        }, {
            key: "send",
            value: function(t) {
                this._socket.send(t);
            }
        }, {
            key: "flush",
            value: function() {
                if (this._output && this._output.length > 0) {
                    var t;
                    try {
                        this._socket && this._socket.send(this._output.__getBuffer().slice(0, this._output.length));
                    } catch (e) {
                        e = VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL.handleException(e);
                        t = e;
                    }
                    this._output.endian = this.endian, this._output.clear(), t && this.event(Jt.ERROR, t);
                }
            }
        }, {
            key: "input",
            get: function() {
                return this._input;
            }
        }, {
            key: "output",
            get: function() {
                return this._output;
            }
        }, {
            key: "connected",
            get: function() {
                return this._connected;
            }
        }, {
            key: "endian",
            get: function() {
                return this._endian;
            },
            set: function(t) {
                this._endian = t, null != this._input && (this._input.endian = t), null != this._output && (this._output.endian = t);
            }
        } ]), i;
    }(B);
    fn.LITTLE_ENDIAN = "littleEndian", fn.BIG_ENDIAN = "bigEndian", (Ni = t.TextureDecodeFormat || (t.TextureDecodeFormat = {}))[Ni.Normal = 0] = "Normal", 
    Ni[Ni.RGBM = 1] = "RGBM";
    var vn = function(n) {
        (0, a.default)(u, n);
        var h = l(u);
        function u() {
            var e;
            (0, o.default)(this, u);
            var n = A.instance;
            return (e = h.call(this, n.RGB, !1))._glTextureType = n.TEXTURE_2D, e._width = 1, 
            e._height = 1, e._wrapModeU = e._wrapModeV = t.WarpMode.Clamp, e._filterMode = t.FilterMode.Bilinear, 
            e._setWarpMode(n.TEXTURE_WRAP_S, e._wrapModeU), e._setWarpMode(n.TEXTURE_WRAP_T, e._wrapModeV), 
            e._setFilterMode(e._filterMode), e._needUpdate = !1, e._readyed = !0, u._videoTexturePool.push((0, 
            i.default)(e)), e;
        }
        return (0, s.default)(u, [ {
            key: "_updateVideoData",
            value: function() {
                if (this._video && this._needUpdate) {
                    var t = A.instance;
                    L.bindTexture(t, this._glTextureType, this._glTexture), t.texImage2D(this._glTextureType, 0, t.RGB, t.RGB, t.UNSIGNED_BYTE, this._video);
                }
            }
        }, {
            key: "videoPlay",
            value: function() {
                this._video.play(), this._needUpdate = !0;
            }
        }, {
            key: "videoPause",
            value: function() {
                this._video.pause(), this._needUpdate = !1;
            }
        }, {
            key: "destroy",
            value: function() {
                (0, e.default)((0, r.default)(u.prototype), "destroy", this).call(this), this._video = null;
            }
        }, {
            key: "video",
            get: function() {
                return this._video;
            },
            set: function(t) {
                t && t instanceof HTMLVideoElement && (this._video = t, Di.Browser.onMobile && (this._video["x5-playsInline"] = !0, 
                this._video["x5-playsinline"] = !0, this._video.x5PlaysInline = !0, this._video.playsInline = !0, 
                this._video["webkit-playsInline"] = !0, this._video["webkit-playsinline"] = !0, 
                this._video.webkitPlaysInline = !0, this._video.playsinline = !0, this._video.style.playsInline = !0, 
                this._video.crossOrigin = "anonymous", this._video.setAttribute("crossorigin", "anonymous"), 
                this._video.setAttribute("playsinline", "true"), this._video.setAttribute("x5-playsinline", "true"), 
                this._video.setAttribute("webkit-playsinline", "true"), this._video.autoplay = !0));
            }
        } ], [ {
            key: "_update",
            value: function() {
                for (var t = u._videoTexturePool, e = 0, i = t.length; e < i; e++) {
                    var n = t[e];
                    n && n._updateVideoData();
                }
            }
        } ]), u;
    }(G);
    vn._videoTexturePool = new Array();
    var pn = function() {
        function t() {
            (0, o.default)(this, t), this.reset();
        }
        return (0, s.default)(t, [ {
            key: "setData",
            value: function(e, i, n, r) {
                return this.char = e, this.charNum = e.charCodeAt(0), this.x = this.y = 0, this.width = i, 
                this.height = n, this.style = r, this.isWord = !t._isWordRegExp.test(e), this;
            }
        }, {
            key: "reset",
            value: function() {
                return this.x = this.y = this.width = this.height = 0, this.isWord = !1, this.char = null, 
                this.charNum = 0, this.style = null, this;
            }
        }, {
            key: "recover",
            value: function() {
                c.recover("HTMLChar", this.reset());
            }
        }, {
            key: "_isChar",
            value: function() {
                return !0;
            }
        }, {
            key: "_getCSSStyle",
            value: function() {
                return this.style;
            }
        } ], [ {
            key: "create",
            value: function() {
                return c.getItemByClass("HTMLChar", t);
            }
        } ]), t;
    }();
    pn._isWordRegExp = new RegExp("[\\w.]", "");
    var yn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "enable",
            value: function() {
                t._logdiv || (t._logdiv = ae.createElement("div"), t._logdiv.style.cssText = "border:white;padding:4px;overflow-y:auto;z-index:1000000;background:rgba(100,100,100,0.6);color:white;position: absolute;left:0px;top:0px;width:50%;height:50%;", 
                ae.document.body.appendChild(t._logdiv), t._btn = ae.createElement("button"), t._btn.innerText = "Hide", 
                t._btn.style.cssText = "z-index:1000001;position: absolute;left:10px;top:10px;", 
                t._btn.onclick = t.toggle, ae.document.body.appendChild(t._btn));
            }
        }, {
            key: "toggle",
            value: function() {
                var e = t._logdiv.style;
                "" === e.display ? (t._btn.innerText = "Show", e.display = "none") : (t._btn.innerText = "Hide", 
                e.display = "");
            }
        }, {
            key: "print",
            value: function(e) {
                t._logdiv && (t._count >= t.maxCount && t.clear(), t._count++, t._logdiv.innerText += e + "\n", 
                t.autoScrollToBottom && t._logdiv.scrollHeight - t._logdiv.scrollTop - t._logdiv.clientHeight < 50 && (t._logdiv.scrollTop = t._logdiv.scrollHeight));
            }
        }, {
            key: "clear",
            value: function() {
                t._logdiv.innerText = "", t._count = 0;
            }
        } ]), t;
    }();
    yn._count = 0, yn.maxCount = 50, yn.autoScrollToBottom = !0;
    var gn = function() {
        function t(e, i, n, r) {
            (0, o.default)(this, t), this.scale = 1, this.datas = new Array(300), this.datapos = 0, 
            this.id = e, this.color = i, this.name = n, this.scale = r;
        }
        return (0, s.default)(t, [ {
            key: "addData",
            value: function(t) {
                this.datas[this.datapos] = t, this.datapos++, this.datapos %= 300;
            }
        } ]), t;
    }(), mn = function(t) {
        (0, a.default)(n, t);
        var e = l(n);
        function n() {
            var t;
            return (0, o.default)(this, n), (t = e.call(this)).datas = [], t.xdata = new Array(n.DATANUM), 
            t.ydata = new Array(n.DATANUM), t.hud_width = 800, t.hud_height = 200, t.gMinV = 0, 
            t.gMaxV = 100, t.textSpace = 40, t.sttm = 0, n.inst = (0, i.default)(t), t._renderType |= ge.CUSTOM, 
            t._setRenderType(t._renderType), t._setCustomRender(), t.addDataDef(0, 16777215, "frame", 1), 
            t.addDataDef(1, 65280, "update", 1), t.addDataDef(2, 16711680, "flush", 1), n._now = performance ? performance.now.bind(performance) : Date.now, 
            t;
        }
        return (0, s.default)(n, [ {
            key: "now",
            value: function() {
                return n._now();
            }
        }, {
            key: "start",
            value: function() {
                this.sttm = n._now();
            }
        }, {
            key: "end",
            value: function(t) {
                var e = n._now() - this.sttm;
                this.updateValue(t, e);
            }
        }, {
            key: "config",
            value: function(t, e) {
                this.hud_width = t, this.hud_height = e;
            }
        }, {
            key: "addDataDef",
            value: function(t, e, i, n) {
                this.datas[t] = new gn(t, e, i, n);
            }
        }, {
            key: "updateValue",
            value: function(t, e) {
                this.datas[t].addData(e);
            }
        }, {
            key: "v2y",
            value: function(t) {
                return this._y, this.hud_height, this.gMinV, this.gMaxV, this._y + this.hud_height * (1 - (t - this.gMinV) / this.gMaxV);
            }
        }, {
            key: "drawHLine",
            value: function(t, e, i, n) {
                var r = this._x, a = (this._x, this.hud_width, this.v2y(e));
                t.fillText(n, r, a - 6, null, "green", null), r += this.textSpace, t.fillStyle = i, 
                t.fillRect(r, a, this._x + this.hud_width, 1, null);
            }
        }, {
            key: "customRender",
            value: function(t, e, i) {
                var r = performance.now();
                n._lastTm <= 0 && (n._lastTm = r), this.updateValue(0, r - n._lastTm), n._lastTm = r, 
                t.save(), t.fillRect(this._x, this._y, this.hud_width, this.hud_height + 4, "#000000cc"), 
                t.globalAlpha = .9, this.drawHLine(t, 0, "green", "    0"), this.drawHLine(t, 10, "green", "  10"), 
                this.drawHLine(t, 16.667, "red", " "), this.drawHLine(t, 20, "green", "50|20"), 
                this.drawHLine(t, 33.334, "yellow", ""), this.drawHLine(t, 16.667 * 3, "yellow", ""), 
                this.drawHLine(t, 66.668, "yellow", ""), this.drawHLine(t, 50, "green", "20|50"), 
                this.drawHLine(t, 100, "green", "10|100");
                for (var a = 0, s = this.datas.length; a < s; a++) {
                    var o = this.datas[a];
                    if (o) {
                        var l = o.datas.length, h = (this.hud_width - this.textSpace) / l, u = o.datapos, c = this._x + this.textSpace;
                        t.fillStyle = o.color;
                        for (var _ = l; u < _; u++) {
                            var d = this.v2y(o.datas[u] * o.scale);
                            t.fillRect(c, d, h, this.hud_height + this._y - d, null), c += h;
                        }
                        for (u = 0; u < o.datapos; u++) d = this.v2y(o.datas[u] * o.scale), t.fillRect(c, d, h, this.hud_height + this._y - d, null), 
                        c += h;
                    }
                }
                t.restore();
            }
        } ]), n;
    }(Be);
    mn._lastTm = 0, mn._now = null, mn.DATANUM = 300, mn.drawTexTm = 0;
    var Tn = function() {
        function t() {
            (0, o.default)(this, t), this.maxCount = 1e3;
        }
        return (0, s.default)(t, [ {
            key: "getCacheList",
            value: function() {
                return c.getPoolBySign(this.sign);
            }
        }, {
            key: "tryDispose",
            value: function(t) {
                var e;
                (e = c.getPoolBySign(this.sign)).length > this.maxCount && e.splice(this.maxCount, e.length - this.maxCount);
            }
        } ], [ {
            key: "addPoolCacheManager",
            value: function(e) {
                var i, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 100;
                (i = new t()).sign = e, i.maxCount = n, ke.regCacheByFunction(st.bind(i.tryDispose, i), st.bind(i.getCacheList, i));
            }
        } ]), t;
    }(), xn = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            var t;
            return (0, o.default)(this, i), (t = e.apply(this, arguments))._tweenDic = {}, t._tweenDataList = [], 
            t._currTime = 0, t._lastTime = 0, t._startTime = 0, t._index = 0, t._gidIndex = 0, 
            t._firstTweenDic = {}, t._startTimeSort = !1, t._endTimeSort = !1, t._loopKey = !1, 
            t.scale = 1, t._frameRate = 60, t._frameIndex = 0, t._total = 0, t;
        }
        return (0, s.default)(i, [ {
            key: "to",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                return this._create(t, e, i, n, r, !0);
            }
        }, {
            key: "from",
            value: function(t, e, i) {
                var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                return this._create(t, e, i, n, r, !1);
            }
        }, {
            key: "_create",
            value: function(t, e, i, n, r, a) {
                var s = c.getItemByClass("tweenData", kn);
                return s.isTo = a, s.type = 0, s.target = t, s.duration = i, s.data = e, s.startTime = this._startTime + r, 
                s.endTime = s.startTime + s.duration, s.ease = n, this._startTime = Math.max(s.endTime, this._startTime), 
                this._tweenDataList.push(s), this._startTimeSort = !0, this._endTimeSort = !0, this;
            }
        }, {
            key: "addLabel",
            value: function(t, e) {
                var i = c.getItemByClass("tweenData", kn);
                return i.type = 1, i.data = t, i.endTime = i.startTime = this._startTime + e, this._labelDic || (this._labelDic = {}), 
                this._labelDic[t] = i, this._tweenDataList.push(i), this;
            }
        }, {
            key: "removeLabel",
            value: function(t) {
                if (this._labelDic && this._labelDic[t]) {
                    var e = this._labelDic[t];
                    if (e) {
                        var i = this._tweenDataList.indexOf(e);
                        i > -1 && this._tweenDataList.splice(i, 1);
                    }
                    delete this._labelDic[t];
                }
            }
        }, {
            key: "gotoTime",
            value: function(t) {
                if (null != this._tweenDataList && 0 != this._tweenDataList.length) {
                    var e, i, n, r;
                    for (var a in this._firstTweenDic) if (i = this._firstTweenDic[a]) for (var s in i) s in i.diyTarget && (i.diyTarget[s] = i[s]);
                    for (a in this._tweenDic) (e = this._tweenDic[a]).clear(), delete this._tweenDic[a];
                    this._index = 0, this._gidIndex = 0, this._currTime = t, this._lastTime = ae.now(), 
                    null == this._endTweenDataList || this._endTimeSort ? (this._endTimeSort = !1, this._endTweenDataList = n = this._tweenDataList.concat(), 
                    n.sort(function(t, e) {
                        return t.endTime > e.endTime ? 1 : t.endTime < e.endTime ? -1 : 0;
                    })) : n = this._endTweenDataList;
                    for (var o = 0, l = n.length; o < l; o++) if (0 == (r = n[o]).type) {
                        if (!(t >= r.endTime)) break;
                        this._index = Math.max(this._index, o + 1);
                        var h = r.data;
                        if (r.isTo) for (var u in h) r.target[u] = h[u];
                    }
                    for (o = 0, l = this._tweenDataList.length; o < l; o++) 0 == (r = this._tweenDataList[o]).type && t >= r.startTime && t < r.endTime && (this._index = Math.max(this._index, o + 1), 
                    this._gidIndex++, (e = c.getItemByClass("tween", ui))._create(r.target, r.data, r.duration, r.ease, D.create(this, this._animComplete, [ this._gidIndex ]), 0, !1, r.isTo, !0, !1), 
                    e.setStartTime(this._currTime - (t - r.startTime)), e._updateEase(this._currTime), 
                    e.gid = this._gidIndex, this._tweenDic[this._gidIndex] = e);
                }
            }
        }, {
            key: "gotoLabel",
            value: function(t) {
                if (null != this._labelDic) {
                    var e = this._labelDic[t];
                    e && this.gotoTime(e.startTime);
                }
            }
        }, {
            key: "pause",
            value: function() {
                u.timer.clear(this, this._update);
            }
        }, {
            key: "resume",
            value: function() {
                this.play(this._currTime, this._loopKey);
            }
        }, {
            key: "play",
            value: function() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (this._tweenDataList) {
                    if (this._startTimeSort) {
                        this._startTimeSort = !1, this._tweenDataList.sort(function(t, e) {
                            return t.startTime > e.startTime ? 1 : t.startTime < e.startTime ? -1 : 0;
                        });
                        for (var i = 0, n = this._tweenDataList.length; i < n; i++) {
                            var r = this._tweenDataList[i];
                            if (null != r && 0 == r.type) {
                                var a = r.target, s = a.$_GID || (a.$_GID = st.getGID()), o = null;
                                for (var l in null == this._firstTweenDic[s] ? ((o = {}).diyTarget = a, this._firstTweenDic[s] = o) : o = this._firstTweenDic[s], 
                                r.data) null == o[l] && (o[l] = a[l]);
                            }
                        }
                    }
                    "string" == typeof t ? this.gotoLabel(t) : this.gotoTime(t), this._loopKey = e, 
                    this._lastTime = ae.now(), u.timer.frameLoop(1, this, this._update);
                }
            }
        }, {
            key: "_update",
            value: function() {
                if (this._currTime >= this._startTime) {
                    if (!this._loopKey) {
                        for (var t in this._tweenDic) (e = this._tweenDic[t]).complete();
                        return this.pause(), void this._complete();
                    }
                    if (this._complete(), !this._tweenDataList) return;
                    this.gotoTime(0);
                }
                var e, i = ae.now(), n = i - this._lastTime, r = this._currTime += n * this.scale;
                for (t in this._lastTime = i, this._tweenDic) (e = this._tweenDic[t])._updateEase(r);
                if (0 != this._tweenDataList.length && this._index < this._tweenDataList.length) {
                    var a = this._tweenDataList[this._index];
                    r >= a.startTime && (this._index++, 0 == a.type ? (this._gidIndex++, (e = c.getItemByClass("tween", ui))._create(a.target, a.data, a.duration, a.ease, D.create(this, this._animComplete, [ this._gidIndex ]), 0, !1, a.isTo, !0, !1), 
                    e.setStartTime(r), e.gid = this._gidIndex, this._tweenDic[this._gidIndex] = e, e._updateEase(r)) : this.event(Jt.LABEL, a.data));
                }
            }
        }, {
            key: "_animComplete",
            value: function(t) {
                this._tweenDic[t] && delete this._tweenDic[t];
            }
        }, {
            key: "_complete",
            value: function() {
                this.event(Jt.COMPLETE);
            }
        }, {
            key: "reset",
            value: function() {
                var t, e, i;
                if (this._labelDic) for (t in this._labelDic) delete this._labelDic[t];
                for (t in this._tweenDic) this._tweenDic[t].clear(), delete this._tweenDic[t];
                for (t in this._firstTweenDic) delete this._firstTweenDic[t];
                if (this._endTweenDataList = null, this._tweenDataList && this._tweenDataList.length) for (i = this._tweenDataList.length, 
                e = 0; e < i; e++) this._tweenDataList[e] && this._tweenDataList[e].destroy();
                this._tweenDataList.length = 0, this._currTime = 0, this._lastTime = 0, this._startTime = 0, 
                this._index = 0, this._gidIndex = 0, this.scale = 1, u.timer.clear(this, this._update);
            }
        }, {
            key: "destroy",
            value: function() {
                this.reset(), this._labelDic = null, this._tweenDic = null, this._tweenDataList = null, 
                this._firstTweenDic = null;
            }
        }, {
            key: "index",
            get: function() {
                return this._frameIndex;
            },
            set: function(t) {
                this._frameIndex = t, this.gotoTime(this._frameIndex / this._frameRate * 1e3);
            }
        }, {
            key: "total",
            get: function() {
                return this._total = Math.floor(this._startTime / 1e3 * this._frameRate), this._total;
            }
        } ], [ {
            key: "to",
            value: function(t, e, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                return new i().to(t, e, n, r, a);
            }
        }, {
            key: "from",
            value: function(t, e, n) {
                var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                return new i().from(t, e, n, r, a);
            }
        } ]), i;
    }(B), kn = function() {
        function t() {
            (0, o.default)(this, t), this.type = 0, this.isTo = !0;
        }
        return (0, s.default)(t, [ {
            key: "destroy",
            value: function() {
                this.target = null, this.ease = null, this.data = null, this.isTo = !0, this.type = 0, 
                c.recover("tweenData", this);
            }
        } ]), t;
    }(), En = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, [ {
            key: "characterMapContains",
            value: function(e) {
                for (var i = 0; i < t.charsMap.length; ++i) if (t.charsMap[i][0] === e) return !0;
                return !1;
            }
        }, {
            key: "getCharRep",
            value: function(e) {
                for (var i = 0; i < t.charsMap.length; ++i) if (t.charsMap[i][0] === e) return t.charsMap[i];
                return !1;
            }
        }, {
            key: "getCombCharRep",
            value: function(e, i) {
                for (var n = 0; n < t.combCharsMap.length; ++n) if (t.combCharsMap[n][0][0] === e && t.combCharsMap[n][0][1] === i) return t.combCharsMap[n];
                return !1;
            }
        }, {
            key: "isTransparent",
            value: function(e) {
                for (var i = 0; i < t.transChars.length; ++i) if (t.transChars[i] === e) return !0;
                return !1;
            }
        }, {
            key: "getOriginalCharsFromCode",
            value: function(e) {
                var i;
                for (i = 0; i < t.charsMap.length; ++i) if (t.charsMap[i].indexOf(e) > -1) return String.fromCharCode(t.charsMap[i][0]);
                for (i = 0; i < t.combCharsMap.length; ++i) if (t.combCharsMap[i].indexOf(e) > -1) return String.fromCharCode(t.combCharsMap[i][0][0]) + String.fromCharCode(t.combCharsMap[i][0][1]);
                return String.fromCharCode(e);
            }
        }, {
            key: "convertArabic",
            value: function(t) {
                for (var e, i, n = "", r = 0; r < t.length; ++r) {
                    var a = t.charCodeAt(r);
                    if (this.characterMapContains(a)) {
                        for (var s = null, o = null, l = r - 1, h = r + 1; l >= 0 && this.isTransparent(t.charCodeAt(l)); --l) ;
                        for ((!(e = !!(s = l >= 0 ? t.charCodeAt(l) : null) && this.getCharRep(s)) || null == e[2] && null == e[3]) && (s = null); h < t.length && this.isTransparent(t.charCodeAt(h)); ++h) ;
                        if ((!(e = !!(o = h < t.length ? t.charCodeAt(h) : null) && this.getCharRep(o)) || null == e[3] && null == e[4]) && (o = null), 
                        1604 === a && null != o && (1570 === o || 1571 === o || 1573 === o || 1575 === o)) {
                            i = this.getCombCharRep(a, o), n += null != s ? String.fromCharCode(i[4]) : String.fromCharCode(i[1]), 
                            ++r;
                            continue;
                        }
                        if (e = this.getCharRep(a), null != s && null != o && null != e[3]) {
                            n += String.fromCharCode(e[3]);
                            continue;
                        }
                        if (null != s && null != e[4]) {
                            n += String.fromCharCode(e[4]);
                            continue;
                        }
                        if (null != o && null != e[2]) {
                            n += String.fromCharCode(e[2]);
                            continue;
                        }
                        n += String.fromCharCode(e[1]);
                    } else n += String.fromCharCode(a);
                }
                return n;
            }
        }, {
            key: "convertArabicBack",
            value: function(t) {
                var e, i, n = "";
                for (i = 0; i < t.length; ++i) e = t.charCodeAt(i), n += this.getOriginalCharsFromCode(e);
                return n;
            }
        } ]), t;
    }();
    En.charsMap = [ [ 1569, 65152, null, null, null ], [ 1570, 65153, null, null, 65154 ], [ 1571, 65155, null, null, 65156 ], [ 1572, 65157, null, null, 65158 ], [ 1573, 65159, null, null, 65160 ], [ 1574, 65161, 65163, 65164, 65162 ], [ 1575, 65165, null, null, 65166 ], [ 1576, 65167, 65169, 65170, 65168 ], [ 1577, 65171, null, null, 65172 ], [ 1578, 65173, 65175, 65176, 65174 ], [ 1579, 65177, 65179, 65180, 65178 ], [ 1580, 65181, 65183, 65184, 65182 ], [ 1581, 65185, 65187, 65188, 65186 ], [ 1582, 65189, 65191, 65192, 65190 ], [ 1583, 65193, null, null, 65194 ], [ 1584, 65195, null, null, 65196 ], [ 1585, 65197, null, null, 65198 ], [ 1586, 65199, null, null, 65200 ], [ 1587, 65201, 65203, 65204, 65202 ], [ 1588, 65205, 65207, 65208, 65206 ], [ 1589, 65209, 65211, 65212, 65210 ], [ 1590, 65213, 65215, 65216, 65214 ], [ 1591, 65217, 65219, 65220, 65218 ], [ 1592, 65221, 65223, 65224, 65222 ], [ 1593, 65225, 65227, 65228, 65226 ], [ 1594, 65229, 65231, 65232, 65230 ], [ 1600, 1600, 1600, 1600, 1600 ], [ 1601, 65233, 65235, 65236, 65234 ], [ 1602, 65237, 65239, 65240, 65238 ], [ 1603, 65241, 65243, 65244, 65242 ], [ 1604, 65245, 65247, 65248, 65246 ], [ 1605, 65249, 65251, 65252, 65250 ], [ 1606, 65253, 65255, 65256, 65254 ], [ 1607, 65257, 65259, 65260, 65258 ], [ 1608, 65261, null, null, 65262 ], [ 1609, 65263, null, null, 65264 ], [ 1610, 65265, 65267, 65268, 65266 ], [ 1662, 64342, 64344, 64345, 64343 ], [ 1740, 64508, 64510, 64511, 64509 ], [ 1670, 64378, 64380, 64381, 64379 ], [ 1705, 64398, 64400, 64401, 64399 ], [ 1711, 64402, 64404, 64405, 64403 ], [ 1688, 64394, null, null, 64395 ] ], 
    En.combCharsMap = [ [ [ 1604, 1570 ], 65269, null, null, 65270 ], [ [ 1604, 1571 ], 65271, null, null, 65272 ], [ [ 1604, 1573 ], 65273, null, null, 65274 ], [ [ 1604, 1575 ], 65275, null, null, 65276 ] ], 
    En.transChars = [ 1552, 1554, 1555, 1556, 1557, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1648, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1759, 1760, 1761, 1762, 1763, 1764, 1767, 1768, 1770, 1771, 1772, 1773 ];
    var Rn = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "ArrayMul",
            value: function(e, i, n) {
                if (e) if (i) for (var r, a, s, o, l = 0; l < 4; l++) r = e[l], a = e[l + 4], s = e[l + 8], 
                o = e[l + 12], n[l] = r * i[0] + a * i[1] + s * i[2] + o * i[3], n[l + 4] = r * i[4] + a * i[5] + s * i[6] + o * i[7], 
                n[l + 8] = r * i[8] + a * i[9] + s * i[10] + o * i[11], n[l + 12] = r * i[12] + a * i[13] + s * i[14] + o * i[15]; else t.copyArray(e, n); else t.copyArray(i, n);
            }
        }, {
            key: "copyArray",
            value: function(t, e) {
                if (t && e) for (var i = 0; i < t.length; i++) e[i] = t[i];
            }
        } ]), t;
    }();
    return t.AlphaCmd = _, t.Animation = ji, t.AnimationBase = di, t.ArabicReshaper = En, 
    t.AtlasGrid = Zt, t.AtlasInfoManager = ni, t.AudioSound = qe, t.AudioSoundChannel = je, 
    t.BasePoly = Wt, t.BaseShader = H, t.BaseTexture = G, t.Bezier = pt, t.Bitmap = U, 
    t.BitmapFont = ti, t.BlendMode = q, t.BlurFilter = en, t.BlurFilterGLRender = tn, 
    t.BlurFilterSetter = nn, t.BoundsStyle = Ie, t.Browser = ae, t.Buffer = wt, t.Buffer2D = It, 
    t.BufferState2D = St, t.BufferStateBase = bt, t.ButtonEffect = function() {
        function t() {
            (0, o.default)(this, t), this._curState = 0, this.effectScale = 1.5, this.tweenTime = 300;
        }
        return (0, s.default)(t, [ {
            key: "toChangedState",
            value: function() {
                this._curState = 1, this._curTween && ui.clear(this._curTween), this._curTween = ui.to(this._tar, {
                    scaleX: this.effectScale,
                    scaleY: this.effectScale
                }, this.tweenTime, hi[this.effectEase], D.create(this, this.tweenComplete));
            }
        }, {
            key: "toInitState",
            value: function() {
                2 != this._curState && (this._curTween && ui.clear(this._curTween), this._curState = 2, 
                this._curTween = ui.to(this._tar, {
                    scaleX: 1,
                    scaleY: 1
                }, this.tweenTime, hi[this.backEase], D.create(this, this.tweenComplete)));
            }
        }, {
            key: "tweenComplete",
            value: function() {
                this._curState = 0, this._curTween = null;
            }
        }, {
            key: "target",
            set: function(t) {
                this._tar = t, t.on(Jt.MOUSE_DOWN, this, this.toChangedState), t.on(Jt.MOUSE_UP, this, this.toInitState), 
                t.on(Jt.MOUSE_OUT, this, this.toInitState);
            }
        } ]), t;
    }(), t.Byte = W, t.CONST3D2D = Xt, t.CacheManger = ke, t.CacheStyle = Pe, t.CallLater = We, 
    t.CharRenderInfo = ne, t.CharRender_Canvas = se, t.CharRender_Native = oe, t.CharSubmitCache = qt, 
    t.ClassUtils = Me, t.ClipRectCmd = me, t.ColorFilter = lt, t.ColorFilterSetter = rn, 
    t.ColorUtils = ot, t.CommandEncoder = function() {
        function t(e, i, n, r) {
            (0, o.default)(this, t), this._idata = [];
        }
        return (0, s.default)(t, [ {
            key: "getArrayData",
            value: function() {
                return this._idata;
            }
        }, {
            key: "getPtrID",
            value: function() {
                return 0;
            }
        }, {
            key: "beginEncoding",
            value: function() {}
        }, {
            key: "endEncoding",
            value: function() {}
        }, {
            key: "clearEncoding",
            value: function() {
                this._idata.length = 0;
            }
        }, {
            key: "getCount",
            value: function() {
                return this._idata.length;
            }
        }, {
            key: "add_ShaderValue",
            value: function(t) {
                this._idata.push(t);
            }
        }, {
            key: "addShaderUniform",
            value: function(t) {
                this.add_ShaderValue(t);
            }
        } ]), t;
    }(), t.CommonScript = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.call(this);
        }
        return (0, s.default)(i, [ {
            key: "isSingleton",
            get: function() {
                return !1;
            }
        } ]), (0, s.default)(i, [ {
            key: "onAwake",
            value: function() {}
        }, {
            key: "onEnable",
            value: function() {}
        }, {
            key: "onStart",
            value: function() {}
        }, {
            key: "onUpdate",
            value: function() {}
        }, {
            key: "onLateUpdate",
            value: function() {}
        }, {
            key: "onDisable",
            value: function() {}
        }, {
            key: "onDestroy",
            value: function() {}
        } ]), i;
    }(_i), t.Component = _i, t.Config = h, t.Const = Ae, t.Context = he, t.Dragging = ci, 
    t.Draw9GridTexture = ve, t.DrawCircleCmd = d, t.DrawCurvesCmd = f, t.DrawImageCmd = v, 
    t.DrawLineCmd = p, t.DrawLinesCmd = y, t.DrawParticleCmd = $i, t.DrawPathCmd = g, 
    t.DrawPieCmd = m, t.DrawPolyCmd = T, t.DrawRectCmd = x, t.DrawStyle = gt, t.DrawTextureCmd = ht, 
    t.DrawTexturesCmd = Te, t.DrawTrianglesCmd = fe, t.Earcut = Vt, t.EarcutNode = Yt, 
    t.Ease = hi, t.EffectAnimation = qi, t.EffectBase = an, t.Event = Jt, t.EventDispatcher = B, 
    t.FadeIn = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return (0, s.default)(i, [ {
            key: "_doTween",
            value: function() {
                return this.target.alpha = 0, ui.to(this.target, {
                    alpha: 1
                }, this.duration, hi[this.ease], this._comlete, this.delay);
            }
        } ]), i;
    }(an), t.FadeOut = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return (0, s.default)(i, [ {
            key: "_doTween",
            value: function() {
                return this.target.alpha = 1, ui.to(this.target, {
                    alpha: 0
                }, this.duration, hi[this.ease], this._comlete, this.delay);
            }
        } ]), i;
    }(an), t.FillTextCmd = xe, t.FillTextureCmd = ut, t.Filter = at, t.FilterSetterBase = Ji, 
    t.FontInfo = ee, t.FrameAnimation = vi, t.GlowFilter = on, t.GlowFilterGLRender = sn, 
    t.GlowFilterSetter = ln, t.GrahamScan = yt, t.GraphicAnimation = zi, t.Graphics = Re, 
    t.GraphicsBounds = ye, t.HTMLCanvas = Se, t.HTMLChar = pn, t.HTMLImage = Li, t.HalfFloatUtils = V, 
    t.Handler = D, t.HitArea = we, t.HttpRequest = ei, t.ICharRender = re, t.ILaya = u, 
    t.IStatRender = Ti, t.IndexBuffer2D = Pt, t.InlcudeFile = bi, t.Input = Ne, t.KeyBoardManager = ze, 
    t.KeyLocation = hn, t.Keyboard = un, t.Laya = Di, t.LayaGL = A, t.LayaGLQuickRunner = Ce, 
    t.LayaGLRunner = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "uploadShaderUniforms",
            value: function(t, e, i, n) {
                for (var r = i._data, a = e.getArrayData(), s = 0, o = 0, l = a.length; o < l; o++) {
                    var h = a[o];
                    if (n || -1 !== h.textureID) {
                        var u = r[h.dataOffset];
                        null != u && (s += h.fun.call(h.caller, h, u));
                    }
                }
                return s;
            }
        }, {
            key: "uploadCustomUniform",
            value: function(t, e, i, n) {
                var r = 0, a = e[i];
                return a && null != n && (r += a.fun.call(a.caller, a, n)), r;
            }
        }, {
            key: "uploadShaderUniformsForNative",
            value: function(t, e, i) {
                var n = A.UPLOAD_SHADER_UNIFORM_TYPE_ID;
                i._runtimeCopyValues.length > 0 && (n = A.UPLOAD_SHADER_UNIFORM_TYPE_DATA);
                var r = i._data;
                return A.instance.uploadShaderUniforms(e, r, n);
            }
        } ]), t;
    }(), t.LayaGPU = _e, t.Loader = ii, t.LoaderManager = ri, t.LocalStorage = si, t.Log = yn, 
    t.MathUtil = fi, t.MatirxArray = Rn, t.Matrix = k, t.Mesh2D = Dt, t.MeshParticle2D = Pi, 
    t.MeshQuadTexture = Bt, t.MeshTexture = Ft, t.MeshVG = Ot, t.Mouse = Ii, t.MouseManager = Ge, 
    t.Node = De, t.Path = mt, t.PerfData = gn, t.PerfHUD = mn, t.PerformancePlugin = Xe, 
    t.Point = E, t.Pool = c, t.PoolCache = Tn, t.Prefab = Je, t.PrimitiveSV = Ai, t.QuickTestTool = cn, 
    t.Rectangle = R, t.Render = de, t.RenderInfo = Mt, t.RenderSprite = be, t.RenderState2D = z, 
    t.RenderTexture2D = K, t.Resource = N, t.ResourceVersion = dn, t.RestoreCmd = ct, 
    t.RotateCmd = _t, t.RunDriver = Ve, t.SaveBase = kt, t.SaveClipRect = Et, t.SaveCmd = pe, 
    t.SaveMark = Rt, t.SaveTransform = At, t.SaveTranslate = Ct, t.ScaleCmd = dt, t.Scene = Qi, 
    t.SceneLoader = Zi, t.SceneUtils = yi, t.Script = Hi, t.Shader = tt, t.Shader2D = Ut, 
    t.Shader2X = et, t.ShaderCompile = wi, t.ShaderDefines2D = Q, t.ShaderDefinesBase = Z, 
    t.ShaderNode = Si, t.ShaderValue = function() {
        return function t() {
            (0, o.default)(this, t);
        };
    }(), t.SkinMeshBuffer = Gt, t.SkinSV = Ri, t.Socket = fn, t.Sound = function(t) {
        (0, a.default)(i, t);
        var e = l(i);
        function i() {
            return (0, o.default)(this, i), e.apply(this, arguments);
        }
        return (0, s.default)(i, [ {
            key: "load",
            value: function(t) {}
        }, {
            key: "play",
            value: function() {
                return null;
            }
        }, {
            key: "dispose",
            value: function() {}
        }, {
            key: "duration",
            get: function() {
                return 0;
            }
        } ]), i;
    }(B), t.SoundChannel = Ke, t.SoundManager = $e, t.SoundNode = _n, t.Sprite = Be, 
    t.SpriteConst = ge, t.SpriteStyle = Le, t.Stage = He, t.Stat = $, t.StatUI = xi, 
    t.StringKey = J, t.Submit = Ht, t.SubmitBase = xt, t.SubmitCMD = rt, t.SubmitCanvas = zt, 
    t.SubmitKey = nt, t.SubmitTarget = Kt, t.SubmitTexture = jt, t.System = function() {
        function t() {
            (0, o.default)(this, t);
        }
        return (0, s.default)(t, null, [ {
            key: "changeDefinition",
            value: function(t, e) {
                window.Laya[t] = e;
                var i = t + "=classObj";
                window.eval(i);
            }
        } ]), t;
    }(), t.SystemUtils = Y, t.TTFLoader = li, t.Text = Oe, t.TextAtlas = $t, t.TextRender = le, 
    t.TextStyle = Fe, t.TextTexture = Qt, t.Texture = te, t.Texture2D = X, t.TextureSV = Ci, 
    t.TimeLine = xn, t.Timer = ki, t.TouchManager = Ue, t.TransformCmd = ft, t.TranslateCmd = vt, 
    t.Tween = ui, t.URL = O, t.Utils = st, t.Value2D = it, t.VectorGraphManager = Ee, 
    t.VertexArrayObject = function() {
        return function t() {
            (0, o.default)(this, t);
        };
    }(), t.VertexBuffer2D = Lt, t.VideoTexture = vn, t.WeakObject = pi, t.WebAudioSound = Qe, 
    t.WebAudioSoundChannel = Ze, t.WebGL = ce, t.WebGLCacheAsNormalCanvas = Nt, t.WebGLContext = L, 
    t.WebGLRTMgr = j, t.WordText = ie, t.WorkerLoader = Mi, t.__init = Ui, t._static = Xi, 
    t.alertGlobalError = Yi, t.enableDebugPanel = Vi, t.init = Gi, t.isWXOpenDataContext = void 0, 
    t.isWXPosMsg = void 0, t.version = Wi, t.static = Xi, t;
}({});